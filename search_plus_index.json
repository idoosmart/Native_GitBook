{"./":{"url":"./","title":"IDOSDK documentation","keywords":"","body":"{IDO Standardization Description Document} IDO SDK Integration Description IDO SDK Bluetooth Library Interface Description IDO SDK Bridge Instructions IDO SDK Alexa Instructions Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/IDOBluetooth.html":{"url":"doc/IDOBluetooth.html","title":"IDOSDK Bluetooth library","keywords":"","body":"Bluetooth library (optional) Functional Overview Based on the native platform Bluetooth library package, it is used to scan peripheral devices, obtain the returned device collection, display it in the list, select the device that needs to be connected, and return the device information and whether the device is in OTA mode after the connection is successful. If the connection fails, there will be an error callback. . The default scanning signal filtering parameter is 80, and the automatic scanning connection timeout is 20 seconds. method addBleDelegate(api:) Add Bluetooth proxy IDOBleDelegate addDfuDelegate(api:) Add DFU upgrade (nordic) bluetoothRegister(heartPingSecond:outputToConsole:) Register, the program starts running and calls delegate agent heartPingSecond: heartbeat packet interval (ios) outputToConsole: console output log startScan(macAddress:completion:) Start searching macAddress (Android): Search based on Mac address. Returns the specified search device. If not specified, returns null. scanFilter(deviceName:deviceID:macAddress:uuid:) Search filters deviceName: only search for devices with deviceName deviceID: only search for devices with deviceID macAddress: Only search for devices with macAddress uuid: Only search devices with uuid stopScan() Stop search connect(device:) Connection device: Mac address must be passed, iOS must bring uuid, it is best to use the object returned by search autoConnect(device:) Use this to reconnect the device cancelConnect(macAddress:completion:) Cancel connection getBluetoothState(completion:) Get Bluetooth status getDeviceState(device:completion:) Get device connection status writeData(data:device:type:completion:) send data data:data device: device sending data type:0 BLE data, 1 SPP data setBtPair(device:) bt pairing (android) cancelPair(device:) Unpair (android) connectSPP(btMacAddress:) Connect SPP disconnectSPP(btMacAddress:) Disconnect SPP startNordicDFU(config:) Initiate dfu upgrade Example Register Bluetooth module Swift: //Register Bluetooth library sdk.ble.addBleDelegate(api: ) sdk.ble.bluetoothRegister(heartPingSecond: 5, outputToConsole: false) sdk.ble.getBluetoothState { [weak self] stateModel in //Status monitoring } Kotlin: //Register Bluetooth library sdk.ble.addBleDelegate(IDOBleDelegate) sdk.ble.bluetoothRegister(false) sdk.ble.getBluetoothState { //Status monitoring } Agent implementation Swift: // implement proxy extension SomeClass: IDOBleDelegate { func scanResult(list: [IDODeviceModel]?) { //Scan device list print(\"scanResult list count:\\(String(describing: list?.count))\") } func bluetoothState(state: IDOBluetoothStateModel) { //Bluetooth status print(\"on bluetoothState callback: \\(String(describing: state.scanType?.rawValue))\") } func deviceState(state: IDODeviceStateModel) { // device status print(\"on deviceState callback: \\(String(describing: state.state))\") } } Kotlin: // implement proxy private val bleDelegate = object : IDOBleDelegate { override fun scanResult(list: List?) { //Scan device list } override fun bluetoothState(state: IDOBluetoothStateModel) { //Bluetooth status } override fun deviceState(state: IDODeviceStateModel) { // device status } override fun stateSPP(state: IDOSppStateModel) { } override fun writeSPPCompleteState(btMacAddress: String) { } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:02:19 "},"doc/IDOBridge.html":{"url":"doc/IDOBridge.html","title":"IDOSDK bridge description","keywords":"","body":"Bridge BridgeInterface Used to bridge the Bluetooth library and protocol library to realize Bluetooth data and status transmission Methods setupBridge(delegate:logType:) Register, the program starts running and calls Parameters: delegate: IDOBridgeDelegate proxy logType: log level markConnectedDevice(uniqueId:otaType:isBinded:deviceName:completion:) Mark the device as connected (called when Bluetooth is connected) Parameters: uniqueId: Android (mac address of the currently connected device), iOS (mac address or uuid of the currently connected device) otaType: Set ota mode isBinded: binding status deviceName: device name markDisconnectedDevice(macAddress:uuid:completion:) Mark the device as disconnected (called when Bluetooth is disconnected) receiveDataFromBle(data:macAddress:useSPP:) Bluetooth response data general entry type data type 0:ble 1:SPP writeDataComplete() Sending Bluetooth data completed Example Register Brigde module Swift: // protocol library sdk.bridge.setupBridge(delegate: , logType: .release) Bluetooth library registration reference Agent implementation Swift: // implement proxy extension SomeClass: IDOBridgeDelegate { //Listen to SDK status notifications func listenStatusNotification(status: IDOStatusNotification) { print(\"StatusNotification: \\(status)\") NotificationCenter.default.post(name: \"onSdkStatusChanged\", object: status) } //Listen to device active notification/control events func listenDeviceNotification(model: IDODeviceNotificationModel) { print(\"DeviceNotification: \\(model)\") NotificationCenter.default.post(name: \"onSdkDeviceStateChanged\", object: model) } } Kotlin: class BleData : IDOBridgeDelegate { override fun listenStatusNotification(status: IDOStatusNotification) { println(\"listenStatusNotification $status\"); } override fun listenDeviceNotification(status: IDODeviceNotificationModel) { println(\"listenDeviceNotification $status\"); } } Bridge Bluetooth library (internal) Use the Bluetooth library provided by the SDK Swift: // implement proxy extension SomeClass: IDOBleDelegate { func scanResult(list: [IDODeviceModel]?) { //Scan result set } func deviceState(state: IDODeviceStateModel) { //Device related status } func bluetoothState(state: IDOBluetoothStateModel) { //Bluetooth related status } } Kotlin: class Blelisten : IDOBleDelegate { override fun scanResult(list: List?) { //Scan result set } override fun bluetoothState(state: IDOBluetoothStateModel) { //Bluetooth related status } override fun deviceState(idoDeviceStateModel: IDODeviceStateModel) { //Device related status } } Bridge Bluetooth library (external) Use Bluetooth libraries not provided by the SDK Swift: // External Bluetooth library access // 1. When a Bluetooth device is connected or disconnected, the corresponding method of the SDK needs to be called: // Mark the device as connected let uniqueId = \"mac address or uuid of the Bluetooth device\" sdk.bridge.markConnectedDevice(uniqueId: uniqueId, otaType: .none, isBinded: false, deviceName: deviceModel.name) { rs in } // Mark the device as disconnected sdk.bridge.markDisconnectedDevice(macAddress: self.deviceModel?.macAddress, uuid: self.deviceModel?.uuid) { rs in } // 2. Send data: Protocol library data -> Bluetooth device // In the bridge agent IDOBridgeDelegate, implement sending the received data through the Bluetooth library, and call the write completion after the sending is completed. extension SomeClass: IDOBridgeDelegate { //Need to send command data to Bluetooth device (!!!Important) func writeDataToBle(bleData: protocol_channel.IDOBleData) { guard let device = currentDeviceModel else { return } guard let characteristic = device.peripheral.writeCharacteristic() else { return } //Replace accordingly according to actual situation here bleMgr.write(peripheral: characteristic.0, characteristic: characteristic.1, data: bleData.data!) { err in if err != nil { print(\"Write failed: \\(err.debugDescription)\") }else { // Writing completed (!!!Important) sdk.bridge.writeDataComplete() } } } //Listen to SDK status notifications func listenStatusNotification(status: IDOStatusNotification) { print(\"StatusNotification: \\(status)\") NotificationCenter.default.post(name: \"onSdkStatusChanged\", object: status) } //Listen to device active notification/control events func listenDeviceNotification(model: IDODeviceNotificationModel) { print(\"DeviceNotification: \\(model)\") NotificationCenter.default.post(name: \"onSdkDeviceStateChanged\", object: model) } } // 3. Receive data: Bluetooth device -> protocol library SomeBleSDK: // for reference only // //Receive Bluetooth response data func receiveData(data: SomeDataClass) { if data.data != nil { //Send data to the protocol library sdk.bridge.receiveDataFromBle(data: data.data!, macAddress: data.macAddress or nil) } else { print(\"receiveData data is null\") } } Kotlin: // External Bluetooth library access // 1. When a Bluetooth device is connected or disconnected, the corresponding method of the SDK needs to be called: // Mark the device as connected var mac = \"xx:xx:xx:xx:xx:xx\" sdk.bridge.markConnectedDevice(mac: String, type: otaType, isBinded:boolean, deviceName: String) // Mark the device as disconnected sdk.bridge.markDisconnectedDevice(mac: String, type: otaType, isBinded:boolean, deviceName: String) // 2. Send data: Protocol library data -> Bluetooth device // In the bridge agent IDOBridgeDelegate, implement sending the received data through the Bluetooth library, and call the write completion after the sending is completed. // sdk.bridge.setupBridge(BleDataBrige(), IDOLogType.RELEASE) global registration val uuid_service:String = \"00000aF0-0000-1000-8000-00805f9b34fb\" val uuid_characteristic_notify:String = \"00000aF7-0000-1000-8000-00805f9b34fb\" val uuid_characteristic_write:String = \"00000aF6-0000-1000-8000-00805f9b34fb\" class BleDataBrige : IDOBridgeDelegate { override fun listenStatusNotification(status: IDOStatusNotification) { Logutil.logMessage(\"bledata\",\"status:$status\") } override fun writeDataToBle(request: IDOBleDataRequest) { Logutil.logMessage(\"bledata\",\"writeDataToBle:${request.data}\") //This callback is that the sdk will call back the instructions that need to be sent. // Through the Bluetooth service, as above, get the bluetoothGatt, characteristic, and then write the data bluetoothGatt.writeCharacteristic(characteristic) sdk.bridge.writeDataComplete() } override fun listenDeviceNotification(status: IDODeviceNotificationModel) { Logutil.logMessage(\"bledata\",\"listenDeviceNotification:${status}\") } private fun getCharacteristic( gatt: BluetoothGatt?, serviceId: UUID, characteristicId: UUID ): BluetoothGattCharacteristic? { if (gatt == null) { return null } val service = gatt.getService(serviceId) ?: // DebugLog.p(\"service is nullllll\"); return null return service.getCharacteristic(characteristicId) } } } // 3. Receive data: Bluetooth device -> protocol library After Bluetooth receives the data, it passes the data to sdk, and sdk will parse and return the corresponding request callback result. sdk.bridge.receiveDataFromBle(data,bleDevice?.mac,false) demo:// receives Bluetooth response data func receiveData(data: ByteArray) { sdk.bridge.receiveDataFromBle(data,bleDevice?.mac,false) } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:04:28 "},"doc/IDOAlexa.html":{"url":"doc/IDOAlexa.html","title":"IDOSDK Alexa ","keywords":"","body":"Alexa Functional Overview It can only be used by devices that support Alexa. Before use, make sure that the corresponding ClientID and ProductID are configured in the Alexa official backend. Attributes isLogin Are you logged in? method onLoginStateChanged(handle:) Monitor login status changes setupAlexa(delegate:clientId:) configure alexa Parameters: delegate : proxy clientId: ID generated by Alexa background authorizeRequest(productId:handle:completion:) Alexa CBL Authorization Parameters: productId: product ID registered in Alexa backend handle: callback verificationUri and pairCode that need to be opened for Alexa authentication completion: authorization result Returns: Cancellable instance logout() sign out Example Configure Alexa module Swift: // Configure Alexa sdk.alexa.setupAlexa(delegate: , clientId: clientId) // implement proxy extension SomeClass: IDOAlexaDelegate { /// Get health data func getHealthValue(valueType: IDOGetValueType) -> Int { return 0 } /// Get heart rate func getHrValue(dataType: Int, timeType: Int) -> Int { return 0 } /// Function control /// /// funType 0 turns off the phone search function func functionControl(funType: Int) {} } Kotlin: // Configure Alexa alexa.setupAlexa(this, \"clientId from alexa developer account\"/*only for test*/) //implement proxy private val delegate = object:IDOAlexaDelegate{ /// Get health data override fun getHealthValue(valueType: IDOGetValueType): Int { return 0 } /// Get heart rate override fun getHrValue(dataType: Int, timeType: Int): Int { return 0 } // Function control // // funType 0 turns off the phone search function override fun functionControl(funType: Int) { TODO(\"Not yet implemented\") } } Monitor login status Swift: // Listen for login sdk.alexa.onLoginStateChanged { [weak self] state in switch state { case .logging: // logging in... case .logined: // Has logged case .logout: // Not logged in } } Kotlin: // Listen for login alexa.onLoginStateChanged { when(it){ IDOAlexaLoginState.LOGGING -> { // 登录中... } IDOAlexaLoginState.LOGINED -> { // 已登录 } IDOAlexaLoginState.LOGOUT -> { // 未登录 } } } Login (based on CBL) Swift: // Log in let canceler = sdk.alexa.authorizeRequest(productId: \"ProductId\") { [weak self] verificationUri, pairCode in // pairCode Your verification code, which needs to be displayed to the user during the user login process and used for verification // verificationUri needs to jump to the login page (html) } completion: { [weak self] rs in if case .successful = rs { // login successful } else { // Login failed } } //Cancel login midway canceler.cancel() Kotlin: // Log in val canceler = alexa.authorizeRequest(\"ProductId\", { verificationUri, pairCode -> // pairCode Your verification code, which needs to be displayed to the user during the user login process and used for verification // verificationUri needs to jump to the login page (html) //for example val dialog = AlertDialog.Builder(this@AlexaActivity).setTitle(getString(R.string.alexa_dialog_title)) .setMessage(getString(R.string.alexa_dialog_msg).format(pairCode)) .setPositiveButton(R.string.alexa_dialog_copy) { dialog, which -> val cm = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager val mClipData = ClipData.newPlainText(\"Label\", pairCode) cm.setPrimaryClip(mClipData) val intent = Intent(Intent.ACTION_VIEW) intent.data = Uri.parse(verificationUri) startActivity(intent) dialog.dismiss() }.setNegativeButton(R.string.alexa_dialog_cancel, { dialog, which -> dialog.dismiss() }).show() }, { rs -> if (rs == IDOAlexaAuthorizeResult.SUCCESSFUL) { // login successful } else { // Login failed } }) //Cancel login midway canceler.cancel() quit Swift: // sign out sdk.alexa.logout() Kotlin: // sign out sdk.alexa.logout() Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:00:27 "},"doc/IDOSDK.html":{"url":"doc/IDOSDK.html","title":"IDOSDK interface","keywords":"","body":"IDO smart bracelet SDK Functional Overview Suitable for iOS/Android devices and supports IDO bracelets to implement Bluetooth connection control framework library Quick integration Integrate using Cocoapods Add the following content to the Podfile: source 'https://github.com/idoosmart/IDOSmartSpec.git' platform:ios, '9.0' target 'your_target_name1' do pod 'IDOSDK-full', '~> 4.0.15' end Then execute the pod install command in the project root directory to integrate. To use CocoaPods, please refer to: CocoaPods Guides Initialize SDK Initialize Flutter import Flutter import FlutterPluginRegistrant class AppDelegate: UIResponder, UIApplicationDelegate { private var flutterEngine: FlutterEngine? func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool { self.initFlutterEngine() ... return true } } extension AppDelegate { private func initFlutterEngine() { self.flutterEngine = FlutterEngine(name: \"io.flutter\", project: nil) self.flutterEngine?.run(withEntrypoint: nil) if let engine = flutterEngine { GeneratedPluginRegistrant.register(with: engine) print(\"flutterEngine finished\") } else { print(\"engine is null\") assert(false, \"engine is null\") } } } Register SDK The SDK is divided into three modules: Protocol library, Bluetooth library and Alexa library. Registration is required before use (register globally once) import protocol_channel // Register sdk func registerSDK() { // ble (only when using built-in Bluetooth) sdk.ble.addBleDelegate(api: self) sdk.ble.bluetoothRegister(heartPingSecond: 5, outputToConsole: false) sdk.ble.getBluetoothState { [weak self] stateModel in self?.bleState = stateModel self?.funcPage?.bleState = stateModel } // protocol library sdk.bridge.setupBridge(delegate: self, logType: .release) // alexa (no need to connect if you don’t have alexa function) sdk.alexa.setupAlexa(delegate: self, clientId: clientId) } Using SDK The API of the SDK can be called by the globally defined constant sdk import protocol_channel func someMethod() { /// Device Information sdk.device.xx /// Menu sdk.funcTable.xx /// Command sdk.cmd.xx /// Bridge sdk.bridge.xx /// Bluetooth (only when using the built-in Bluetooth library) sdk.ble.xx /// Alexa sdk.alexa.xx /// file transfer sdk.transfer.xx /// Message icon sdk.messageIcon.xx /// data synchronization sdk.syncData.xx /// Data exchange sdk.dataExchange.xx /// Device log sdk.deviceLog.xx /// Common tools, cache sdk.tool.xx } android sdk access Use android studio integration Integrate SDK. SDK is divided into with Bluetooth and without Bluetooth (you can use your own Bluetooth library). Users can choose one according to their needs. (1) The sdk with Bluetooth library is as follows, a total of 6 files (you can copy it from the lib in example_android demo, the lib contains the latest version) flutter_bluetooth_release-4.0.25.aar flutter_release-4.0.25.aar native_channel_release-4.0.25.aar path_provider_android_release-4.0.25.aar protocol_channel_release-4.0.25.aar protocol_ffi_release-4.0.25.aar (2) SDK without Bluetooth library, four files in total (you can copy it from the lib in example_android_lite demo, the latest version is in the lib) flutter_release-4.0.23.aar native_channel_release-4.0.23.aar protocol_channel_release-4.0.23.aar protocol_ffi_release-4.0.23.aar Copy the downloaded AAR package to the libs directory Modify the build.gradle(app) file dependencies { implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs') //Integrate sdk implementation \"io.flutter:flutter_embedding_release:1.0.0-0f359063c487ee70787e58b4b011cbb3c2f53fd6\" //sdk files that need to be dependent on implementation \"io.flutter:arm64_v8a_release:1.0.0-0f359063c487ee70787e58b4b011cbb3c2f53fd6\" //sdk files that need to be dependent on implementation \"io.flutter:armeabi_v7a_release:1.0.0-0f359063c487ee70787e58b4b011cbb3c2f53fd6\"implementation //sdk files that need to be dependent on .... } Register SDK The SDK is divided into three modules: Protocol library, Bluetooth library and Alexa library. Registration is required before use. Please refer to the demo for details. import protocol_channel // Register sdk func registerSDK() { sdk.init(this) //Global registration // ble (only when using built-in Bluetooth) sdk.ble.addBleDelegate(bleDelegate: IDOBleDelegate) sdk.ble.getBluetoothState { } // protocol library sdk.bridge.setupBridge( idoBrigeDelegate : IDOBridgeDelegate, type:logType) // alexa (if you don’t have alexa function, you don’t need to access it) sdk.alexa.setupAlexa(delegate: IDOAlexaDelegate, clientId: clientId) } Using SDK The API of the SDK can be called by the globally defined constant sdk import protocol_channel fun someMethod() { /// Device Information sdk.device.xx /// Menu sdk.funcTable.xx /// Command sdk.cmd.xx /// Bridge sdk.bridge.xx /// Bluetooth (only when using the built-in Bluetooth library) sdk.ble.xx /// Alexa sdk.alexa.xx /// file transfer sdk.transfer.xx /// Message icon sdk.messageIcon.xx /// data synchronization sdk.syncData.xx /// Data exchange sdk.dataExchange.xx /// Device log sdk.deviceLog.xx /// Common tools, cache sdk.tool.xx } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:14:59 "},"doc/IDOBindDevice.html":{"url":"doc/IDOBindDevice.html","title":"Bind/Unbind","keywords":"","body":"Device binding/unbinding Attributes isBinding Whether it is in the binding (in the binding, switching devices will be restricted) method bind(osVersion:onDeviceInfo:onFuncTable:completion:) 0 Binding failed 1 Binding successful 2 Already bound 3 Authorization code required for binding 4 Binding refused 5 Binding error device 6 Authorization code verification failed 7 Unbinding 8 Binding failed (failed to obtain the menu) 9 Binding Failed (failed to obtain device information) cancelBind() Unbind appMarkBindResult(success: Bool) The APP delivers the binding result (only used by devices that require the app to confirm the binding result) unbind(macAddress:isForceRemove:completion:) Initiate unbinding macAddress: device Mac address isForceRemove: forcefully delete the device, delete it even if the device does not respond setAuthCode(code:osVersion:completion:) Send authorization pairing code (only for supported devices) code pairing code osVersion: system version (take the major version number) Example Swift: // Binding sdk.cmd.bind(osVersion: 15) { devInfo in print(\"1 Obtained device information - battLevel: \\(devInfo.battLevel)\") } onFuncTable: { ft in print(\"1Get the menu - alexaSetEasyOperateV3: \\(ft.alexaSetEasyOperateV3)\") } completion: { status in switch status { case .failed: print(\"\\(status)\") // Binding failed case .successful: // Binding successful print(\"\\(status)\") print(\"2 Obtained device information - battLevel: \\(sdk.device.battLevel)\") print(\"2 Get the function table - alexaSetEasyOperateV3: \\(sdk.funcTable.alexaSetEasyOperateV3)\") case .binded: print(\"\\(status)\") case .needAuth: print(\"\\(status)\") case .refusedBind: print(\"\\(status)\") case .wrongDevice: print(\"\\(status)\") case .authCodeCheckFailed: print(\"\\(status)\") case .canceled: print(\"\\(status)\") case .failedOnGetFunctionTable: print(\"\\(status)\") case .failedOnGetDeviceInfo: print(\"\\(status)\") case .timeout: print(\"\\(status)\") case .agreeDeleteDeviceData: print(\"\\(status)\") case .denyDeleteDeviceData: print(\"\\(status)\") case .timeoutOnNewAccount: print(\"\\(status)\") case .needConfirmByApp: print(\"\\(status)\") Cmds.sendBindResult(isSuccess: true).send { rs in if case .success(_) = rs { print(\"success:\") sdk.cmd.appMarkBindResult(success: true) }else { print(\"failure\") sdk.cmd.appMarkBindResult(success: false) } } } } // Unbind sdk.cmd.unbind(macAddress: macAddress, isForceRemove: true, completion: { rs in ifrs{ // Unbinding successful } else { // Unbinding failed } }) Kotlin: //Bind sdk.cmd.bind(15, { println(\"Get device information state$it\"); }, { println(\"Get the function table functableinterface state$it\"); }, { closeProgressDialog() when (it) { IDOBindStatus.SUCCESSFUL -> { toast(\"bind ok\") //save bind info SPUtil.putAValue(bind_key + device?.macAddress, true) } IDOBindStatus.FAILED, IDOBindStatus.BINDED, IDOBindStatus.NEEDAUTH, IDOBindStatus.REFUSEDBIND -> { println(\"bind failed: ${it.name}\") toast(\"bind failed: ${it.name}\") } else -> { } } }) // Unbind sdk.cmd.unbind(macAddress = macAddress, isForceRemove = true, completion = { rs -> if (rs) { // Unbinding successful } else { // Unbinding failed } }) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:01:37 "},"doc/logicDescription/syncSettings.html":{"url":"doc/logicDescription/syncSettings.html","title":"Synchronize configuration after device binding","keywords":"","body":"Synchronization configuration instructions after iDO device binding Judge according to the menu and send it after opening it. Automatic blood oxygen detection setSpo2Switch body energy switch setBodyPowerTurn Initialize body temperature switch setTemperatureSwitch breathing switch setRRespiRateTurn Drink water reminder setDrinkWaterRemind fitness setFitnessGuidance There are 3 types of heart rate. Determine which one to send based on the function table (mutually exclusive). setHeartRateModeSmart, setHeartMode, setHeartRateMode Set default heart rate zones setHeartRateInterval Motion type synchronization configuration (mutually exclusive) setSportSortV3, setSportModeSort Synchronize menstrual cycles setMenstruation, setMenstruationRemind ambient volume setV3Noise Pressure sync configuration setStressSwitch Scientific sleep setScientificSleepSwitch voice assistant setVoiceAssistantOnOff Initialize walking reminder setWalkRemind Hand washing reminder setHandWashingReminder music switch setMusicOnOff do not disturb mode setNotDisturb Find mobile phone setFindPhone Send Inquiry Intelligent Motion Recognition getActivitySwitch Quick application setMenuList Quick reply to incoming calls setCallQuickReplyOnOff SendSet screen brightness setScreenBrightness Raise your wrist to light up the screen setUpHandGesture weather switch setWeatherSwitch Not according to the menu Set default units setUnit Set default settings units setUserInfo Bind & Unbind Example Swift: // Binding sdk.cmd.bind(osVersion: 15) { devInfo in print(\"1 Obtained device information - battLevel: \\(devInfo.battLevel)\") } onFuncTable: { ft in print(\"1Get the menu - alexaSetEasyOperateV3: \\(ft.alexaSetEasyOperateV3)\") } completion: { status in switch status { case .failed: print(\"\\(status)\") // Binding failed case .successful: // Binding successful print(\"\\(status)\") print(\"2 Obtained device information - battLevel: \\(sdk.device.battLevel)\") print(\"2 Get the function table - alexaSetEasyOperateV3: \\(sdk.funcTable.alexaSetEasyOperateV3)\") case .binded: print(\"\\(status)\") case .needAuth: print(\"\\(status)\") case .refusedBind: print(\"\\(status)\") case .wrongDevice: print(\"\\(status)\") case .authCodeCheckFailed: print(\"\\(status)\") case .canceled: print(\"\\(status)\") case .failedOnGetFunctionTable: print(\"\\(status)\") case .failedOnGetDeviceInfo: print(\"\\(status)\") } } // Unbind sdk.cmd.unbind(macAddress: macAddress, isForceRemove: true, completion: { rs in ifrs{ // Unbinding successful } else { // Unbinding failed } }) Kotlin: //Bind sdk.cmd.bind(15, { println(\"Get device information state$it\"); }, { println(\"Get the function table functableinterface state$it\"); }, { closeProgressDialog() when (it) { IDOBindStatus.SUCCESSFUL -> { toast(\"bind ok\") //save bind info SPUtil.putAValue(bind_key + device?.macAddress, true) } IDOBindStatus.FAILED, IDOBindStatus.BINDED, IDOBindStatus.NEEDAUTH, IDOBindStatus.REFUSEDBIND -> { println(\"bind failed: ${it.name}\") toast(\"bind failed: ${it.name}\") } else -> { } } }) // Unbind sdk.cmd.unbind(macAddress = macAddress, isForceRemove = true, completion = { rs -> if (rs) { // Unbinding successful } else { // Unbinding failed } }) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:23:38 "},"doc/IDODeviceInfo.html":{"url":"doc/IDODeviceInfo.html","title":"Device Information","keywords":"","body":"Device Information Methods refreshDeviceInfo(forced:completion:) Refresh device information Parameters: forced: forced refresh refreshFirmwareVersion(forced:completion:) Refresh device level 3 version Parameters: forced: forced refresh Device information model description *IDODeviceInterface Properties Type Description deviceMode Int Device mode 0: sports mode, 1: sleep mode battStatus Int Battery status 0: normal, 1: charging, 2: full, 3: low battery battLevel Int Battery level 0～100 rebootFlag Int Whether to reboot 0: No reboot 1: Reboot bindState Int Binding state 0: Unbound 1: Bound bindType Int Binding type 0: Default 1: Click 2: Long press 3: Click the screen horizontally to confirm and cancel, confirm on the left 4: Click the screen horizontally to confirm and cancel, confirm on the right5: Screen Click vertically to confirm and cancel, Confirm is at the top 6: Click vertically on the screen to confirm and cancel, Confirm is at the bottom 7: Click (a button on the right) bindTimeout Int Binding timeout is up to 15 seconds, 0 means no timeout platform Int Device platform 0:nordic, 10:realtek 8762x, 20:cypress psoc6, 30:Apollo3, 40:Goodix, 50:nordic+Telink Micro,60:Telink Micro+5340+no nand flash, 70:Goodix+Furuikun, 80:5340 deviceShapeType Int Device shape type 0: invalid; 1: circular; 2: square; 3: ellipse deviceType Int Device type 0: invalid; 1: bracelet; 2: watch dialMainVersion Int Custom dial main version starts from 1 0: The corresponding custom dial function is not supported showBindChoiceUi Int Display hook ui interface when firmware is bound 0: Not required 1: Required deviceId Int device id firmwareVersion Int Device firmware major version number macAddress String Current device mac address - no colon macAddressFull String Current device mac address - with colon deviceName String Note: The name is passed in by calling markConnectedDevice(...), the sdk will not refresh the valueTo get the latest value, you can use Cmds.getDeviceName().send(..) Method otaMode Bool OTA mode uuid String UUID ios-specific macAddressBt String BT macAddress - with colon fwVersion1 Int Firmware version version1 fwVersion2 Int Firmware version version2 fwVersion3 Int Firmware version version3 fwBtFlag Int BT version effective flag 0: Invalid 1: Indicates that the firmware has corresponding BT firmware fwBtVersion1 Int BT version version1 fwBtVersion2 Int BT version version2 fwBtVersion3 Int BT version version3 fwBtMatchVersion1 Int The version of BT that needs to be matched version1 fwBtMatchVersion2 Int The version of BT that needs to be matched version2 fwBtMatchVersion3 Int The required matching version of BT version3 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:06:41 "},"doc/IDOFunctionTable.html":{"url":"doc/IDOFunctionTable.html","title":"Function Table","keywords":"","body":"Menu Menu field description IDOFuncTableInterface Properties Type Description reminderAncs Bool Smart notification reminderSnapchat Bool Snapchat reminderLine Bool Line reminderOutlook Bool Outlook reminderTelegram Bool Telegram reminderViber Bool Viber reminderVkontakte Bool Vkontakte reminderChatwork Bool Chatwork; reminderSlack Bool Slack reminderTumblr Bool Tumblr reminderYahooMail Bool YahooMail reminderYahooPinterest Bool YahooPinterest reminderYoutube Bool Youtube reminderGmail Bool Gmail reminderKakaoTalk Bool KakaoTalk reminderOnlyGoogleGmail Bool Google gmail reminderOnlyOutlookEmail Bool Outlook email reminderOnlyYahooEmail Bool Yahoo email reminderTiktok Bool Tiktok reminderRedbus Bool Redbus reminderDailyhunt Bool Dailyhunt reminderHotstar Bool Hotstar reminderInshorts Bool Inshorts reminderPaytm Bool Paytm reminderAmazon Bool Amazon reminderFlipkart Bool Flipkart reminderNhnEmail Bool Nhn email reminderInstantEmail Bool Instant email reminderZohoEmail Bool Zoho email reminderExchangeEmail Bool Exchange email reminder189Email Bool 189 email reminderVeryFit Bool Very fit reminderGeneral Bool General reminderMattersRemind Bool Matters reminderMicrosoft Bool Microsoft reminderMissedCall Bool MissedCalls reminderGetAllContact Bool Support synchronization of all address books reminderWhatsappBusiness Bool WhatsappBusiness reminderEmail Bool Email Facebook reminder Bool Facebook reminderMessage Bool Message reminderQq Bool QQ reminderTwitter Bool Twitter reminderWeixin Bool Weixin reminderCalendarGoogle Bool Calendar (Google Calendar) reminderinstagram Bool Instagram reminderLinkedIn Bool linkedIn reminderMessengre Bool Messengre reminderSkype Bool Skype reminderCalendar Bool Calendar reminderWhatsapp Bool Whatsapp reminderAlarmClock Bool Alarm clock reminderSinaWeibo Bool Sina Weibo reminderCalling Bool Call reminder reminderCallContact Bool Caller Contact reminderCallNum Bool Caller number reminderPrime Bool Prime reminderNetflix Bool Netflix reminderGpay Bool Gpay reminderPhonpe Bool Phonpe reminderSwiggy Bool Swiggy reminderZomato Bool Zomato reminderMakemytrip Bool Makemytrip reminderJioTv Bool JioTv reminderNiosefit Bool Niosefit reminderYtmusic Bool YT music reminderUber Bool Uber reminderOla Bool Ola reminderGoogleMeet Bool Google meet reminderMormaiiSmartwatch Bool Mormaii Smartwatch reminderTechnosConnect Bool Technos connect reminderEnjoei Bool Enjoei reminderAliexpress Bool Aliexpress reminderShopee Bool Shopee reminderTeams Bool Teams reminder99Taxi Bool 99 taxi reminderUberEats Bool Uber eats reminderLfood Bool Lfood reminderRappi Bool Rappi reminderMercadoLivre Bool Mercado livre reminderMagalu Bool Magalu reminderAmericanas Bool Americanas reminderYahoo Bool Yahoo reminderMessageIcon Bool Message icon and name update sportWalk Bool v2 walk sportRun Bool v2 running sportByBike Bool v2 Cycling sportOnFoot Bool v2 Hiking sportSwim Bool v2 swimming sportMountainClimbing Bool v2 mountain climbing sportBadminton Bool v2 badminton sportOther Bool v2 Other sportFitness Bool v2 fitness sportSpinning Bool v2 spinning bike sportEllipsoid Bool v2 Ellipsoid sportTreadmill Bool v2 treadmill sportSitUp Bool v2 sit-ups sportPushUp Bool v2 push-ups sportDumbbell Bool v2 dumbbell sportWeightlifting Bool v2 weightlifting sportYoga Bool v2 yoga sportRopeSkipping Bool v2 skipping sportTableTennis Bool v2 table tennis sportBasketball Bool v2 Basketball sportFootballll Bool v2 football sportVolleyball Bool v2 volleyball sportTennis Bool v2 tennis sportGolf Bool v2 golf sportBaseball Bool v2 baseball sportSkiing Bool v2 Skiing sportRollerSkating Bool v2 Roller Skating sportDance Bool v2 dance sportStrengthTraining Bool v2 functional training sportCoreTraining Bool v2 core training sportTidyUpRelax Bool v2 Overall Relaxation sportTraditionalStrengthTraining Bool v2 traditional strength training sportOutdoorRun Bool v3 outdoor running sportIndoorRun Bool v3 indoor running sportOutdoorCycle Bool v3 Outdoor Cycling sportIndoorCycle Bool v3 indoor cycling sportOutdoorWalk Bool v3 outdoor walking sportIndoorWalk Bool v3 indoor walking sportPoolSwim Bool v3 Pool Swimming sportOpenWaterSwim Bool v3 Open Water Swimming sportElliptical Bool v3 Elliptical sportRower Bool v3 rowing machine sportHiit Bool v3 high-intensity interval training method sportCricket Bool v3 cricket sportPilates Bool v3 Pilates sportOutdoorFun Bool v3 outdoor play (customized kr01) sportOtherActivity Bool v3 other sports (customized kr01) sportZumba Bool v3 Zumba sportSurfing Bool v3 Surfing sportFootvolley Bool v3 football volleyball sportStandWaterSkiing Bool v3 Stand Water Skiing sportBattlingRope Bool v3 standing rope sportSkateboard Bool v3 skateboard sportNoticeStepper Bool v3 stepper sportShowNum Int Sports display number sportAerobicsBodybuildingExercise Bool Aerobics sportPullUp Bool Pull-ups sportHighBar Bool Horizontal Bar sportParallelBars Bool Parallel Bars sportTrailRunning Bool Trail running sportPickleBall Bool Pickleball getRealtimeData Bool Get real-time data getLangLibraryV3 Bool Get v3 language library getFindPhone Bool Find phone getFindDevice Bool Find device getUpHandGestureEx Bool Raise your wrist to brighten the screen data acquisition getUpHandGesture Bool Raise your wrist to light up the screen getWeather Bool Weather forecast getDownloadLanguage Bool Downloadable language getFactoryReset Bool Restore factory settings getFlashLog Bool Flash log getMultiActivityNoUseApp Bool Multi-sport cannot use app getMultiDial Bool MultiDial getMenuList Bool Get menu list getDoNotDisturbMain3 Bool Do Not Disturb getVoiceTransmission Bool Voice function setDrinkWaterAddNotifyFlag Bool Set drinking water switch notification type getDeviceLogState Bool Get the restart log error code and flag bit getNewWatchList Bool Supports interface for obtaining watch face list getNotifyIconAdaptive Bool Message reminder icon adaptive getPressureNotifyFlagMode Bool Pressure switch increaseNotification types and all-day stress mode settings getScientificSleep Bool Scientific sleep getSpo2NotifyFlag Bool Blood oxygen switch adds notification type getV3Log Bool v3 collection log getWatchID Bool Get watch face ID getDeviceName Bool Get device name getBatteryLog Bool Get battery log getBatteryInfo Bool Get battery information getHeatLog Bool Get overheat log getWalkReminderV3 Bool Get walk reminder v3 getSupportV3BleMusic Bool Get support for Bluetooth music v3 getSupportGetBleBeepV3 Bool Supports obtaining firmware local beep file information getVeryFitNotSupportPhotoWallpaperV3 Bool The BIT1 k6 project does not require a corresponding wallpaper dial. VeryFit supports them by default. Add a new unsupported menu and configure this if it is not necessary getSupportUpdateGps Bool Support upgrading gps firmware getUbloxModel Bool Support ublox module getSupportGetBleMusicInfoVerV3 Bool Supports obtaining firmware song name and folder command issuance and firmware reply using protocol version number 0x10 getBtVersion Bool Get the third-level version of firmware and the third-level version of BT getSportsTypeV3 Bool V3 sports type setting and acquisition getActivitySwitch Bool Supports motion mode recognition switch acquisition getNoticeIconInformation Bool Support dynamic message icon update getSetMaxItemsNum Bool Supports obtaining the maximum number of details that the firmware supports app distribution getNotifyMsgV3 Bool v3 message reminder getScreenBrightnessMain9 Bool Get screen brightness getNotice128byte Bool 128 byte notification getNotice250byte Bool 250 byte notification getDeletableMenuListV2 Bool Supports obtaining non-deletable shortcut application list getSupportPairEachConnect Bool Set support system pairing getSupportGetMainSportGoalV3 Bool Support getting sports goals getBtAddrV2 Bool Get bt Bluetooth MAC address getSupportBpSetOrMeasurementV2 Bool Blood pressure calibration and measurement getMenstrualAddNotifyFlagV3 Bool Menstrual cycle switch add notification type getSupportSetGetTimeGoalTypeV2 Bool Set to get the sports three-cycle target getOxygenDataSupportGradeV3 Bool Multi-sport synchronized data supports oxygen uptake grade data getSupportSyncActivityDataAltitudeInfo Bool Multi-sport data synchronization supports altitude data getBindCodeAuth Bool Bind authorization code getSpo2OffChangeV3 Bool V3 blood oxygen data offset offset by minutes getLevel5HrInterval Bool Level 5 heart rate zone getFiveHRInterval Bool 5 heart rate zones getBleAndBtVersion Bool Get the firmware level 3 version and BT level 3 version getSupportSetGetEmergencyContactV3 Bool Emergency Contact getSupportSetRepeatWeekTypeOnScheduleReminderV3 Bool Repeat reminder type to set the week repeat getSupportSetRepeatTypeOnScheduleReminderV3 Bool Repeat reminder type setting getSupportSetMenstrualReminderOnOff Bool Menstrual switch getVersionInfo Bool Version information getMtu Bool Get MTU getDeviceUpdateState Bool Get the upgrade status of the bracelet getHeartRateModeV2 Bool v2 gets heart rate monitoring mode getStepDataTypeV2 Bool The target step type is weekly target getFastMsgDataV3 Bool Fast message getSupportCallingQuickReply Bool Support quick reply getSupportDataTranGetNewErrorCodeV3 Bool New error code v3 getAutoActivityEndSwitchNotDisplay Bool The motion self-recognition end switch is not displayed, set the switch status getAutoActivityPauseSwitchNotDisplay Bool The motion self-recognition pause switch is not displayed, set the switch state getAutoActivitySwitchAddBicycle Bool Get the sports mode automatic recognition switch setting and add a new type of cycling getAutoActivitySwitchAddSmartRope Bool Get the sports mode automatic recognition switch setting and add a new type of smart skipping rope getAutoActivitySetGetUseNewStructExchange Bool Motion self-recognition get and set instructions use new version to interact with firmware getSupportSetGetNoReminderOnWalkReminderV2 Bool Supports walking reminder setting/getting reminder-free time period getSupportGetSnInfo Bool Supports obtaining sn information getScheduleReminderNotDisplayTitle Bool Schedule reminder does not display title getSupportV3LongCityName Bool City name getSupportAddNightLevelV2 Bool Brightness setting supports night brightness level setting getSupportDialFrameEncodeFormatArgb6666 Bool The firmware supports using the dial frame to use the argb6666 encoding format getSupportAppSendPhoneSystemInfo Bool The firmware supports the app to send mobile operating system information getDeviceControlFastModeAlone Bool Firmware management switches fast/slow mode, APP does not deliver the setting link parameters (fast and slow) getSupportOnekeyDoubleContact Bool The device supports one-click dual connection, which distinguishes whether the APP displays the guide page or directly issues the pairing instructions during pairing getSupportSetVoiceAssistantStatus Bool Voice assistant status getSupportFlashLogSize Bool Supports getting flash log size getSupportGetUnit Bool Support getting unit getSupportRyzeConnect Bool Notify support for Ryze Connect getSupportLoopsFit Bool Notify support for LOOPS FIT getSupportTasSmart Bool Notify support for TAS Smart getNotSupportSetOvulation Bool Women’s menstrual period does not support setting ovulation day reminders getSupportWalkGoalSteps Bool The firmware supports setting and obtaining the hourly goal steps getNotSupportDeleteAddSportSort Bool GTX03/05 customization, hamaAPP, after the menu is opened, the sports list does not support additions and deletions, but supports sorting getSupportSedentaryTensileHabitInfo Bool Supports sedentary reminder features in obtaining user habit information (management information) getSupportSendGpsLongitudeAndLatitude Bool Supports fast positioning of firmware, APP issues GPS permissions and latitude and longitude to firmware getSupportGetV3DeviceBtConnectPhoneModel Bool Phone model that supports device bt connection getSupportBloodPressureModelFileUpdate Bool Support blood pressure model file update setNoticeMessageStateUseVersion0x20 Bool Set the message application status to be delivered using version0x20 setScientificSleepSwitch Bool Scientific sleep switch setTemperatureSwitchHealth Bool Set night temperature switch setHeartRateMonitor Bool Heart rate monitoring setNoReminderOnDrinkReminder Bool Support drinking water reminder to set reminder-free time period setAgpsOffLine Bool The default is to support agps off upgrade setAgpsOnLine Bool The default is to support agps online upgrade setSetV3HeartInterval Bool Set the v3 heart rate interval setWeatherCity Bool Weather City setDoNotDisturb Bool Anti-disturb setCalorieGoal Bool Calorie goal setMenstruation Bool Female menstrual cycle setPressureData Bool Pressure data setSpo2Data Bool Blood oxygen data setSportModeSort Bool Sports mode sorting setActivitySwitch Bool Sports mode switch setNightAutoBrightness Bool Automatic brightness at night setScreenBrightness5Level Bool 5-level brightness adjustment setWalkReminder Bool Walk Reminder setScreenBrightness3Level Bool 3-level brightness adjustment. The default is level 5. The watch app displays it but the watch does not display it setHandWashReminder Bool Hand washing reminder setLocalDial Bool The app supports local dial changes and cloud dial image downloads setNotSupportHrHighAlarm Bool The firmware corresponding setting of high heart rate alarm does not work setNotSupportPhotoWallpaper Bool Add a new unsupported menu, configure this if not necessary setPressureHighReminder Bool High pressure reminder setWallpaperOnlyTimeColor Bool Wallpaper dial color setting setWallpaperDial Bool Wallpaper dial settings setSupportBreathRate Bool Breathing training setSupportCalorieUnit Bool Set the unit's added calorie setting setSupportSportPlan Bool Sports plan setSupportSwimPoolUnit Bool Set the unit to increase the unit setting of the pool setSupportV3Bp Bool v3 bp setV3GetSportSortField Bool Add menu compatibility setWatchDialSort Bool Dial sorting setGetCalorieDistanceGoal Bool Motion three-ring target acquisition setMidHighTimeGoal Bool Set the goal to increase the duration of mid-to-high exercise setNewRetainData Bool The firmware supports unbinding without clearing the data on the device setScheduleReminder Bool Schedule Reminder setSet100SportSort Bool 100 kinds of sports data sorting setSet20SportParamSort Bool 20 basic sports data sub-parameter sorting setSetMainUiSort Bool Main interface ui control arrangement setSetStressCalibration Bool Pressure calibration setSmartHeartRate Bool Support app to set smart heart rate setSpo2AllDayOnOff Bool Support app to set blood oxygen switch data throughout the day setSupportAppSendVoiceToBle Bool Support app to send compressed sbc language files to ble setSupportCyclingUnit Bool Set the unit setting for increasing the cycling unit setSupportWalkRunUnit Bool Set the unit to increase the unit setting for walking and running setWalkReminderTimeGoal Bool Set the target time in the walk reminder setWatchCapacitySizeDisplay Bool Support display of watch face capacity setWatchPhotoPositionMove Bool Supports wallpaper dial time position movement, control icon color modification, and control function selection setMenuListMain7 Bool Menu settings setHistoryMenstrual Bool v3 menstrual period historical data distribution setMenstrualAddPregnancy Bool v2 menstrual reminder setting to add fertile period and end time setNotSurportCalling3SDelay Bool realme wear customization requirements does not support the \"three-second delay\" switch for displaying incoming calls setSetFitnessGuidance Bool Supports issuing fitness guidance switch setSetNotificationStatus Bool Notification settings setSetUnreadAppReminder Bool Unread Reminder setSetV3Weather Bool Support V3 weather setSetV3WeatherSunrise Bool Support weather push to increase sunset and sunrise time setSetV3WorldTime Bool Support world time setting setSyncContact Bool Support contact synchronization setSyncV3ActivityAddParam Bool Synchronize V3 multi-sport to add new parameters setTransferMusicFile Bool Music name setting setWalkReminderAddNotify Bool Add notification type for walking reminder setSupportFahrenheit Bool Set the unit to support Fahrenheit setGetAlarmSpecify Bool Support v3 alarm clock setting to get the specified name alarm clock (KR01 customization) setAirohaGpsChip Bool Support airoha chip to collect GPS data function table setSupportSecondSportIcon Bool Support the second set of sports icon menu. Currently only supported by idw05 setSportMediumIcon Bool 100 medium-image menus required for sports setWeatherSunTime Bool Support weather push to increase sunset and sunrise time setWeatherAirGrade Bool Support V3 weather to issue air quality grade setDrinkWaterReminder Bool Support setting drinking water reminder setRespirationRate Bool Respiration rate switch setting setMaxBloodOxygen Bool Maximum oxygen uptake setBleControlMusic Bool ble controls music setMainPressure Bool v3 pressure menu setNoDisturbAllDayOnOff Bool Do not disturb mode setting to obtain the new all-day do not disturb switch and smart switch setOnlyNoDisturbAllDayOnOff Bool Support setting the all-day do not disturb switch setOnlyNoDisturbSmartOnOff Bool Support setting smart do not disturb switch setTimeZoneFloat Bool The time zone setting value is 100 times the actual time zone value setTemperatureSwitchSupport Bool Set temperature switch setMsgAllSwitch Bool Supports setting the main switch field for getting message applications setNotSupperCall3Delay Bool The display of the \"delay three seconds\" switch setting item on the incoming call reminder page is not supported setNoticeMissedCallV2 Bool Support rejected calls setOverFindPhone Bool End finding phone getHealthSwitchStateSupportV3 Bool Get all health monitoring switches setSedentariness Bool Sedentary reminder setScreenBrightness Bool Set screen brightness setSetPhoneVoice Bool Set the device music volume setSupportSetCallQuickReplyOnOff Bool Set the quick call reply switch setSupportExchangeSetGpsCoordinates Bool Supports sending GPS coordinates during multi-sport interaction setSupportV3WeatherAddAtmosphericPressure Bool Support v3 weather protocol to release atmospheric pressure setSupportSetV3WeatcherAddSnowDepth Bool Support v3 weather protocol to issue snow thickness setSupportSetV3WeatcherAddSnowfall Bool Support v3 weather protocol to send snowfall amount setSupportSetV3WeatcherSendStructVersion04 Bool Support v3 weather protocol to issue protocol version 0x4 setSendCalibrationThreshold Bool Support setting pressure calibration threshold languageCh Bool Chinese languageCzech Bool Czech languageEnglish Bool English languageFrench Bool French languageGerman Bool German languageItalian Bool Italian languageJapanese Bool Japanese languageSpanish Bool Spanish languageArabic Bool Arabic languageBurmese Bool Burmese languageFilipino Bool Filipino languageGreek Bool Greek languageThai Bool Thai languageTraditionalChinese Bool Traditional Chinese languageVietnamese Bool Vietnamese languageDutch Bool Dutch languageHungarian Bool Hungarian languageLithuanian Bool Lithuanian languagePolish Bool Polish languageRomanian Bool Romanian languageRussian Bool Russian languageSlovenian Bool Slovenian languageUkrainian Bool Ukrainian languageCroatian Bool Croatian languageDanish Bool Danish languageHindi Bool Hindi languageIndonesian Bool Indonesian languageKorean Bool Korean languagePortuguese Bool Portuguese languageSlovak Bool Slovak languageTurkish Bool Turkish languagePersia Bool Persian languageSweden Bool Swedish languageNorwegian Bool Norwegian languageFinland Bool Finnish languageBengali Bool Bengali languageKhmer Bool Khmer languageMalay Bool Malay languageBrazilianPortuguese Bool Brazilian Portuguese syncV3Hr Bool v3 heart rate syncV3Swim Bool v3 swimming syncV3Spo2 Bool v3 blood oxygen syncV3Pressure Bool v3 pressure syncV3Activity Bool v3 multi-sport syncV3Sleep Bool v3 sleep syncV3Sports Bool v3 steps syncV3Gps Bool v3 gps syncV3SyncAlarm Bool v3 alarm clock syncV3BodyPower Bool v3 body power getSupportHrvV3 Bool Synchronize hrv getSupportPerBpV3 Bool Synchronized blood pressure syncV3Noise Bool Synchronization noise syncV3Temperature Bool Synchronization temperature syncGps Bool gps syncV3ActivityExchangeData Bool v3 multi-sport synchronization data exchange syncHeartRate Bool Heart rate function syncHeartRateMonitor Bool Heart rate monitoring syncSleepMonitor Bool Sleep detection syncFastSync Bool Fast sync syncActivityTimeSync Bool Get time synchronization syncTimeLine Bool v2 sync timeline syncNeedV2 Bool Need V2 synchronization syncRealTimeV3 Bool v3 multi-sport synchronization supports real-time speed display syncExchangeDataReplyAddRealTimeSpeedPaceV3 Bool Data exchange adds real-time pace field syncHealthSyncV3ActivityEndTimeUseUtcMode Bool Multiple run end times use UTC mode syncSupportSetFastModeWhenSyncConfig Bool Turn on fast mode when supporting data synchronization alarmCount Int Number of alarm clocks alarmBrushTeeth Bool Brush Teeth alarmDating Bool Dating alarmDinner Bool Eat alarmMedicine Bool Take medicine alarmMeeting Bool Meeting alarmParty Bool Party alarmRest Bool Rest alarmSleep Bool sleep alarmSport Bool Exercise alarmWakeUp Bool Get up supportSetAntilost Bool Support setting anti-lost supportSetWeatherDataV2 Bool Support setting v2 weather data supportSetOnetouchCalling Bool Support setting one-touch calling alexaReminderAddSecV3 Bool alexa voice reminder adds the corresponding clock transmission field alexaSetEasyOperateV3 Bool alexa simple control command alexaSetGetAlexaAlarmV3 Bool alexa voice alarm clock get setting command use alexaSetJumpSportUiV3 Bool alexa set jump motion interface alexaSetJumpUiV3 Bool alexa set jump ui interface alexaSetSetOnOffTypeV3 Bool alexa app setting switch command alexaSetWeatherV3 Bool alexa voice supports setting weather alexaTimeNewV3 Bool alexa supports setting multiple timers setAlexaControll100brightness Bool Alexa 100-level brightness control alexaGetSupportGetAlexaDefaultLanguage Bool alexa Get alexa defaultRecognize language alexaGetUIControllSports Bool alexa jump sports interface supports 100 sports type fields Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:09:38 "},"doc/IDODeviceLog.html":{"url":"doc/IDODeviceLog.html","title":"Device Log","keywords":"","body":"Device log function Functional Overview Get device flash, battery, overheating and other logs DeviceLogInterface Attributes getLogIng Is the log being obtained? logDirPath Get all log directory addresses (return: /xx/../ido_sdk/devices/{macAddress}/device_logs) method startGet(types:timeOut:progress:completion:) Start getting logs Parameters: types: log type collection timeOut: timeout for getting logs progress: log acquisition progress (0-100) completion: log acquisition completion callback cancel(completion:) Cancel fetching logs Parameters: completion: completion callback Example Swift sdk.deviceLog.startGet(types: [.general], timeOut: 60) { progress in //Get flash log progress } completion: { success in //Get completed if (success) { //success Get logs through logDirPath }else { //fail } } Kotlin sdk.deviceLog.startGet(mutableListOf(), 60, { progress -> //Get flash log progress }) { success -> //Get completed if (success) { //success Get logs through logDirPath } else { //fail } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:06:59 "},"doc/IDOTools.html":{"url":"doc/IDOTools.html","title":"Tool Method ","keywords":"","body":"Utility methods ToolsInterface method png2Bmp(inPath:outPath:format:completion:) Image conversion format png->bmp Parameters: inPath: png path used for conversion (including file name and suffix) outPath: converted bmp path (including file name and suffix) format: Convert to bmp file format compressToPNG(inputFilePath:outputFilePath:completion:) Compressed png image quality Parameters: inputFilePath: input file path outputFilePath: output file path makeEpoFile(dirPath:epoFilePath:completion:) Create EPO.DAT file Parameters: dirPath: The directory where the epo file is to be created epoFilePath: The storage path of the created epo file gpsInitType(motionTypeIn:completion:) After gps movement, the trajectory is optimized and the speed threshold is initialized according to the movement type. If other movement types are entered, there will be no movement trajectory. Parameters: motionTypeIn: motion type Outdoor walking = 52, walking = 1, hiking = 4, exercise type set to 0 Outdoor running = 48, running = 2, sports type set to 1 Outdoor riding = 50, cycling = 3, and sportiness set to 2 completion: gpsAlgProcessRealtime(json:completion:) The entrance to real-time processing of gps data requires judgment on the output data. If the latitude is -180, it is an error value and should not be output. Parameters: json: { lon, longitude, data type double lat, latitude, data type double timestamp, timestamp, data type int accuracy, positioning accuracy, data type double gpsaccuracystatus, positioning level, 0 = unknown positioning, 1 = good positioning, 2 = poor positioning, data type int } completion: gpsSmoothData(json:completion:) smooth data Parameters: json: {lat, latitude array, length len, data type double lon, longitude array, length len, data type double len, data length} completion: the result is saved in the arrays lat and lon logPath(completion:) Get log root path currentDevicePath(completion:) Get the current device cache root path exportLog(completion:) Export log Returns the absolute path of the compressed log zip file lastConnectDevice(completion:) Get the last connected device (json) loadDeviceExtListByDisk(sortDesc:completion:) Get the list of connected devices (List[json]) Example Swift: sdk.tool.compressToPNG(inputFilePath: \"i.png\", outputFilePath: \"o.png\") { rs in // Compression success or failure } Kotlin: sdk.tool.compressToPNG(\"i.png\", \"o.png\") { // Compression success or failure } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:11:10 "},"doc/IDOCallNotice.html":{"url":"doc/IDOCallNotice.html","title":"Incoming call/message reminder","keywords":"","body":"Incoming call/message reminder Device call reminder, message reminder method setV2CallEvt(contactText:phoneNumber:completion:) v2 sends incoming call reminder as well as the incoming call phone number and incoming call contact (implemented by some devices) Parameters: contactText: contact name phoneNumber: number Returns: Success or not setV2NoticeEvt(type:contactText:phoneNumber:dataText:completion:) v2 sends information reminders and information content (implemented by some devices) Parameters: type: information type contactText: notification content phoneNumber: number dataText: message content Returns: Success or not stopV2CallEvt(completion:) v2 sends an incoming call reminder status as the call has been answered, telling the device to stop reminding the user (implemented by some devices) Returns: Success or not missedV2MissedCallEvt(completion:) v2 sends an incoming call reminder status as call rejected, telling the device to stop reminding the user (implemented by some devices) Returns: Success or not Example Swift: //Send incoming call reminder along with incoming phone number and incoming call contact sdk.cmd.setV2CallEvt(contactText: \"xx\", phoneNumber: \"33333\") { rs in if (rs) { // success } else { // fail } } // Notify the phone to hang up sdk.cmd.stopV2CallEvt { rs in } Kotlin: //Send incoming call reminder along with incoming phone number and incoming call contact sdk.cmd.setV2CallEvt(\"xxx\", \"3333\") { if (it) { // success }else { // fail } } // Notify the phone to hang up sdk.cmd.stopV2CallEvt { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:05:36 "},"doc/logicDescription/quickMsgReplyList.html":{"url":"doc/logicDescription/quickMsgReplyList.html","title":"Quick message reply process (Android)","keywords":"","body":"Quick message reply process (Android) Step 1 app sets the default quick message reply list Cmds.setDefaultQuickMsgReplyList(param).send val param = IDOFastMsgSettingModel(0, listOf( IDOFastMsgItem(1, \"test1\"), IDOFastMsgItem(2, \"test2\"), IDOFastMsgItem(3, \"test3\"), IDOFastMsgItem(4, \"test4\"), MsgItem( 5, \"test5\") )) Cmds.setDefaultQuickMsgReplyList(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { / / Failed } } Step 2 Send message notification to the device Cmds.setNoticeAppName(param).send // Note that when the field msgID is greater than 0, quick reply is supported val param = IDONoticeMesaageParamModel( 1, 1, 19, 1, 7, \"ido\", \"ido_demo\", \"ido_demo\", listOf( IDONoticeMesaageParamItem( 1, \"china\" ) ) ) Cmds.setNoticeAppName(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Step 3 The watch receives a message notification, view the message details in the watch and click Quick Reply. The app receives the following notification, and the app replies to the processing result according to the notification. Watch IDODeviceNotificationModel override fun listenDeviceNotification(status: IDODeviceNotificationModel) { println(\"listenDeviceNotification $status\"); // Quick SMS reply if (status.controlEvt == 580 && status.controlJson != null) { println(\"status.controlJson: ${status.controlJson}\") // 1 means quick reply to incoming calls if (msgItem.msgType == 1) { // TODO: Here the android system is called to send a quick reply to the third app and the reply result is obtained // val isSuccess = if (reply result) 1 else 0 var param = IDOFastMsgUpdateParamModel(1,msgItem. msgID, msgItem.msgType, msgItem.msgNotice) Cmds.setFastMsgUpdate(param).send { println(\"setFastMsgUpdate ${it.res?.toJsonString()}\") } }else{ // Third-party message // TODO: Here the android system is called to send a quick reply to the third app and the reply result is obtained // val isSuccess = if (reply result) 1 else 0 var param = IDOFastMsgUpdateParamModel(1,msgItem.msgID, msgItem .msgType, msgItem.msgNotice) Cmds.setFastMsgUpdate(param).send { println(\"setFastMsgUpdate ${it.res?.toJsonString()}\") } } } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 11:36:04 "},"doc/dataExchange/IDODataExchange.html":{"url":"doc/dataExchange/IDODataExchange.html","title":"Data exchange","keywords":"","body":"Data exchange function Function overview When you initiate exercise in the App, the bracelet will calculate the heart rate and calories from the exercise data generated by the App and return it to the App for data exchange; When the bracelet initiates exercise, the movement generated by the bracelet The data is sent to the App regularly and sports data is displayed in real time. Exchanging data uses time as the only reference. The exchange process needs to judge the current activity data based on the movement start time. If the time does not correspond, the data cannot be exchanged. ExchangeDataInterface Properties supportV3ActivityExchange Get whether v3 motion data exchange is supported status Exchange data status Method appExec(type:) app executes data exchange Parameters: type: app executes data exchange entity IDOAppExecType appReplyExec(type:) ble initiates movement ble executes data exchange app reply Parameters: type: app reply data entity IDOAppReplyType getLastActivityData( ) The last data acquisition of multi-sport data Parameters: completion: command execution callback code: error code 0 is successful, non-0 is unsuccessful model: multi-sport data entity IDOAppActivityDataV3ExchangeModel getActivityHrData(completion:) Get one minute of heart rate data for multiple exercises Parameters: completion: command execution callback code: error code 0 is successful, non-0 is unsuccessful model: Heart rate data entity IDOAppHrDataExchangeModel IDOExchangeDataDelegate Method appListenBleExec (completion:) ble initiates movement app to monitor ble Parameters: completion: command execution callback type: listen to ble execution data entity IDOBleExecType appListenAppExec(completion:) app execution response Parameters: I -COMPLETION: Command execution -Type: Surveillance app executes BLE response entity : CompleTion : Command execution callback type: Monitor v2 data exchange entity IDOExchangeV2Model exchangeV3Data(completion:) Exchange v3 data Parameters: completion: Command execution callback type: Listen v3 data exchange entity IDOExchangeV3Model Example Swift: //pause exercise let model = IDOAppPauseExchangeModel(baseModel: baseModel) sdk.dataExchange.appExec(model: model) //end exercise let model = IDOAppBleEndReplyExchangeModel(code: 0, duration: duration, calories: calories, distance: distance, baseModel: baseModel) sdk.dataExchange.appReplyExec(type: .appBleEndReply(model)) let lastData = sdk.dataExchange.getLastActivityData() if sdk.dataExchange.supportV3ActivityExchange { sdk.dataExchange.getActivityHrData() } sdk.dataExchange.addExchange(IDOExchangeDataDelegateImpl()) class IDOExchangeDataDelegateImpl: IDOExchangeDataOCDelegate { func appListenBleExec(model: NSObject) { if (model is IDOBleStartExchangeModel) { let obj = model as? IDOBleStartExchangeModel let sendModel = IDOBleStartReplyExchangeModel(baseModel: obj?.baseModel, operate: obj?.operate, retCode: 0) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOBleIngExchangeModel) { let obj = model as? IDOBleIngExchangeModel let sendModel = IDOBleIngReplyExchangeModel(baseModel: obj?.baseModel, distance: obj?.distance) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOBleEndExchangeModel) { let obj = model as? IDOBleEndExchangeModel let sendModel = IDOBleEndReplyExchangeModel(baseModel: obj?.baseModel, retCode: 0) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOBlePauseExchangeModel) { let obj = model as? IDOBlePauseExchangeModel let sendModel = IDOBlePauseReplyExchangeModel(baseModel: obj?.baseModel, retCode: 0) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOBleRestoreExchangeModel) { let obj = model as? IDOBleRestoreExchangeModel let sendModel = IDOBleRestoreReplyExchangeModel(baseModel: obj?.baseModel, retCode: 0) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOAppBlePauseExchangeModel) { let obj = model as? IDOAppBlePauseExchangeModel let sendModel = IDOAppBlePauseReplyExchangeModel(baseModel: obj?.baseModel, errCode: 0) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOAppBleRestoreExchangeModel) { let obj = model as? IDOAppBleRestoreExchangeModel let sendModel = IDOBleRestoreReplyExchangeModel(baseModel: obj?.baseModel, retCode: 0) sdk.dataExchange.appReplyExec(model: sendModel) } else if (model is IDOAppBleEndExchangeModel) { let obj = model as? IDOAppBleEndExchangeModel let sendModel = IDOAppBleEndReplyExchangeModel(baseModel: baseModel, errCode: 0, duration: obj?.duration, calories: obj?.calories, distance: obj?.distance) sdk.dataExchange.appReplyExec(model: sendModel) } } func appListenAppExec(model: NSObject) { if (model is IDOAppStartReplyExchangeModel) { let obj = model as? IDOAppStartReplyExchangeModel print(\"sport started now : \\(String(describing: obj))\") //* - 0: Success; 1: The device has entered sports mode and failed; //* - 2: Failed due to low device power; 3: The bracelet is charging //* - 4: Using Alexa 5: Calling guard obj?.retCode == 0 else { textConsole.text = \"sport failed to launch, because of \\(String(describing: obj?.retCode))\" return } textConsole.text = \"sport launched successfully\" disposeTimer = DisposeBag() Observable.interval(.seconds(Constant.intervalExchangeData), scheduler: MainScheduler.instance) .subscribe(onNext: { [weak self] value in self?.exchangeData() }) .disposed(by: disposeTimer) Observable.interval(.seconds(Constant.intervalExchangeCompleteData), scheduler: MainScheduler.instance) .subscribe(onNext: { [weak self] value in self?.exchangeCompleteData() }) .disposed(by: disposeTimer) Observable.interval(.seconds(Constant.intervalExchangeHrData), scheduler: MainScheduler.instance) .subscribe(onNext: { [weak self] value in self?.exchangeV3HrData() }) .disposed(by: disposeTimer) } else if (model is IDOAppEndReplyExchangeModel) { let obj = model as? IDOAppEndReplyExchangeModel print(\"reply for app's end reply: \\(String(describing: obj))\") } else if (model is IDOAppIngReplyExchangeModel) { let obj = model as? IDOAppIngReplyExchangeModel print(\"data of sport from device: \\(String(describing: obj))\") } else if (model is IDOAppPauseReplyExchangeModel) { let obj = model as? IDOAppPauseReplyExchangeModel print(\"reply for app's pause cmd: \\(String(describing: obj))\") } else if (model is IDOAppRestoreReplyExchangeModel) { let obj = model as? IDOAppRestoreReplyExchangeModel print(\"reply for app's restore cmd: \\(String(describing: obj))\") } else if (model is IDOAppIngV3ReplyExchangeModel) { let obj = model as? IDOAppIngV3ReplyExchangeModel print(\"v3 data of sport from device: \\(String(describing: obj))\") } else if (model is IDOAppOperatePlanReplyExchangeModel) { let obj = model as? IDOAppOperatePlanReplyExchangeModel print(\"reply for app's operate plan cmd: \\(String(describing: obj))\") } else if (model is IDOAppActivityDataV3ExchangeModel) { let obj = model as? IDOAppActivityDataV3ExchangeModel print(\"appActivityDataReply: ${type.model}\") duration = max(duration, obj?.durations ?? 0) calories = max(calories, obj?.calories ?? 0) distance = max(distance, obj?.distance ?? 0) } else if (model is IDOAppHrDataExchangeModel) { let obj = model as? IDOAppHrDataExchangeModel print(\"appActivityHrReply: \\(String(describing: obj))\") } else if (model is IDOAppGpsDataExchangeModel) { let obj = model as? IDOAppGpsDataExchangeModel print(\"appActivityGpsReply: \\(String(describing: obj))\") } } func exchangeV2Data(model: IDOExchangeV2Model) { } func exchangeV3Data(model: IDOExchangeV3Model) { } } //pause exercise val model = IDOAppPauseExchangeModel(baseModel) sdk.dataExchange.appExec(IDOAppExecType.appPause(model)) //end exercise val model = IDOAppBleEndReplyExchangeModel(0, duration, calories, distance, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.appBleEndReply(model)) sdk.dataExchange.getLastActivityData() if (sdk.dataExchange.supportV3ActivityExchange) { sdk.dataExchange.getActivityHrData() } sdk.dataExchange.addExchange(object : IDOExchangeDataDelegate { override fun appListenBleExec(type: IDOBleExecType) { when (type) { is IDOBleExecType.appBleEnd -> { //The movement initiated by app is initiated and ended by ble log(\"appBleEnd: ${type.model}\") mHandler.removeCallbacksAndMessages(null) val model = IDOAppBleEndReplyExchangeModel(0, duration, calories, distance, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.appBleEndReply(model)) } is IDOBleExecType.appBlePause -> { //App-initiated movement ble initiates pause log(\"appBlePause: ${type.model}\") val model = IDOAppBlePauseReplyExchangeModel(0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.appBlePauseReply(model)) } is IDOBleExecType.appBleRestore -> { //App-initiated movement ble initiates recovery log(\"appBleRestore: ${type.model}\") val model = IDOAppBleRestoreReplyExchangeModel(0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.appBleRestoreReply(model)) } //The movement initiated by app is initiated and ended by ble is IDOBleExecType.bleEnd -> { log(\"bleEnd: ${type.model}\") val model = IDOBleEndReplyExchangeModel(0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.bleEndReply(model)) } is IDOBleExecType.bleIng -> { //motion initiated by ble ble initiated exchange log(\"bleIng: ${type.model}\") val model = IDOBleIngReplyExchangeModel(0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.bleIngReply(model)) } is IDOBleExecType.bleOperatePlan -> { //BLE switching action log(\"bleOperatePlan: ${type.model}\") } is IDOBleExecType.blePause -> { //motion initiated by ble ble initiates pause log(\"blePause: ${type.model}\") val model = IDOBlePauseReplyExchangeModel(0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.blePauseReply(model)) } is IDOBleExecType.bleRestore -> { //motion initiated by ble ble initiates recovery log(\"bleRestore: ${type.model}\") val model = IDOBleRestoreReplyExchangeModel(0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.bleRestoreReply(model)) } is IDOBleExecType.bleStart -> { //The movement initiated by ble starts when initiated by ble log(\"bleStart: ${type.model}\") val model = IDOBleStartReplyExchangeModel(type.model.operate, 0, baseModel) sdk.dataExchange.appReplyExec(IDOAppReplyType.bleStartReply(model)) } } } override fun appListenAppExec(type: IDOBleReplyType) { when (type) { is IDOBleReplyType.appEndReply -> { //app initiates and ends ble reply log(\"reply for app's end reply: ${type.model}\") mHandler.removeCallbacksAndMessages(null) } is IDOBleReplyType.appIngReply -> { //app initiates exchange ble reply log(\"data of sport from device: ${type.model}\") } is IDOBleReplyType.appIngV3Reply -> { //app initiates exchange v3 reply log(\"v3 data of sport from device: ${type.model}\") } is IDOBleReplyType.appOperatePlanReply -> { log(\"reply for app's operate plan cmd: ${type.model}\") } is IDOBleReplyType.appPauseReply -> { // app initiates pause ble reply log(\"reply for app's pause cmd: ${type.model}\") } is IDOBleReplyType.appRestoreReply -> { //APP initiates recovery log(\"reply for app's restore cmd: ${type.model}\") } is IDOBleReplyType.appStartReply -> { //app initiates start ble reply log(\"sport started now : ${type.model}\") if (type.model?.retCode != 0) { //* - 0: Success; 1: The device has entered sports mode and failed; //* - 2: Failed due to low device power; 3: The bracelet is charging //* - 4: Using Alexa 5: Calling tv_response.text = \"sport failed to launch, because of ${type.model?.retCode}\" return } tv_response.text = \"sport launched successfully\" mHandler.postDelayed(object : Runnable { override fun run() { mHandler.postDelayed(this, INTERVAL_EXCHANGE_DATA) exchangeData() } }, INTERVAL_EXCHANGE_DATA) mHandler.postDelayed(object : Runnable { override fun run() { mHandler.postDelayed(this, INTERVAL_EXCHANGE_COMPLETE_DATA) exchangeCompleteData() } }, INTERVAL_EXCHANGE_COMPLETE_DATA) mHandler.postDelayed(object : Runnable { override fun run() { mHandler.postDelayed(this, INTERVAL_EXCHANGE_COMPLETE_DATA) exchangeV3HrData() } }, INTERVAL_EXCHANGE_HR_DATA) } is IDOBleReplyType.appActivityDataReply -> { //result for exchangeCompleteData val model = type.model log(\"appActivityDataReply: ${type.model}\") duration = max(duration, model?.durations ?: 0) calories = max(calories, model?.calories ?: 0) distance = max(distance, model?.distance?: 0) } is IDOBleReplyType.appActivityGpsReply -> { log(\"appActivityGpsReply: ${type.model}\") } is IDOBleReplyType.appActivityHrReply -> { log(\"appActivityHrReply: ${type.model}\") } } } override fun exchangeV2Data(model: IDOExchangeV2Model) { // log(\"exchangeV2Data: ${GsonUtil.toJson(model)}\") } override fun exchangeV3Data(model: IDOExchangeV3Model) { // log(\"exchangeV3Data: ${GsonUtil.toJson(model)}\") } }) override fun appListenAppExec(type: IDOBleReplyType) { when (type) { is IDOBleReplyType.appEndReply -> { //app initiates and ends ble reply log(\"reply for app's end reply: ${type.model}\") mHandler.removeCallbacksAndMessages(null) } is IDOBleReplyType.appIngReply -> { //app initiates exchange ble reply log(\"data of sport from device: ${type.model}\") } is IDOBleReplyType.appIngV3Reply -> { //app initiates exchange v3 reply log(\"v3 data of sport from device: ${type.model}\") } is IDOBleReplyType.appOperatePlanReply -> { log(\"reply for app's operate plan cmd: ${type.model}\") } is IDOBleReplyType.appPauseReply -> { // app initiates pause ble reply log(\"reply for app's pause cmd: ${type.model}\") } is IDOBleReplyType.appRestoreReply -> { //APP initiates recovery log(\"reply for app's restore cmd: ${type.model}\") } is IDOBleReplyType.appStartReply -> { //app initiates start ble reply log(\"sport started now : ${type.model}\") if (type.model?.retCode != 0) { //* - 0: Success; 1: The device has entered sports mode and failed; //* - 2: Failed due to low device power; 3: The bracelet is charging //* - 4: Using Alexa 5: Calling tv_response.text = \"sport failed to launch, because of ${type.model?.retCode}\" return } tv_response.text = \"sport launched successfully\" mHandler.postDelayed(object : Runnable { override fun run() { mHandler.postDelayed(this, INTERVAL_EXCHANGE_DATA) exchangeData() } }, INTERVAL_EXCHANGE_DATA) mHandler.postDelayed(object : Runnable { override fun run() { mHandler.postDelayed(this, INTERVAL_EXCHANGE_COMPLETE_DATA) exchangeCompleteData() } }, INTERVAL_EXCHANGE_COMPLETE_DATA) mHandler.postDelayed(object : Runnable { override fun run() { mHandler.postDelayed(this, INTERVAL_EXCHANGE_COMPLETE_DATA) exchangeV3HrData() } }, INTERVAL_EXCHANGE_HR_DATA) } is IDOBleReplyType.appActivityDataReply -> { //result for exchangeCompleteData val model = type.model log(\"appActivityDataReply: ${type.model}\") duration = max(duration, model?.durations ?: 0) calories = max(calories, model?.calories ?: 0) distance = max(distance, model?.distance?: 0) } is IDOBleReplyType.appActivityGpsReply -> { log(\"appActivityGpsReply: ${type.model}\") } is IDOBleReplyType.appActivityHrReply -> { log(\"appActivityHrReply: ${type.model}\") } } } override fun exchangeV2Data(model: IDOExchangeV2Model) { log(\"exchangeV2Data: ${GsonUtil.toJson(model)}\") } override fun exchangeV3Data(model: IDOExchangeV3Model) { log(\"exchangeV3Data: ${GsonUtil.toJson(model)}\") } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOAppActivityDataV3ExchangeModel.html":{"url":"doc/dataExchange/IDOAppActivityDataV3ExchangeModel.html","title":"Multiple sports summary data entity","keywords":"","body":"Multiple motion summary data entities IDOExchangeBaseModel Parameters Description Type day date int hour hour int minute minute int second second int sportType sport type int IDOAppActivityDataV3ExchangeModel Parameters Description Type year year int month month int version protocol version number int hrInterval Heart rate interval unit minutes int step number of steps int durations duration int calories calories int distance Heart rate duration of fat burning in minutes int aerobicMins Duration of aerobic exercise in minutes int limitMins Duration of extreme exercise in minutes int warmUp warm-up int fatBurning fat burning int aerobicExercise aerobic training int anaerobicExercise anaerobic training int extremeExercise The cumulative duration of exercise in seconds int fatBurningTime The cumulative duration of fat burning in seconds int aerobicExerciseTime The cumulative duration of aerobic exercise in seconds int anaerobicExerciseTime The cumulative duration of anaerobic exercise Duration in seconds int extremeExerciseTime The cumulative duration of extreme exercise in seconds int avgSpeed ​​ The average speed in km/h int maxSpeed ​​ The fastest speed in km/h int avgStepStride The average stride int maxStepStride Maximum stride int kmSpeed ​​ Average kilometer pace int fastKmSpeed ​​ Fastest kilometer pace int maxStepFrequency Maximum step frequency int avgHrValue Average heart rate int maxHrValue Maximum heart rate int recoverTime Recovery time in hours After the app receives the data, It needs to decrease by 1 every hour int vo2max Maximum oxygen uptake unit ml/kg/min int trainingEffect Training effect range: 1.0 - 5.0 (expand transmission 10 times) int grade VO2 level 1: Low 2: Amateur 3: Average 4: Average 5: Good 6: Excellent 7: Professional int stepsFrequencyCount Number of cadence details int miSpeedCount The maximum number of mile pace is 100 int realSpeedCount The number of real-time speed int paceSpeedCount The number of real-time pace int kmSpeedCount Kilometer pace details The maximum number is 100 int actionDataCount The number of this action training int kmSpeeds Speed ​​collection of seconds per kilometer array stepsFrequency Cadence collection unit steps/minute array itemsMiSpeed ​​ mile pace array array itemRealSpeed ​​ real-time speed array unit km/h array paceSpeedItems real-time pace array array actionData Action completion content type: action type 1 fast walking; 2 jogging; 3 medium speed running; 4 fast running heart_con_value: heart rate control for each action time: action completion time unit seconds goal_time: Action goal time array baseModel Basic data date, time, sports type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOAppExecType.html":{"url":"doc/dataExchange/IDOAppExecType.html","title":"APP execution data exchange entity","keywords":"","body":"APP execution data exchange entity IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOAppStartExchangeModel Parameters Description Type Remarks targetType target type int targetValue target value int forceStart whether to force start 0: not forced, 1: forced int vo2max maximum oxygen uptake unit ml/kg/min int recoverTime recovery Duration: unit hour int avgWeekActivityTime average weekly exercise time last month in minutes int baseModel basic data date, time, exercise type IDOExchangeBaseModel IDOAppEndExchangeModel Parameters Description Type Remarks duration duration (unit: s) int calories calories, unit kcal int distance distance (unit: meters) int isSave 0: do not save, 1: save int baseModel basic data date, time, motion type IDOExchangeBaseModel IDOAppIngExchangeModel Parameters Description Type Remarks duration duration (unit: s) int calories calories, unit kcal int distance distance (unit: meters) int status 0: All valid, 1: Invalid distance, 2: GPS signal is weak int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppPauseExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppRestoreExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppIngV3ExchangeModel Parameters Description Type Remarks version protocol version number int default 0 signal 0: indicates weak signal 2: indicates strong signal int distance distance (unit: meters) int speed app calculation Display real-time pace, unit km/h, 100 times int duration duration int calories calories int baseModel basic data date, time, exercise type IDOExchangeBaseModel IDOAppOperatePlanExchangeModel Parameters Description Type Remarks operate 1: Start exercise, 2: Pause exercise, 3: Resume exercise, 4: End exercise, 5 : Switch action int trainingOffset Training course date offset starts from 0 int planType Plan type: 1: Running plan 3km, 2: Running plan 5km, 3 : Running plan 10km, 4: Half marathon training5: Marathon training (second phase) int baseModel Basic data date, time, exercise type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOAppHrDataExchangeModel.html":{"url":"doc/dataExchange/IDOAppHrDataExchangeModel.html","title":"Multiple sports heart rate Data Entity","keywords":"","body":"Multi-sport heart rate data entity IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOAppHrDataExchangeModel Parameters Description Type Remarks version Protocol version number int heartRateHistoryLen The maximum length of the heart rate data array is 60 int interval Heart rate interval unit seconds int heartRates The heart rate data array stores one minute of heart rate data, one per second array baseModel Basic data date, time, motion type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOAppReplyType.html":{"url":"doc/dataExchange/IDOAppReplyType.html","title":"Ble Execution Data Exchange Entity","keywords":"","body":"Ble execution data exchange entity IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOBleStartReplyExchangeModel Parameters Description Type Remarks operate 1: Request app to open GPS 2: Initiate exercise request int retCode 0: Success, not 0: Failure int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleIngReplyExchangeModel Parameters Description Type Remarks distance Distance unit: 0.01km int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleEndReplyExchangeModel Parameters Description Type Remarks retCode 0: success, non-0: failure int baseModel basic data date , time, motion type IDOExchangeBaseModel IDOBlePauseReplyExchangeModel Parameters Description Type Remarks retCode 0: Success is not 0: Failure int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleRestoreReplyExchangeModel Parameters Description Type Remarks retCode 0: Success, non-0: Failure int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleOperatePlanReplyExchangeModel Parameters Description Type Remarks operate 1: Start exercise, 2: Pause exercise, 3: Resume exercise,4: End exercise, 5: Switch action int planType Plan type- 1: Running plan 3km, 2: Running plan 5km,- 3: Running plan 10km, 4: Half marathon training- 5: Marathon training (second phase) int actionType Action type - 1: Brisk walking; 2: Jogging; 3: Medium speed running; 4: Fast running - 5: End the course exercise (but also wait for the user to have free movement) - 6: Free movement after the course (this field works when operate is 5) int errorCode 0 is success, non-0 is failure int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppBlePauseReplyExchangeModel Parameters Description Type Remarks errCode 0: Success; 1: Failure without entering sports mode int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppBleRestoreReplyExchangeModel Parameters Description Type Remarks errCode 0: Success; 1: Failure without entering motion mode int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppBleEndReplyExchangeModel Parameters Description Type Remarks errCode 0: Success; 1: Failure without entering sports mode int duration Continuous Duration unit s int calories Calorie unit kcal int distance Distance unit 0.01km int baseModel Basic data date, time, exercise type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOBleExecType.html":{"url":"doc/dataExchange/IDOBleExecType.html","title":"App Monitoring Ble Data Entity","keywords":"","body":"App monitors Ble data entities IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOBleStartExchangeModel Parameters Description Type Remarks operate 1: Request app to open GPS 2: Initiate exercise request int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleIngExchangeModel Parameters Description Type Remarks distance Distance unit: 0.01km int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleEndExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBlePauseExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOBleRestoreExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppBlePauseExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppBleRestoreExchangeModel Parameters Description Type Remarks baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppBleEndExchangeModel Parameters Description Type Remarks duration duration unit s int calories calorie unit kcal int distance distance unit 0.01 km int avgHr average heart rate int maxHr maximum heart rate int burnFatMins fat burning duration in minutes int aerobicMins cardiopulmonary exercise duration in minutes int limitMins Extreme exercise duration in minutes int isSave 0: Do not save, 1: Save int baseModel Basic data date, time, exercise type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOBleReplyType.html":{"url":"doc/dataExchange/IDOBleReplyType.html","title":"App Execution Ble Response Entity","keywords":"","body":"App executes Ble response entity IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOAppStartReplyExchangeModel Parameters Description Type Remarks retCode Response status- 0: Success; 1: The device has entered sports mode and failed; - 2: The device has low power and failed; 3: The bracelet is charging- 4 : Using Alexa 5: Calling int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppEndReplyExchangeModel Parameters Description Type Remarks errorCode 0: success; 1: device end failure int calories calories, unit kcal int distance distance distance (unit: meters) int step number of steps (unit: step) int avgHr average heart rate int maxHr maximum heart rate int burnFatMins fat burning Duration in minutes int aerobicMins Cardiopulmonary exercise duration in minutes int limitMins Extreme exercise duration in minutes int baseModel Basic data date, time, exercise type IDOExchangeBaseModel IDOAppIngReplyExchangeModel Parameters Description Type Remarks calories calories, Unit kcal int distance distance (unit: meters) int status 0: all valid, 1: distance invalid, 2: GPS signal is weak int step number of steps (unit: step) int currentHr current heart rate int interval heart rate interval unit s int hrSerial serial number int hrJson heart rate value data List baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppPauseReplyExchangeModel Parameters Description Type Remarks errCode Pause error code 0: success, non-0: failure int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppRestoreReplyExchangeModel Parameters Description Type Remarks errCode Pause error code 0: success, not 0: failure int baseModel Basic data date, time, motion type IDOExchangeBaseModel IDOAppIngV3ReplyExchangeModel Parameters Description Type Remarks version Pause error code 0: success, not 0: failure int heartRate heart rate data int distance distance int unit displayed according to unit setting duration duration in seconds int realTimeCalories dynamic calories int realTimeSpeed ​​ real-time speed, unit km/h, expanded by 100 times int kmSpeed ​​ real-time kilometer pace unit s/km int steps number of steps int swimPosture main swimming posture int status status int -0: Invalid 1: Start 2: Manual pause 3: End 4: Automatically pause for 5 seconds using sliding average Use 1-5 seconds of data for the 5th second, use 2-6 seconds of data for the 6th second realTimeSpeedPace real-time pace, unit seconds int trainingEffect aerobic training effect level int range 0-50 10x transmission expansion anaerobicTrainingEffect anaerobic training effect level int range 0 -50 Expand transmission 10 times actionType Action type1 Brisk walking2 Jogging3 Medium speed running4 Fast running5 End of course exercise6 Free exercise after the end of the course When,This field is the exercise countdown time(Note: time decreases)action_type = 6,This field is the time after the course ends(Note: Time increases) countMinute Movement accumulated time minutes int Same as above countSecond Movement accumulated time in seconds int Same as above baseModel Basic data date, time, movement type IDOExchangeBaseModel IDOAppOperatePlanReplyExchangeModel Parameters Description Type Remarks planType Plan type1: Running plan 3km, 2: Running plan 5km,3: Running plan 10km, 4: Half marathon training,5: Marathon Training (Phase 2) int operate 1: Start exercise2: Pause exercise3: Resume exercise4: End exercise,5: Switch action int actionType Action type: 1 brisk walking2 jogging3 medium speed running4 fast running5 end of course exercise6 course Free movement after the end int errorCode 0 is success, non-0 is failure baseModel Basic data date, time, motion type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOExchangeStatus.html":{"url":"doc/dataExchange/IDOExchangeStatus.html","title":"Exchange Data Status","keywords":"","body":"Exchange data status IDOExchangeStatus enum IDOExchangeStatus: Int { case initial = 0 /// Initialization case appStart = 1 /// app initiation starts case appStartReply = 2 /// app initiation starts ble reply case appEnd = 3 /// app initiation ends case appEndReply = 4 /// app initiates end ble reply case appPause = 5 /// app initiates pause case appPauseReply = 6 /// app initiates pause ble reply case appRestore = 7 /// app initiates recovery case appRestoreReply = 8 /// app initiates recovery ble reply case appIng = 9 /// app initiates exchange case appIngReply = 10 /// app initiates exchange ble reply case getActivity = 11 /// Get the last motion data case getActivityReply = 12 /// Get the last exercise data ble reply case getHr = 13 /// Get the one-minute heart rate case getHrReply = 14 /// Get the one-minute heart rate ble reply case appStartPlan = 15 / // app starts exercise plan case appStartPlanReply = 16 /// app starts exercise plan ble reply case appPausePlan = 17 /// app pauses exercise plan case appPausePlanReply = 18 /// app pauses exercise plan ble reply case appRestorePlan = 19 /// app resumes exercise plan case appRestorePlanReply = 20 /// app resumes exercise plan ble reply case appEndPlan = 21 /// app ends exercise plan case appEndPlanReply = 22 /// app End exercise plan ble reply case appSwitchAction = 23 /// app switch action case appSwitchActionReply = 24 /// app end exercise plan ble reply case appBlePause = 25 /// app initiated exercise ble initiates pause case appBlePauseReply = 26 /// An app-initiated movement ble initiates a pause app reply case appBleRestore = 27 /// An app-initiated movement ble initiates a recovery case appBleRestoreReply = 28 /// An app-initiated movement ble initiates a resume app reply case appBleEnd = 29 /// The movement initiated by app, ble initiation, ends. case appBleEndReply = 30 /// The movement initiated by app, ble initiation, ends. app reply case bleStart = 31 /// The movement initiated by ble, ble initiation starts. case bleStartReply = 32 /// The movement initiated by ble starts the app reply case bleEnd = 33 /// The movement initiated by ble ends when initiated by ble case bleEndReply = 34 /// The movement initiated by ble ends when initiated by ble app reply case blePause = 35 /// ble initiated movement ble initiated pause case blePauseReply = 36 /// ble initiated movement ble initiated pause app reply case bleRestore = 37 /// ble initiated movement ble Initiate recovery case bleRestoreReply = 38 /// ble initiated movement ble initiated recovery app reply case bleIng = 39 /// ble initiated movement ble initiated exchange case bleIngReply = 40 /// ble initiated movement ble Initiate exchange app reply case bleStartPlan = 41 /// ble start exercise plan case blePausePlan = 42 /// ble pause exercise plan case bleRestorePlan = 43 /// ble resume exercise plan case bleEndPlan = 44 / // ble end motion plan case bleSwitchAction = 45 /// ble switch action case bleOperatePlanReply = 46 } enum class IDOExchangeStatus(val raw: Int) { INITIAL(0), /// Initialization APPSTART (1), /// APP initiation starts APPSTARTREPLY(2), /// APP initiation starts BLE reply APPEND(3), /// APP initiation ends APPENDREPLY(4), /// APP initiates end of BLE reply APPPAUSE(5), /// APP initiates pause APPPAUSEREPLY(6), /// APP initiates pause BLE reply APPRESTORE(7), /// APP Initiate recovery APPRESTOREREPLY(8), /// APP initiates recovery BLE reply APPING(9), /// APP initiates exchange APPINGREPLY(10), /// APP initiates exchange BLE reply GETACTIVITY (11), /// Get the last exercise data GETACTIVITYREPLY(12), /// Get the last exercise data BLE reply GETHR(13), /// Get the one-minute heart rate GETHRREPLY(14) , /// Get one-minute heart rate BLE reply APPSTARTPLAN(15), /// APP starts exercise plan APPSTARTPLANREPLY(16), /// APP starts exercise plan BLE reply APPPAUSEPLAN(17), /// APP pauses exercise plan APPPAUSEPLANREPLY(18), /// APP pauses exercise plan BLE reply APPRESTOREPLAN(19), /// APP resumes exercise plan APPRESTOREPLANREPLY(20), / // APP resumes exercise plan BLE reply APPENDPLAN(21), /// APP ends exercise plan APPENDPLANREPLY(22), /// APP ends exercise plan BLE reply APPSWITCHACTION(23), // / APP switching action APPSWITCHACTIONREPLY(24), /// APP end exercise plan BLE reply APPBLEPAUSE(25), /// APP initiated exercise BLE initiation pause APPBLEPAUSEREPLY(26), /// APP-initiated movement BLE initiates pause APP reply APPBLERESTORE(27), /// APP-initiated movement BLE initiates recovery APPBLERESTOREREPLY(28), /// APP-initiated movement BLE initiates recovery APP reply APPBLEEND( 29), /// The movement initiated by APP ends with BLE initiation APPBLEENDREPLY(30), /// The movement initiated by APP ends with BLE initiation. APP replies BLESTART(31), /// The movement initiated by BLE BLE initiation starts BLESTARTREPLY(32), /// BLE initiated movement BLE initiation starts APP reply BLEEND(33), /// BLE initiated movement BLE initiation ends BLEENDREPLY(34), / // BLE initiated movement BLE initiated end APP reply BLEPAUSE(35), /// BLE initiated movement BLE initiated pause BLEPAUSEREPLY(36), /// BLE initiated movement BLE initiated pause APP reply BLERESTORE(37), /// BLE initiated movement BLE initiated recovery BLERESTOREREPLY(38), /// BLE initiated movement BLE initiated recovery APP reply BLEING(39), /// BLE initiated Movement BLE initiated exchange BLEINGREPLY(40), /// BLE initiated movement BLE initiated exchange APP reply BLESTARTPLAN(41), /// BLE started movement plan BLEPAUSEPLAN(42), // / BLE pause exercise plan BLERESTOREPLAN(43), /// BLE resume exercise plan BLEENDPLAN(44), /// BLE end exercise plan BLESWITCHACTION(45), /// BLE switching action BLEOPERATEPLANREPLY(46); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOExchangeV2Model.html":{"url":"doc/dataExchange/IDOExchangeV2Model.html","title":"V2 Data Exchange Entity","keywords":"","body":"V2 data exchange entity IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOExchangeV2Model Parameter Description Type Remarks operate 1: Request the app to open GPS 2: Initiate a motion request int targetValue target value int targetType motion target type0 : No goal,1: Number of repetitions, unit: times,2: Distance, unit: meters, 3: Calories, unit: kcal, 4: Duration, Unit: minutes, 5: Number of steps, unit: step int forceStart Whether to force start 0: Not forced, 1: Forced retCode Error code0: Success ; 1: The device has entered sports mode and failed;2: The device has low power and failed; 3: The bracelet is charging4: Alexa is being used 5: During the call int calories calories (unit: J) int distance distance (unit: meters) int durations duration (unit: seconds) int step number of steps (unit: step) int avgHr average heart rate int maxHr maximum heart rate int curHr current heart rate int hrSerial sequence No. int burnFatMins fat burning time (unit: minutes) int aerobicMins aerobic time (unit: minutes) int limitMins limit time (unit: minutes) int isSave Whether to store data bool status 0: All valid, 1: Invalid distance, 2: GPS signal is weak int interval Heart rate interval int hrValues ​​ Heart rate data collection array baseModel Basic data date, time, exercise type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/dataExchange/IDOExchangeV3Model.html":{"url":"doc/dataExchange/IDOExchangeV3Model.html","title":"V3 data exchange entity","keywords":"","body":"V3 data exchange entity IDOExchangeBaseModel Parameters Description Type Remarks day date int hour hour int minute minute int second second int sportType sport type int IDOExchangeV3Model Parameter Description Type Remarks year Training course year int month Training course month int planType Plan type: 1: Running plan 3km, 2: Running plan 5km, 3: Running plan 10km, 4: Half marathon training (second phase),5: Marathon training (Phase 2) int actionType Action type: 1: Walk fast; 2: Jog; 3: Run at medium speed; 4 Run fast; 5: End the course exercise6: Free exercise after the course int version Protocol version number int operate 1: Request app to open GPS 2: Initiate exercise request int targetValue Target value int targetType Target type:0: No target,1: Number of repetitions, unit: times,2: Distance, unit : meters,3: Calories, unit: kcal, 4: Duration, unit: minutes, 5: Number of steps, unit: steps int forceStart Whether to force Start 0: not mandatory, 1: mandatory int retCode error code int step number of steps int durations duration int distance distance int swimPosture 0: Medley; 1: Freestyle; 2: Breaststroke; 3: Backstroke; 4: Butterfly; int status The status returned by the bracelet starts: 1 , Pause: 2, End: 3, 0: Invalid state int signalFlag Signal strength 0: indicates weak signal, 1: indicates strong signal int isSave Whether to store data Bool realTimeSpeed ​​ The app calculates and displays the real-time speed unit km/h 100 times a record in 15 seconds int realTimePace The app calculates and displays the real-time pace unit s int interval Heart rate interval int hrCount Heart rate number int burnFatMins Fat burning time (unit: minutes) int aerobicMins Aerobic time (unit: minutes) int limitMins Limit time (unit: minutes) int hrValues ​​ Heart rate data collection array warmUpSecond Warm-up exercise duration (seconds) int anaerobicSecond Anaerobic exercise duration (seconds) int fatBurnSecond Fat burning exercise duration (seconds) int aerobicSecond Aerobic exercise duration (seconds) int limitSecond Limit exercise duration (seconds) int avgHr Avg heart rate int maxHr maximum heart rate int curHr current heart rate int warmUpValue warm-up exercise value int fatBurnValue fat burning exercise value int aerobicValue Aerobic fitness value int limitValue Extreme fitness value int anaerobicValue Anaerobic fitness value int avgSpeed ​​ Average speed km/h int maxSpeed ​​ Maximum speed km/h int avgStepFrequency Average step frequency int maxStepFrequency Maximum step frequency int avgStepStride Average stride length int maxStepStride Maximum stride int kmSpeed ​​ Average kilometer pace int fastKmSpeed ​​ Fastest kilometer pace int kmSpeedCount Number of kilometers pace int kmSpeeds kilometer pace collection array mileCount mile pace count int mileSpeeds mile pace collection array stepsFrequencyCount step frequency count int stepsFrequencys Cadence collection array trainingEffect Training effect; Unit: None Range 1.0 ~ 5.0 (*10 times) int anaerobicTrainingEffect Anaerobic training effect; Unit: None Range 1.0 ~ 5.0 (*10 times) int vo2Max Maximum oxygen uptake; Unit: ml/kg/min; Range 0-80 int actionDataCount This action Number of training sessions int inClassCalories Exercise calorie unit in the course in kcal int completionRate Action completion rate 0—100 int hrCompletionRate Heart rate control rate 0—100 int recoverTime Recovery time: unit hours int avgWeekActivityTime Average weekly exercise time last month in minutes int grade VO2 level1: Low 2: Amateur 3: Average 4: Average5: Good 6: Excellent 7: Professional int actionData Action completion contenttype: Action type 1 fast walking; 2 jogging; 3 medium speed running; 4 fast running heart_con_value: heart rate control for each actiontime: action completion time unit secondsgoal_time: action target time int trainingOffset training course date offset starts from 0 int countHour Exercise countdown int countMinute Exercise countdown minutes int countSecond Exercise countdown seconds int time Action target time unit seconds int lowHeart Heart rate range low value int heightHeart The high value of the heart rate range int paceSpeedCount The number of real-time paces int paceSpeeds The real-time pace array passes s and counts every 5 seconds array realSpeedCount real-time Number of speeds int realSpeeds The real-time speed array passed is s and calculated every 5 seconds array baseModel Basic data date, time, motion type IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/logicDescription/syncDataDesc.html":{"url":"doc/logicDescription/syncDataDesc.html","title":"Data exchange implementation logic description","keywords":"","body":"Data exchange implementation logic Function table judgment If the attribute supportV3ActivityExchange = false, the current motion data belongs to v2, otherwise it is v3; v2 belongs to the old equipment motion protocol, and relatively little data can be calculated and displayed; v3 belongs to the new device motion protocol and can calculate and display relatively much data; (currently new devices fall into this category) APP initiates motion APP starts IDOAppStartExchangeModel Time (day, hour, minute, second): The only reference for global management of the current sport. The same time needs to be issued for start, end, pause and resume /// Start date startExchangeModel.day = day; / // Starting clock startExchangeModel.hour = hour; /// Starting minute startExchangeModel.minute = minute; /// Starting second startExchangeModel.second = second; /// Movement type startExchangeModel. sportType = sportType; /// If there are other sports currently in progress, and this parameter is assigned a value to force it on, the previous sport will be forcibly overwritten startExchangeModel.forceStart = forceStart; ... Other attributes are issued based on business needs, and are currently temporarily Not used to Ble reply IDOAppStartReplyExchangeModel /// 0: Success; /// 1: The device has entered sports mode and failed; /// 2: Device battery is low and failed; 3: The bracelet is charging /// 4: Using Alexa 5: Calling startReplyExchangeModel.retCode; APP stops IDOAppEndExchangeModel /// The start date (refer to the start time) endExchangeModel.day = startExchangeModel.day; /// The start clock (refer to the start time) endExchangeModel.hour = startExchangeModel.hour ; /// The starting minute (refer to the start time) endExchangeModel.minute = startExchangeModel.minute; /// The starting second (refer to the start time) endExchangeModel.second = startExchangeModel.second; /// Movement type endExchangeModel.sportType = sportType; /// The duration of global exercise (unit: seconds) endExchangeModel.duration = totalSeconds; /// The calories accumulated by global exercise (unit: kcal) endExchangeModel.calories = numCalories; /// The accumulated movement distance of global movement (unit: meters) endExchangeModel.distance = mSendDistance; /// Whether to keep the data (when the exercise duration is too short, you can choose not to store it, the exercise duration must be at least 1 minute or more, select After saving, the data will be synchronized) endExchangeModel.isSave = isSave; Ble reply IDOAppEndReplyExchangeModel /// Start date (refer to start time) endReplyExchangeModel.day /// start clock (refer to start time) endReplyExchangeModel.hour /// start minute (refer to start time) endReplyExchangeModel.minute /// start second (refer to start time) Time) endReplyExchangeModel.second /// Exercise type endReplyExchangeModel.sportType /// Global exercise accumulated calories (unit: kcal) endReplyExchangeModel.calories /// Global exercise accumulated exercise distance (unit: meters) endReplyExchangeModel.distance /// The number of steps accumulated by global movement (unit: step) endReplyExchangeModel.step /// Average heart rate endReplyExchangeModel.avgHr /// Maximum heart rate endReplyExchangeModel.maxHr /// Fat burning time Unit minutes endReplyExchangeModel.burnFatMins /// Cardiovascular exercise duration unit minutes endReplyExchangeModel.aerobicMins /// Extreme exercise duration unit minutes endReplyExchangeModel.limitMins APP pause IDOAppPauseExchangeModel /// The start date (refer to the start time) pauseExchangeModel.day = startExchangeModel.day; /// The start clock (refer to the start time) pauseExchangeModel.hour = startExchangeModel.hour; /// The starting minute (refer to the start time) pauseExchangeModel.minute = startExchangeModel.minute; /// The starting second (refer to the start time) pauseExchangeModel.second = startExchangeModel.second; Ble reply IDOAppPauseReplyExchangeModel /// Pause error code 0: Success not 0: Failure pauseReplyExchangeModel.errCode APP recovery IDOAppRestoreExchangeModel /// Start date (reference to start time) restoreExchangeModel.day = startExchangeModel.day; /// Start clock (reference to start time) restoreExchangeModel.hour = startExchangeModel. hour; /// The starting minute (refer to the start time) restoreExchangeModel.minute = startExchangeModel.minute; /// The starting second (refer to the start time) restoreExchangeModel.second = startExchangeModel.second; BleReply IDOAppRestoreReplyExchangeModel /// Pause error code 0: Success, not 0: Failure pauseRestoreExchangeModel.errCode v2 Data Exchange IDOAppIngExchangeModel Global Execute v2 data exchange every 2 seconds /// 0: All data is valid, 1: Distance is invalid 2: GPS signal is weak (not used yet) v2exchangeModel.status = status; /// Start date (refer to start time) ) v2exchangeModel.day = startExchangeModel.day; /// Starting clock (referenced to start time) v2exchangeModel.hour = startExchangeModel.hour; /// Starting minute (referenced to start time) v2exchangeModel.minute = startExchangeModel. minute; /// The starting second (refer to the start time) v2exchangeModel.second = startExchangeModel.second; /// The duration of the global movement (in seconds) v2exchangeModel.duration = totalSeconds; /// Global movement Accumulated calories (unit: kcal) v2exchangeModel.calories = numCalories; /// Global exercise accumulated distance (unit: meters) v2exchangeModel.distance = mSendDistance; Ble reply IDOAppIngReplyExchangeModel Specific field reference document v3 Data Exchange IDOAppIngV3ExchangeModel global every 2 seconds Execute v3 data exchange /// 0: All data is valid, 1: Distance is invalid 2: GPS signal is weak (not used yet) v3exchangeModel.signal = signal; /// Start date (refer to start time) v3exchangeModel. day = startExchangeModel.day; /// The starting clock (refer to the start time) v3exchangeModel.hour = startExchangeModel.hour; /// The starting minute (refer to the start time) v3exchangeModel.minute = startExchangeModel.minute; / // The starting seconds (refer to the start time) v3exchangeModel.second = startExchangeModel.second; /// The duration of global exercise (in seconds) v3exchangeModel.duration = totalSeconds; /// The accumulated calories of global exercise ( Unit: kcal) v3exchangeModel.calories = numCalories; /// The accumulated movement distance of the global movement (unit: meters) v3exchangeModel.distance = mSendDistance; /// The app calculates and displays the real-time pace, in km/h, 100X v3exchangeModel.gpsInfoCount = exchangeLatLng.length; List> gps = []; for (var element in exchangeLatLngSDK gps.add({ \"latitude\": (element.latitude * 1000000).toint (), \"Longitude\": (Element.longitude * 1000000).toint (), }); } v3exchangemodel.gps = gps; Ble reply IDOAppIngV3ReplyExchangeModel Specific field reference document Obtain v3 heart rate data Globally obtain heart rate every 30 seconds Data getActivityHrData(completion:) Ble response IDOAppHrDataExchangeModel Specific field reference document Get v3 recent Motion data summary // Get the motion summary globally every 40 seconds getLastActivityData(completion: ) Ble response IDOAppActivityDataV3ExchangeModel Specific field reference Document Ble initiates a pause, APP replies (responds to the firmware status, completes the entire command closed loop) IDOAppBlePauseReplyExchangeModel /// 0: Success is not 0 : Failed replyExchangeModer.errCode = code Ble initiates recovery, APP replies (responds to firmware status, completes the entire command closed loop) IDOBleRestoreReplyExchangeModel /// 0: Success, not 0: Failure replyExchangeModer.errCode = code Ble initiation ends, APP replies (responds to firmware status, completes the entire command closed loop) IDOBleEndReplyExchangeModel /// 0: Success, non-0: Failure replyExchangeModer.errCode = code /// The duration of the global exercise (in seconds) replyExchangeModer.duration = duration /// The calories accumulated by the global exercise (Unit: kcal) replyExchangeModer.calories = calories /// Global exercise accumulated exercise distance (unit: meters) replyExchangeModer.distance = distance Ble initiates exercise (APP project is not enabled) ) APP listens for Ble commands Ble response starts IDOBleStartExchangeModel /// 1: Request app to open gps 2: Initiate motion request bleStartExchangeModel. operate /// Movement type bleStartExchangeModel.stportType /// Start date (initialized movement start time) startExchangeModel.day = bleStartExchangeModel.day /// Start clock (initial movement start time) startExchangeModel.hour = bleStartExchangeModel.hour /// Start minute (initial movement start time) startExchangeModel.minute = bleStartExchangeModel.minute /// The starting second (initial movement start time) startExchangeModel.second = bleStartExchangeModel.second APP reply IDOBleStartReplyExchangeModel /// 1: Request the app to turn on gps 2: Initiate a motion request bleStartReplyExchangeModel.operat = bleStartExchangeModel.operate /// 0: Success, not 0: Failure bleStartReplyExchangeModel.retCode = 0 Ble response paused IDOBlePauseExchangeModel /// Start date blePauseReplyExchangeModel.day /// Start clock blePauseReplyExchangeModel.hour /// Start minute blePauseReply ExchangeModel.minute /// Start seconds blePauseReplyExchangeModel.second APP reply IDOBlePauseReplyExchangeModel /// 0: Success non-0: Failure blePauseReplyEx changeModel.retCode = 0 BleResponseRestore IDOBleRestoreExchangeModel /// Start date bleRestoreReplyExchangeModel.day /// Start clock bleRestoreReplyExchangeModel.hour // / Starting minute bleReplyExchangeModel.minute /// Starting second bleReplyExchangeModel.second APP reply IDOBleRestoreReplyExchangeModel /// 0 : Success is not 0: Failure Ble response end IDOBleEndExchangeModel /// Start date bleEndReplyEx changeModel.day /// Starting clock bleEndReplyExchangeModel.hour /// Starting minute bleEndReplyExchangeModel.minute /// Starting second bleEndReplyExchangeModel.second APP reply IDOBleEndReplyExchangeModel /// 0: Success is not 0: Failure bleEndReplyExchangeModel.retCode = 0 Ble response data IDOBleIngExchangeModel /// Starting date bleIngReplyExchangeModel.day /// Starting clock bleIngReplyExchangeModel.hour /// Starting minute bleIngReplyExchangeModel.minute /// Starting second bleIngReplyExchangeModel.changeModel.second /// Distance unit: 0.01km bleIngReplyExchangeModel.distance APP reply IDOBleIngReplyExchangeModel /// Distance unit: 0.01km ble IngReplyExchangeModel.distance = 0 Global monitoring of complete data 1.sdk has done data management and calculation processing, and the APP can directly display the data UI 2.The data in response to the execution of the specific instructions above does not need to be processed (as Log record) 3.app and device data exchange will trigger complete data changes v2 data exchangeV2Data(completion:) IDOExchangeV2Model Specific field reference document v3 data exchangeV3Data(completion:) IDOExchangeV3Model Reference document for specific fields Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:03:54 "},"doc/delegate/IDOBridgeDelegate.html":{"url":"doc/delegate/IDOBridgeDelegate.html","title":"Delegate","keywords":"","body":"Bridge Delegate IDOBridgeDelegate is used to bridge the Bluetooth library and protocol library to implement Bluetooth data and status transmission Methods listenStatusNotification(status:) Listening status notification ( SDK) Parameters: status: IDOStatusNotification listenDeviceNotification(model:) Listen to device active notification/control events (device) Parameters: model: IDODeviceNotificationModel Device notification entity checkDeviceBindState(macAddress:) Query the binding status according to the device macAddress (provided by the APP) true: bound, false: not bound Parameters: macAddress: The mac address of the currently connected device Proxy implementation Swift: // Implement proxy extension SomeClass: IDOBridgeDelegate { // Listen to SDK status notification func listenStatusNotification(status: IDOStatusNotification) { print(\"StatusNotification: \\(status)\") NotificationCenter.default.post(name: \"onSdkStatusChanged\", object: status) } // Listen for device active notification/control events func listenDeviceNotification(model: IDODeviceNotificationModel) { print(\"DeviceNotification: \\(model)\") NotificationCenter.default.post(name: \"onSdkDeviceStateChanged\", object : model) } // APP provides device binding status. This method will be called when the device is connected via Bluetooth. How to return true will lead to quick configuration (get device menu, device information, third-level version number, update watch time, etc.) func checkDeviceBindState(macAddress: String) -> Bool { let isBinded = UserDefaults.standard.isBind(macAddress) print(\"checkDeviceBindState mac\\(macAddress) isBinded:\\(isBinded)\") return isBinded } } Kotlin: class BleData : IDOBridgeDelegate { // Listen to SDK status notification override fun listenStatusNotification(status: IDOStatusNotification) { println(\"listenStatusNotification $status\") ; } // Listen for device active notification/control events override fun listenDeviceNotification(status: IDODeviceNotificationModel) { println(\"listenDeviceNotification $status\"); } // APP provides device binding status and device Bluetooth connection This method will be called. How to return true will lead to quick configuration (get device menu, device information, third-level version number, update watch time, etc.) override fun checkDeviceBindState(macAddress: String): Boolean { return bindState( ) } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:49:32 "},"doc/delegate/IDOBleDelegate.html":{"url":"doc/delegate/IDOBleDelegate.html","title":"Bluetooth library Delegate","keywords":"","body":"Bluetooth library Delegate IDOBleDelegate Method scanResult(list:) Search device results Parameters: list: Scanned devices List IDODeviceModel bluetoothState(state:) Bluetooth state Parameters: state: IDOBluetoothStateModel deviceState(state:) Device state state Parameters: state: IDODeviceStateModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:49:28 "},"doc/delegate/IDOAlexaDelegate.html":{"url":"doc/delegate/IDOAlexaDelegate.html","title":"Alexa Delegate","keywords":"","body":"Alexa Delegate IDOAlexaDelegate Method getHealthValue(valueType:) Get health data Parameters: valueType: health data type ( IDOGetValueType) getHrValue(dataType:timeType:) Get heart rate Parameters: dataType: 0: average, 1: maximum, 2: minimum timeType: 0: Today, 1: Last week, 2: Last month, 3: Previous year functionControl(funType:) Function Control Parameters: funType: 0 Close the search Mobile phone features Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:49:25 "},"doc/messageIcon/IDOMessageIcon.html":{"url":"doc/messageIcon/IDOMessageIcon.html","title":"Message icon","keywords":"","body":"Message icon Functional Overview iOS and Android implement dynamic update interface for message icons. When iOS monitors the message notification, the firmware returns the application package name and obtains the APP information from the background. The downloaded corresponding icon is cropped and sent to the firmware, and the application name is also sent to the firmware. When Android starts, it obtains all application information in the system. , when the Android app receives a message notification, the corresponding application icon is cropped according to the message type and sent to the firmware. MessageIconInterface Attributes updating Is it being updated? iconDirPath Get the directory where the icon image is stored method getDefaultAppInfo(completion:) The device supports default APP information collection Parameters: completion: return APP information results items: IDOAppIconItemModel collection firstGetAppInfo(force:completion:) android installed all app information collection Parameters: force: Android force update message icon and name completion: return APP information results items: IDOAppIconItemModel collection getCacheAppInfo(completion:) Get cached APP information Parameters: completion: return APP information results model: IDOAppIconInfoModel resetIconInfoData(macAddress:deleteIcon:completion:) Reset APP icon information (delete local sandbox cached images) Parameters: macAddress: MAC address whose data needs to be cleared deleteIcon: Whether to delete icon picture files, deleted by default completion: delete status iOSConfig(countryCode:baseUrlPath:appKey:language:) iOS configuration information Parameters: countryCode: country code (such as: CN, US) baseUrlPath: cache server address appKey: background request to allocate appKey language: language unit androidSendMessageIconToDevice(eventType:completion:) Android sends a message icon to the device when a notification is received Parameters: eventType: event type completion: delivery status Example Swift /// ios configuration information /// Parameters are for reference only, assign values according to actual conditions // If not configured, it will be obtained directly from the Apple server (which will be slower). It is recommended to cache it in the background. sdk.messageIcon.iOSConfig(countryCode: \"US\",seUrlPath: \"https://cn-user.idoocloud.com/api/ios/lookup/get\", appKey: \"800a6444f9c0433c8e88741b6ddf1443\", language: 2) /// Enter the switch control page to get the APP name and icon sdk.messageIcon.firstGetAllAppInfo(force: false) { items in } /// Get the default enabled notification APP sdk.messageIcon.getDefaultAppInfo { items in } /// Unbind the device to delete data sdk.messageIcon.resetIconInfoData(macAddress: \"\", deleteIcon: true) { success in } Kotlin: // Enter the switch control page to get the APP name and icon sdk.messageIcon.firstGetAllAppInfo(force = false) { items -> // Process the returned data here } // Get the default enabled notification APP sdk.messageIcon.getDefaultAppInfo { items -> // Process the returned data here } //Unbind the device and delete data sdk.messageIcon.resetIconInfoData(macAddress = \"\", deleteIcon = true) { success -> // Process the returned results here } // Each time a notification message is sent, the event type is executed //The event type is obtained from the items above. The event type is associated with each APP application, so telling the event type will know which application is notified. // Send this event type to determine whether the APP icon has been updated. If the APP icon is not updated, the SDK will send the corresponding APP icon. sdk.messageIcon.androidSendMessageIconToDevice(eventType = type) { success -> } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:26:06 "},"doc/logicDescription/messageIconDesc.html":{"url":"doc/logicDescription/messageIconDesc.html","title":"Dynamic message icon and notification distribution process","keywords":"","body":"Dynamic message icon and notification delivery process Android process: Step 1 firstGetAppInfo(force:completion:) Execute this interface to obtain all application icons, names, packages Name and assign evtType (application unique ID, generated based on package name) Step 2 Cmds.setNoticeMessageState(param).send This interface supports setting, modifying, and obtaining Setting Issue the assigned evtType (application unique ID, generated based on the package name), whether the notification switch is turned on, and control the switch status according to needs Get the switch status of the firmware each time you enter the notification page Step 3 Cmds.setNoticeAppName(param).send To execute this interface to deliver notification message content, you need to bring evtType (application unique ID, generated based on the package name) and application APP name. The first time the firmware is delivered, the display is the default Message icon, and the corresponding icon will be updated when the message is sent later Step 4 androidSendMessageIconToDevice(eventType = type) When the notification message content is delivered, this interface is executed at the same time to update the corresponding Event type APP icon to firmware iOS process: Step 1 iOSConfig(countryCode:baseUrlPath:appKey:language:) If your company’s backend does this for Apple message icons For cache processing, the get request refers to this path and parameter baseurl = \"https://cn-user.idoocloud.com/api/ios/lookup/get\" + \"?bundleId=${packName}&country=${country}\" ; If you do not configure background cache processing, the request through Apple's interface will be relatively slower, but it will not affect the use of functions; country code: countryCode and current language: language need to be configured, the server interface description reference: According to registration and country Coding to query ios package information Step 2 firstGetAppInfo(force:completion:) Execute this interface to obtain all application icons, names, and package names And assign evtType (ID assigned by firmware). You need to wait for the process to execute this interface. The status of updating indicates that it is being updated. It is recommended to add loading or update to false before entering the message icon list. Step 3 Cmds.setNoticeMessageState(param).send This interface supports setting, modifying, and obtaining Set the distributed evtType (application unique ID, generated based on the package name ), whether the notification switch is turned on, control the switch status according to needs Get the switch status of the firmware each time you enter the notification page Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 09:40:13 "},"doc/messageIcon/IDOMessageIconModel.html":{"url":"doc/messageIcon/IDOMessageIconModel.html","title":"Message icon entity","keywords":"","body":"Message icon entity IDOAppIconInfoModel Parameters Description Type Remarks version version number Int iconWidth icon width Int iconHeight icon height Int colorFormat color format Int blockSize compression block size Int totalNum total number Int items package name details collection list IDOAppIconItemModel Collection IDOAppIconItemModel Parameters Description Type Remarks evtType Event type Int packName Application package name String appName Application name String iconLocalPath icon Sandbox small icon address String (firmware use) itemId Give an id to each package name Int msgCount Number of messages received Int Abandoned iconCloudPath icon cloud address String state message icon update status Int 0: No need to update 1: Need to update icon, 2: Need to update app name, 3: icon and app All need to be updated iconLocalPathBig icon sandbox big icon address String (app use) countryCode country code String appVersion application version number String isDownloadAppInfo whether it has been downloaded APP information Bool isUpdateAppName Whether the app name has been updated Bool isUpdateAppIcon Whether the app icon has been updated Bool isDefault Whether it is the default app Bool IDOAppIconInfoModel Parameters Description Type Remarks version version number Int iconWidth icon width Int iconHeightasdfasdf icon height Int colorFormat color format Int blockSize Compression block size Int totalNum Total number Int items package name details collection list IDOAppIconItem collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/logicDescription/messageIconUrl.html":{"url":"doc/logicDescription/messageIconUrl.html","title":"Query ios package information based on registration and country code","keywords":"","body":"Query ios package information based on registration and country code (for reference only) Interface address https://XXX /api/ios/lookup/get Request method [GET] Request header Header parameters Value appKey 800a6444f9c0.....6ddf1443 Request Parameters Name Type Is it required Description bundleId String ?bundleId=com.tencent.xin&country=cn Return example { \"resultCount\": 1, \"results\": [{ \"artworkUrl100\": \"https://is2 -ssl.mzstatic.com/image/thumb/Purple112/v4/e2/31/9b/e2319b7f-e249-a286-888b- 7a9eb4ff873c/AppIcon-0-1x_U007emarketing-0-7-0-sRGB-85-220.png /100x100bb.jpg\", \"bundleId\": \"com.vk.vkclient\", \"trackName\": \"VK: social network, messenger\", \"trackCensoredName\": \"VK: social network, messenger\", \"country \": \"cn\" }] } Result description Error code Description 200 Ok 200103 Account does not exist Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 11:35:11 "},"doc/get/IDOCommandIndex.html":{"url":"doc/get/IDOCommandIndex.html","title":"Get command","keywords":"","body":"Get command Get bt Bluetooth name - getBtName Get real-time data - getLiveData Get error record - getErrorRecord Get HID information - getHidInfo Get gps information - getGpsInfo Get version information - getVersionInfo Get mtu information - getMtuInfo Get all health monitoring switches - getAllHealthSwitchState Get gps status - getGpsStatus Get the shortcut application list that cannot be deleted by the firmware - getUnerasableMeunList Get the sports mode automatic recognition switch - getActivitySwitch Get the red Click reminder switch - getUnreadAppReminder Get font information - getFlashBinInfo Query bt pairing switch, connection, a2dp connection, hfp connection status (only supports bt Bluetooth device) - getBtNotice Get wrist-raising data - getUpHandGesture Get watch face id - getWatchDialId Get Do Not Disturb mode status - getNotDisturbStatus Get the set calories/distance/medium and high exercise duration main interface - getMainSportGoal Get the blood pressure algorithm level 3 version number Information event number - getBpAlgVersion Get screen brightness - getScreenBrightness Get hot start parameters - getHotStartParam Get The maximum number of settings supported by the firmware - getSupportMaxSetItemsNum Get walking reminder - getWalkRemind Get all-day step goal - getStepGoal Get the watch name - getDeviceName Get the modification time of the firmware locally saved contact file - getContactReviseTime Get the device upgrade status - getUpdateStatus Get stress value - getStressVal Get heart rate monitoring mode - getHeartRateMode Get battery information - getBatteryInfo Get the log status of the device - getDeviceLogState Get download language support - getDownloadLanguage Get the list of device support - getMenuList Get notification center switch - getNoticeStatus app gets ble’s alarm clock - getAlarm Get user habits Information - getHabitInfo Get the song name and folder of the firmware - getBleMusicInfo Get screen information - getWatchDialInfo Get watch face list v3 - getWatchListV3 Get watch face list v2 - getWatchListV2 Get language library list - getLanguageLibrary Get firmware local beep file information - getBleBeep Get the default sports type - getDefaultSportType Get the default sports type V3 - getSportTypeV3 Get BT connected phone model - getBtConnectPhoneModel Get unit - getUnit Get spp mtu length (Android) - getMtuLengthSPP Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:06:15 "},"doc/get/IDOGetBtName.html":{"url":"doc/get/IDOGetBtName.html","title":"Get bt Bluetooth name","keywords":"","body":"Get bt Bluetooth name Function table: getBtAddrV2 Example Swift Cmds.getBtName( ).send { rs in if case .success(let obj) = rs { // Success // obj is String }else { // Failure } } Kotlin Cmds.getBtName().send { if (it.error.code == 0) { // Success // it.res is String }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetLiveData.html":{"url":"doc/get/IDOGetLiveData.html","title":"Get real-time data","keywords":"","body":"Get real-time data IDOLiveDataModel Function table:getRealtimeData Example Swift Cmds.getLiveData().send { rs in if case .success(let obj) = rs { // success // obj is IDOLiveDataModel }else { // fail } } Kotlin Cmds.getLiveData().send { if (it.error.code == 0) { // success // it.res is IDOLiveDataModel }else { // fail } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetErrorRecord.html":{"url":"doc/get/IDOGetErrorRecord.html","title":"Get error record","keywords":"","body":"Get error records IDOErrorRecordModel Function table:getFlashLog Example Swift Cmds.getErrorRecord().send { rs in if case .success(let obj) = rs { // success // obj is IDOErrorRecordModel }else { // fail } } Kotlin Cmds.getErrorRecord().send { if (it.error.code == 0) { // success // it.res is IDOErrorRecordModel }else { // fail } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetHidInfo.html":{"url":"doc/get/IDOGetHidInfo.html","title":"Get HID information","keywords":"","body":"Get HID information Function table: None Example Swift Cmds.getHidInfo().send { rs in if case .success(let obj) = rs { // Success // obj is Bool }else { // Failure } } Kotlin Cmds.getHidInfo().send { if (it.error.code == 0) { // Success // it.res is Bool }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetGpsInfo.html":{"url":"doc/get/IDOGetGpsInfo.html","title":"Get gps information","keywords":"","body":"Get gps information IDOGpsInfoModel Function table:getSupportUpdateGps Example Swift Cmds.getGpsInfo().send {rs in if case .success(let obj) = rs { // Success // obj is IDOGpsInfoModel }else { // Failure } } Kotlin Cmds.getGpsInfo().send { if (it.error.code == 0) { // Success // it.res is IDOGpsInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetVersionInfo.html":{"url":"doc/get/IDOGetVersionInfo.html","title":"Get version information","keywords":"","body":"Get version information IDOVersionInfoModel Function table:getVersionInfo Example Swift Cmds.getVersionInfo().send {rs in if case .success(let obj) = rs { // Success // obj is IDOVersionInfoModel }else { // Failure } } Kotlin Cmds.getVersionInfo().send { if (it.error.code == 0) { // Success // it.res is IDOVersionInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetMtuInfo.html":{"url":"doc/get/IDOGetMtuInfo.html","title":"Get mtu information","keywords":"","body":"Get mtu information IDOMtuInfoModel Function table:getMtu Example Swift Cmds.getMtuInfo().send { rs in if case .success(let obj) = rs { // Success // obj is IDOMtuInfoModel }else { // Failure } } Kotlin Cmds.getMtuInfo().send { if (it.error.code == 0) { // Success // it.res is IDOMtuInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetAllHealthSwitchState.html":{"url":"doc/get/IDOGetAllHealthSwitchState.html","title":"Get all health monitoring switches","keywords":"","body":"Get all health monitoring switches IDOAllHealthSwitchStateModel Function table: getHealthSwitchStateSupportV3 Example Swift Cmds.getAllHealthSwitchState().send { rs in if case .success(let obj) = rs { // Success // obj is IDOAllHealthSwitchStateModel }else { // Failure } } Kotlin Cmds.getAllHealthSwitchState().send { if (it.error.code == 0) { // Success // it.res is IDOAllHealthSwitchStateModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetGpsStatus.html":{"url":"doc/get/IDOGetGpsStatus.html","title":"Get gps status","keywords":"","body":"Get gps status IDOGpsStatusModel Function table:getSupportUpdateGps Example Swift Cmds.getGpsStatus().send { rs in if case .success(let obj) = rs { // Success // obj is IDOGpsStatusModel }else { // Failure } } Kotlin Cmds.getGpsStatus().send { if (it.error.code == 0) { // Success // it.res is IDOGpsStatusModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetUnerasableMeunList.html":{"url":"doc/get/IDOGetUnerasableMeunList.html","title":"Get the shortcut application list that cannot be deleted by the firmware","keywords":"","body":"Get the shortcut application list that cannot be deleted by the firmware IDOUnerasableMeunListModel Function table: getDeletableMenuListV2 Example Swift Cm ds.getUnerasableMeunList().send { rs in if case .success(let obj) = rs { // Success // obj is IDOUnerasableMeunListModel }else { // Failure } } Kotlin Cmds.getUnerasableMeunList().send { if (it.error.code == 0) { // Success // it.res is IDOUnerasableMeunListModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetActivitySwitch.html":{"url":"doc/get/IDOGetActivitySwitch.html","title":"Get the sports mode automatic recognition switch","keywords":"","body":"Get the sports mode automatic recognition switch IDOActivitySwitchModel Function table: getActivitySwitch Example Swift Cmds.getActivitySwitch().send { rs in if case .success(let obj) = rs { // Success // obj is IDOActivitySwitchModel }else { // Failure } } Kotlin Cmds.getActivitySwitch().send { if (it.error.code == 0) { // Success // it.res is IDOActivitySwitchModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetUnreadAppReminder.html":{"url":"doc/get/IDOGetUnreadAppReminder.html","title":"Get red dot reminder switch","keywords":"","body":"Get the red dot reminder switch IDOCmdGetResponseModel Function table: None Example Swift Cmds.getUnreadAppRe minder().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdGetResponseModel }else { // Failure } } Kotlin Cmds.getUnreadAppReminder().send { if (it.error.code == 0) { // Success // it.res is IDOCmdGetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetFlashBinInfo.html":{"url":"doc/get/IDOGetFlashBinInfo.html","title":"Get font information","keywords":"","body":"Get font information IDOFlashBinInfoModel Function table: getFlashLog Example Swift Cmds.getFlashBinInfo( ).send { rs in if case .success(let obj) = rs { // Success // obj is IDOFlashBinInfoModel }else { // Failure } } Kotlin Cmds.getFlashBinInfo().send { if (it.error.code == 0) { // Success // it.res is IDOFlashBinInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetBtNotice.html":{"url":"doc/get/IDOGetBtNotice.html","title":"Query bt pairing switch, Connection, a2dp connection, hfp connection status (only supports devices with bt Bluetooth)","keywords":"","body":"Query bt pairing switch, connection, a2dp connection, hfp connection status (only supports devices with bt Bluetooth) IDOBtNoticeModel Function table: getBleAndBtVersion Example Swift Cmds.getBtNotice().send { rs in if case .success(let obj) = rs { // Success // obj is IDOBtNoticeModel }else { // Failure } } Kotlin Cmds.getBtNotice().send { if (it.error.code == 0) { // Success // it.res is IDOBtNoticeModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetUpHandGesture.html":{"url":"doc/get/IDOGetUpHandGesture.html","title":"Get wrist-raising data","keywords":"","body":"Get wrist-raising data IDOUpHandGestureModel Function table: getUpHandGestureEx Example Swift Cmds.getUp HandGesture().send { rs in if case .success(let obj) = rs { // Success // obj is IDOUpHandGestureModel }else { // Failure } } Kotlin Cmds.getUpHandGesture().send { if (it.error.code == 0) { // Success // it.res is IDOUpHandGestureModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetWatchDialId.html":{"url":"doc/get/IDOGetWatchDialId.html","title":"Get the watch face id","keywords":"","body":"Get watch face id IDOWatchDialIdModel Function table: None Example Swift Cmds.getWatchDialId().send {rs in if case .success(let obj) = rs { // Success // obj is IDOWatchDialIdModel }else { // Failure } } Kotlin Cmds.getWatchDialId().send { if (it.error.code == 0) { // Success // it.res is IDOWatchDialIdModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetNotDisturbStatus.html":{"url":"doc/get/IDOGetNotDisturbStatus.html","title":"Get the Do Not Disturb mode status","keywords":"","body":"Get Do Not Disturb mode status IDONotDisturbStatusModel Function table: getDoNotDisturbMain3 Example Swift Cmd s.getNotDisturbStatus().send { rs in if case .success(let obj) = rs { // Success // obj is IDONotDisturbStatusModel }else { // Failure } } Kotlin Cmds.getNotDisturbStatus().send { if (it.error.code == 0) { // Success // it.res is IDONotDisturbStatusModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetMainSportGoal.html":{"url":"doc/get/IDOGetMainSportGoal.html","title":"Get the settings Main interface of calories/distance/moderate and high exercise duration","keywords":"","body":"Get the set calories/distance/medium-high exercise duration main interface IDOMainSportGoalModel Function table: getSupportGetMainSportGoalV3 setCalorieGoal (secondary menu), exMain3DistanceGoal (Level 2 Menu), setMidHighTimeGoal (secondary menu), getSupportSetGetTimeGoalTypeV2 (secondary menu) Example Swift Cmds.getMainSportGoal().send { rs in if case .success(let obj) = rs { // Success // obj is IDOMainSportGoalModel }else { // Failure } } Kotlin Cmds.getMainSportGoal().send { if (it.error.code == 0) { // Success // it.res is IDOMainSportGoalModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetBpAlgVersion.html":{"url":"doc/get/IDOGetBpAlgVersion.html","title":"Get the blood pressure algorithm three-level version number information event number","keywords":"","body":"Get the blood pressure algorithm three-level version number information event number IDOBpAlgVersionModel Function table: setSupportV3Bp Example Swift Cmd s.getBpAlgVersion().send {rs in if case .success (let obj) = rs { // Success // obj is IDOBpAlgVersionModel } else { // Failure } } kotlin Cmds.getBpAlgVersion().send { if (it.error.code == 0) { // Success // it.res is IDOBpAlgVersionModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetScreenBrightness.html":{"url":"doc/get/IDOGetScreenBrightness.html","title":"Get screen brightness","keywords":"","body":"Get screen brightness IDOScreenBrightnessModel Function table: getScreenBrightnessMain9 Example Swift Cmds.getScreenBrightness().send { rs in if case .success(let obj) = rs { // Success // obj is IDOScreenBrightnessModel }else { // Failure } } Kotlin Cmds.getScreenBrightness().send { if (it.error.code == 0) { // Success // it.res is IDOScreenBrightnessModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetHotStartParam.html":{"url":"doc/get/IDOGetHotStartParam.html","title":"Get hot start parameters","keywords":"","body":"Get hot start parameters IDOHotStartParamModel Function table: None Interface deprecated Example Swift Cmds.getHotStartParam().send { rs in if case .success(let obj) = rs { // success // obj is IDOHotStartParamModel }else { // failure } } Kotlin Cmds.getHotStartParam().send { if (it.error.code == 0) { // Success // it.res is IDOHotStartParamModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetSupportMaxSetItemsNum.html":{"url":"doc/get/IDOGetSupportMaxSetItemsNum.html","title":"Get the maximum number of settings supported by the firmware","keywords":"","body":"Get the maximum number of detailed settings supported by the firmware IDOSupportMaxSetItemsNumModel Function table: getSetMaxItemsNum Example Swift Cmds.getSupportMaxSetItemsNum().send { rs in if case .success(let obj) = rs { // Success // obj is IDOSupportMaxSetItemsNumModel }else { // Failure } } Kotlin ` kotlin Cmds.getSupportMaxSetItemsNum().send { if (it.error.code == 0) { // Success // it.res is IDOSupportMaxSetItemsNumModel }else { // Failure } } ` Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetWalkRemind.html":{"url":"doc/get/IDOGetWalkRemind.html","title":"Get walk Reminder","keywords":"","body":"Get walking reminder IDOWalkRemindModel Function table: getWalkReminderV3 setWalkReminderAddNotify (secondary menu) getSupportSetGetNoReminderOnWalkReminderV2 ( Secondary menu) Example Swift Cmds.getWalkRemind().send { rs in if case .success(let obj) = rs { // success // obj is IDOWalkRemindModel }else { // failure } } Kotlin Cmds.getWalkRemind().send { if (it.error.code == 0) { // Success // it.res is IDOWalkRemindModel } else { // failed } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetStepGoal.html":{"url":"doc/get/IDOGetStepGoal.html","title":"Get the all-day step goal","keywords":"","body":"Get the all-day step goal IDOStepGoalModel Function table: getStepDataTypeV2 Example Swift Cmds.getStepGoal().send { rs in if case .success(let obj) = rs { // Success // obj is IDOStepGoalModel }else { // Failure } } Kotlin Cmds.getStepGoal().send { if (it.error.code == 0) { // Success // it.res is IDOStepGoalModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetDeviceName.html":{"url":"doc/get/IDOGetDeviceName.html","title":"获取手表名字","keywords":"","body":"获取手表名字 String 功能表：无 接口已废弃 示例 Swift Cmds.getDeviceName().send { rs in if case .success(let obj) = rs { // 成功 // obj is String }else { // 失败 } } Kotlin Cmds.getDeviceName().send { if (it.error.code == 0) { // 成功 // it.res is String }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:00:07 "},"doc/get/IDOGetContactReviseTime.html":{"url":"doc/get/IDOGetContactReviseTime.html","title":"Get the modification time of the firmware locally saved contact file","keywords":"","body":"Get the modification time of the contact file saved locally by the firmware IDOContactReviseTimeModel Function table: reminderGetAllContact Example Swift Cmds.getContactReviseTime().send { rs in if case .success(let obj) = rs { // success // obj is IDOContactReviseTimeModel }else { // fail } } Kotlin Cmds.getContactReviseTime().send { if (it.error.code == 0) { // success // it.res is IDOContactReviseTimeModel }else { // fail } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetUpdateStatus.html":{"url":"doc/get/IDOGetUpdateStatus.html","title":"Get the device upgrade status","keywords":"","body":"Get device upgrade status IDOUpdateStatusModel Function table: getDeviceUpdateState Example Swift Cmds.getUpdateStatus().send { rs in if case .success(let obj) = rs { // Success // obj is IDOUpdateStatusModel }else { // Failure } } Kotlin Cmds.getUpdateStatus().send { if (it.error.code == 0) { // Success // it.res is IDOUpdateStatusModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetStressVal.html":{"url":"doc/get/IDOGetStressVal.html","title":"Get stress value","keywords":"","body":"Get the pressure value IDOStressValModel Menu: setSetStressCalibration Example Swift Cmds.getStressVal().send { rs in if case .success(let obj) = rs { // success // obj is IDOStressValModel }else { // fail } } Kotlin Cmds.getStressVal().send { if (it.error.code == 0) { // success // it.res is IDOStressValModel }else { // fail } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetHeartRateMode.html":{"url":"doc/get/IDOGetHeartRateMode.html","title":"Get heart rate monitoring mode","keywords":"","body":"Get heart rate monitoring mode IDOHeartRateModeModel Function table: getHeartRateModeV2 Example Swift Cmds.getHeartRateMode().send { rs in if case .success(let obj) = rs { // Success // obj is IDOHeartRateModel }else { // Failure } } Kotlin Cmds.getHeartRateMode().send { if (it.error.code == 0) { // Success // it.res is IDOHeartRateModeModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetBatteryInfo.html":{"url":"doc/get/IDOGetBatteryInfo.html","title":"Get Battery information","keywords":"","body":"Get battery information IDOBatteryInfoModel Function table: getBatteryInfo Example Swift Cmds.getBatteryInfo().send {rs in if case .success(let obj) = rs { // Success // obj is IDOBatteryInfoModel }else { // Failure } } Kotlin Cmds.getBatteryInfo().send { if (it.error.code == 0) { // Success // it.res is IDOBatteryInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetDeviceLogState.html":{"url":"doc/get/IDOGetDeviceLogState.html","title":"Get the log status of the device","keywords":"","body":"Get the log status of the device IDODeviceLogStateModel Function table: getDeviceLogState Example Swift Cmds.getDeviceLogState().send { rs in if case .success(let obj) = rs { // Success // obj is IDODeviceLogStateModel }else { // Failure } } Kotlin Cmds.getDeviceLogState().send { if (it.error.code == 0) { // Success // it.res is IDODeviceLogStateModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetDownloadLanguage.html":{"url":"doc/get/IDOGetDownloadLanguage.html","title":"Get download language support","keywords":"","body":"Get download language support IDODownloadLanguageModel Function table: getDownloadLanguage Example Swift Cmds.getDownload Language().send { rs in if case .success(let obj) = rs { // Success // obj is IDODownloadLanguageModel }else { // Failure } } Kotlin Cmds.getDownloadLanguage().send { if (it.error.code == 0) { // Success // it.res is IDODownloadLanguageModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetMenuList.html":{"url":"doc/get/IDOGetMenuList.html","title":"Get the list of device support","keywords":"","body":"Get the list of device support IDOMenuListModel Function table: getMenuList Example Swift Cmds.getMenuList().send { rs in if case .success(let obj) = rs { // Success // obj is IDOMenuListModel }else { // Failure } } Kotlin Cmds.getMenuList().send { if (it.error.code == 0) { // Success // it.res is IDOMenuListModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetNoticeStatus.html":{"url":"doc/get/IDOGetNoticeStatus.html","title":"Get the notification center switch","keywords":"","body":"Get notification center switch IDOSetNoticeStatusModel Function table: reminderAncs Example Swift Cmds.getNoticeStatus().send { rs in if case .success(let obj) = rs { // Success // obj is IDOSetNoticeStatusModel }else { // Failure } } Kotlin Cmds.getNoticeStatus().send { if (it.error.code == 0) { // Success // it.res is IDOSetNoticeStatusModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetAlarm.html":{"url":"doc/get/IDOGetAlarm.html","title":"app gets ble alarm clock","keywords":"","body":"app to get BLE's alarm clock IDOAlarmModel Function table: Syncv3Syncalarm Example Swift Cmds.getAlarm().send { rs in if case .success(let obj) = rs { // Success // obj is IDOAlarmModel }else { // Failure } } Kotlin Cmds.getAlarm().send { if (it.error.code == 0) { // Success // it.res is IDOAlarmModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetHabitInfo.html":{"url":"doc/get/IDOGetHabitInfo.html","title":"Get user habit information","keywords":"","body":"Get user habit information IDOHabitInfoModel Function table: getSupportSedentaryTensileHabitInfo Example Swift Cmds.getHabitInfo().send { rs in if case .success(let obj) = rs { // Success // obj is IDOHabitInfoModel }else { // Failure } } Kotlin Cmds.getHabitInfo().send { if (it.error.code == 0) { // Success // it.res is IDOHabitInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetBleMusicInfo.html":{"url":"doc/get/IDOGetBleMusicInfo.html","title":"Get firmware song name and folder","keywords":"","body":"Get the song name and folder of the firmware IDOMusicInfoModel Function table: getSupportV3BleMusic getSupportGetBleMusicInfoVerV3 (secondary menu) Example Swift Cmds.getBleMusicInfo().send { rs in if case .success(let obj) = rs { // Success // obj is IDOMusicInfoModel }else { // Failure } } Kotlin Cmds.getBleMusicInfo().send { if (it.error.code == 0) { // Success // it.res is IDOMusicInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetWatchDialInfo.html":{"url":"doc/get/IDOGetWatchDialInfo.html","title":"Get screen information","keywords":"","body":"Get screen information IDOWatchDialInfoModel Function table: None Example Swift Cmds.getWatchDialInfo().send {rs in if case .success(let obj) = rs { // Success // obj is IDOWatchDialInfoModel }else { // Failure } } Kotlin Cmds.getWatchDialInfo().send { if (it.error.code == 0) { // Success // it.res is IDOWatchDialInfoModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:41 "},"doc/get/IDOGetWatchListV3.html":{"url":"doc/get/IDOGetWatchListV3.html","title":"Get watch face list v3","keywords":"","body":"Get the watch face list v3 IDOWatchListModel Function table: getNewWatchList == true Use this interface, otherwise use Get the watch face list v2 Example Swift Cmds.getWatchListV3().send { rs in if case .success(let obj) = rs { // Success // obj is IDOWatchListModel }else { // Failure } } Kotlin Cmds.getWatchListV3().send { if (it.error.code == 0) { // Success // it.res is IDOWatchListModel }else { // Failed } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:21:35 "},"doc/get/IDOGetWatchListV2.html":{"url":"doc/get/IDOGetWatchListV2.html","title":"Get watch face list v2","keywords":"","body":"Get the watch face list v2 IDOWatchListV2Model Function table: getNewWatchList == false Use this interface, otherwise use Get the watch face list v3 Example Swift Cmds.getWatchListV2().send { rs in if case .success(let obj) = rs { // Success // obj is IDOWatchListV2Model }else { // Failure } } Kotlin Cmds.getWatchListV2().send { if (it.error.code == 0) { // Success // it.res is IDOWatchListV2Model }else { // Failed } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:21:15 "},"doc/get/IDOGetLanguageLibrary.html":{"url":"doc/get/IDOGetLanguageLibrary.html","title":"Get language library list","keywords":"","body":"Get the language library list IDOLanguageLibraryModel Function table:getLangLibraryV3 Example Swift Cmds.getLanguageLibrary().send { rs in if case .success(let obj) = rs { // Success // obj is IDOLanguageLibraryModel }else { // Failure } } Kotlin Cmds.getLanguageLibrary().send { if (it.error.code == 0) { // Success // it.res is IDOLanguageLibraryModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetBleBeep.html":{"url":"doc/get/IDOGetBleBeep.html","title":"Get firmware local beep file information","keywords":"","body":"Get firmware local beep file information IDOBleBeepModel Function table:getSupportGetBleBeepV3 Example Swift Cmds.getBleBeep().send { rs in if case .success(let obj) = rs { // Success // obj is IDOBleBeepModel }else { // Failure } } Kotlin Cmds.getBleBeep().send { if (it.error.code == 0) { // Success // it.res is IDOBleBeepModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetDefaultSportType.html":{"url":"doc/get/IDOGetDefaultSportType.html","title":"Get the default sport type","keywords":"","body":"Get the default sport type IDODefaultSportTypeModel Function table:setV3GetSportSortField Example Swift Cmds.getDefaultSportType().send { rs in if case .success(let obj) = rs { // Success // obj is IDODefaultSportTypeModel }else { // Failure } } Kotlin Cmds.getDefaultSportType().send { if (it.error.code == 0) { // Success // it.res is IDODefaultSportTypeModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetSportTypeV3.html":{"url":"doc/get/IDOGetSportTypeV3.html","title":"Get the default sport type V3","keywords":"","body":"Get the default sport type V3 IDODefaultSportTypeModel Function table:setV3GetSportSortField Example Swift Cmds.getSportTypeV3().send { rs in if case .success(let obj) = rs { // Success // obj is IDODefaultSportTypeModel }else { // Failure } } Kotlin Cmds.getSportTypeV3().send { if (it.error.code == 0) { // Success // it.res is IDODefaultSportTypeModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetBtConnectPhoneModel.html":{"url":"doc/get/IDOGetBtConnectPhoneModel.html","title":"Get the BT connected phone model","keywords":"","body":"Get BT connected phone model Function table: getSupportGetV3DeviceBtConnectPhoneModel Example Swift Cmds.getBtConnectPhoneModel().send { rs in if case .success (let obj) = rs { // Success // Obj is String } else { // Failure } } kotlin Cmds.getBtConnectPhoneModel().send { if (it.error.code == 0) { // Success // it.res is String }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetUnit.html":{"url":"doc/get/IDOGetUnit.html","title":"Get the unit","keywords":"","body":"Get spp mtu length IDOUnitModel Function table: getSupportGetUnit Example Swift Cmds.getUnit().send { rs in if case .success(let obj) = rs { // Success // obj is IDOUnitModel }else { // Failure } } Kotlin Cmds.getUnit().send { if (it.error.code == 0) { // Success // it.res is IDOUnitModel? }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/get/IDOGetMtuLengthSPP.html":{"url":"doc/get/IDOGetMtuLengthSPP.html","title":"Get spp mtu length (Android)","keywords":"","body":"Get spp mtu length (Android) IDOSppMtuModel Example Kotlin Cmds.getMtuLengthSPP().send { if (it.error.code == 0) { // Success // it.res is IDOSppMtuModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOCommandIndex.html":{"url":"doc/set/IDOCommandIndex.html","title":"Set command","keywords":"","body":"Get command Send phone volume to ble - setBleVoice Set control gps - setGpsControl Smart heart rate mode setting - setHeartRateModeSmart Set stress calibration - setStressCalibration Set hand washing reminder - setHandWashingReminder Set exercise goal - setSportGoal Set weather data - setWeatherData Unread message red dot prompt switch - setUnreadAppReminder Mobile app through this Command switch to implement notification application status setting - setNotificationStatus Set scientific sleep switch - setScientificSleepSwitch Blood pressure calibration - setBpCalibration Set anti-lost - setLostFind Set dial - setWatchDial Set weather switch - setWeatherSwitch Set unit - setUnit Set to find the phone - setFindPhone Set to stop looking for the phone - setOverFindPhone Set one Key call - setOnekeySOS Set sport mode selection - setSportModeSelect Set sport mode sorting - setSportModeSort Set Sedentary - setLongSit Set heart rate mode - setHeartRateMode Set body power switch - setBodyPowerTurn Set breathing Rate switch - setRespiRateTurn Ambient volume switch and threshold - setV3Noise Set sunrise and sunset time - setWeatherSunTime Set shortcut - setShortcut Set notification center - setNoticeStatus Set night temperature switch - setTemperatureSwitch Set the sleep time period - setSleepPeriod Set the screen when raising hands - setUpHandGesture Set the medicine reminder - setTakingMedicineReminder Set blood oxygen switch - setSpo2Switch Set weather city name - setWeatherCityName App set ble alarm clock - setAlarm Fitness Guidance - setFitnessGuidance Display Mode - setDisplayMode Blood Pressure Measurement - setBpMeasurement Music switch - setMusicOnOff app issues running plan (exercise plan) - setSendRunPlan v3 issues v3 weather protocol - setWeatherV3 Control music - musicControl Operate songs or folders - setMusicOperate Static message notification - noticeMessageV3 Set message notification status - setNoticeMessageState Dynamic message notification - setNoticeAppName Delivery v3 world time - setWorldTimeV3 Set schedule reminder - setSchedulerReminder Blood pressure calibration control - setBpCalControlV3 Set watch face - setWatchFaceData Synchronize frequently used contacts - setSyncContact Set sports sub-item data arrangement - setSportParamSort New 100 sports sorting - setSport100Sort Set the sorting of main interface controls - setMainUISortV3 Distribute historical data of menstrual periods - setHistoricalMenstruation Set the sports city name - setLongCityNameV3 V3 set heart rate mode - setHeartMode Voice reply text - setVoiceReplyText Set dial order - setWatchDialSort Set multiple walking reminder time points - setWalkRemindTimes Set wallpaper dial list - setWallpaperDialReply Set time - setDateTime Set user information - setUserInfo Reboot device - reboot Restore factory settings - factoryReset Control the start of finding the device - findDeviceStart Control the end of the search for the device - findDeviceStop Start taking pictures (app -> ble) - photoStart End photo taking (app -> ble) - photoStop Set left and right hands - setHand Set screen brightness - setScreenBrightness Enter upgrade mode - otaStart Set heart rate zone - setHeartRateInterval Set calorie and distance goals( Set daily three rings) - setCalorieDistanceGoal Set walking reminder - setWalkRemind Set menstrual period - setMenstruation Set Drink water reminder - setDrinkWaterRemind Set menstrual reminder - setMenstruationRemind Set pressure switch - setStressSwitch Set voice Assistant switch - setVoiceAssistantOnOff Set Do Not Disturb mode - setNotDisturb Set menu list - setMenuList Set motion Type sorting - setSportSortV3 Set firmware call quick reply switch - setCallQuickReplyOnOff Set sports mode recognition switch - setActivitySwitch Control music start - musicStart Control music stop - musicStop APP sends pairing result - sendBindResult Set the default quick message reply list (Android) - setDefaultQuickMsgReplyList Quick SMS reply (Android) - setFastMsgUpdate Set hot start parameters - setHotStartParam Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:13:38 "},"doc/set/IDOSetBleVoice.html":{"url":"doc/set/IDOSetBleVoice.html","title":"Download mobile phone volume to ble","keywords":"","body":"Send the mobile phone volume to ble IDOBleVoiceParamModel IDOCmdSetResponseModel Function table: setSetPhoneVoice Example Swift let param = IDOBleVoiceParamModel(...) Cmds.setBleVoice(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOBleVoiceParamModel(...) Cmds.setBle Voice(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:41:48 "},"doc/set/IDOSetGpsControl.html":{"url":"doc/set/IDOSetGpsControl.html","title":"Set control gps","keywords":"","body":"Set control gps IDOGpsControlParamModel IDOGpsControlModel Function table: None Example Swift let param = IDOGpsControlParamModel(...) Cmds.setGpsControl(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOGpsControlModel }else { // Failed } } Kotlin val param = IDOGpsControlParamModel(...) Cmds.setGpsControl(param).send { if (it.error.code == 0) { // Success // it.res is IDOGpsControlModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetHeartRateModeSmart.html":{"url":"doc/set/IDOSetHeartRateModeSmart.html","title":"Smart heart rate mode Setting","keywords":"","body":"Smart heart rate mode setting IDOHeartRateModeSmartParamModel IDOCmdSetResponseModel Function table: setSmartHeartRate Example Swift let param = IDOHeartRateModeSmartParamModel(...) Cmds.setHeartRateModeSmart(param).send { rs in if case .success(let obj) = rs { // Success // ob j is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOHeartRateModeSmartParamModel(...) Cmd s.setHeartRateModeSmart(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:27:52 "},"doc/set/IDOSetStressCalibration.html":{"url":"doc/set/IDOSetStressCalibration.html","title":"Set pressure calibration","keywords":"","body":"Set pressure calibration IDOStressCalibrationParamModel IDOStressCalibrationModel Function table: setSetStressCalibration Example Swift let param = IDOStressCalibrationParamModel(...) Cmds.setStressCalibration(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOStressCalibrationModel }else { // failed } } Kotlin val param = IDOStressCalibrationParamModel(...) Cmds.setStressCalibration(param).send { if (it.error.code == 0) { // Success // it.res is IDOStressCalibrationModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetHandWashingReminder.html":{"url":"doc/set/IDOSetHandWashingReminder.html","title":"Set hand washing reminder","keywords":"","body":"Set hand washing reminder IDOHandWashingReminderParamModel IDOCmdSetResponseModel Function table: setHandWashReminder Example Swift let param = IDOHandWashingReminderParamModel(...) Cmds.setHandWashingReminder(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOHandWashingReminderParamModel(...) Cmds.setHandWashingReminder(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSportGoal.html":{"url":"doc/set/IDOSetSportGoal.html","title":"Set sports goal","keywords":"","body":"Set sports goal IDOSportGoalParamModel IDOCmdSetResponseModel Function table: getSupportWalkGoalSteps (secondary menu) getStepDataTypeV2( Secondary menu) Example Swift let param = IDOSportGoalParamModel(...) Cmds.setSportGoal(param).send { rs in if case .success(let obj ) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin val param = IDOSportGoalModel (...) Cmds.setSportGoal(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:59:20 "},"doc/set/IDOSetWeatherData.html":{"url":"doc/set/IDOSetWeatherData.html","title":"Set weather data","keywords":"","body":"Set weather data IDOWeatherDataParamModel IDOCmdSetResponseModel Function table: supportSetWeatherDataV2 Example Swift let param = IDOWeatherDataParamModel(...) Cmds.setWeatherData(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOWeatherDataParamModel(...) Cmds.setWeatherData(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetUnreadAppReminder.html":{"url":"doc/set/IDOSetUnreadAppReminder.html","title":"Unread Information red dot prompt switch","keywords":"","body":"Unread message red dot prompt switch IDOCmdSetResponseModel Function table: setSetUnreadAppReminder Example Swift Cmds.setUnreadAppReminder().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setUnreadAppReminder().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetNotificationStatus.html":{"url":"doc/set/IDOSetNotificationStatus.html","title":"The mobile app uses this command switch to set the notification application status","keywords":"","body":"The mobile app uses this command switch to implement notification application status settings IDONotificationStatusParamModel IDOCmdSetResponseModel Function table: setMsgAll Switch (Secondary menu) Example Swift let param = IDONotificationStatusParamModel(...) Cmds.setNotificationStatus(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin ```kotlin val param = IDONotificationStatus ParamModel(...) Cmds.setNotificationStatus(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } ` Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetScientificSleepSwitch.html":{"url":"doc/set/IDOSetScientificSleepSwitch.html","title":"Set scientific sleep switch","keywords":"","body":"Set scientific sleep switch IDOScientificSleepSwitchParamModel IDOCmdSetResponseModel Function table: setScientificSleepSwitch Example Swift let param = IDOScientificSleepSwitchParamModel(...) Cmds.setScientificSleepSwitch(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetRes responseModel }else { // failed } } Kotlin val param = IDOScientificSleepSwitchParamModel(...) Cmds.setScientificSleepSwitch(para m).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetBpCalibration.html":{"url":"doc/set/IDOSetBpCalibration.html","title":"Blood pressure calibration","keywords":"","body":"Blood Pressure Calibration IDOBpCalibrationParamModel IDOBpCalibrationModel Function table: getSupportBpSetOrMeasurementV2 Example Swift let param = IDOBpCalibrationParamModel(...) Cmds.setBpCalibration(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOBpCalibrationModel } else { // failed } } Kotlin val param = IDOBpCalibrationParamModel(...) Cmds.setBpCalibration(param).send { if (it.error.code == 0) { // Success // it.res is IDOBpCalibrationModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetLostFind.html":{"url":"doc/set/IDOSetLostFind.html","title":"设置防丢","keywords":"","body":"设置防丢 IDOLostFindParamModel IDOCmdSetResponseModel 功能表：supportSetAntilost 示例 Swift let param = IDOLostFindParamModel(...) Cmds.setLostFind(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOLostFindParamModel(...) Cmds.setLostFind(param).send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetWatchDial.html":{"url":"doc/set/IDOSetWatchDial.html","title":"Set the dial","keywords":"","body":"Set watch face IDOWatchDialParamModel IDOCmdSetResponseModel Function table: WatchDial Example Swift let param = IDOWatchDialParamModel(...) Cmds.setWatchDial(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel } else { // Failure } } kotlin val param = IDOWatchDialParamModel (...) cmds.setWatchDial(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:12:22 "},"doc/set/IDOSetWeatherSwitch.html":{"url":"doc/set/IDOSetWeatherSwitch.html","title":"Set the weather switch","keywords":"","body":"Set weather switch IDOCmdSetResponseModel Function table: setSetV3Weather Example Swift Cmds. setWeatherSwitch().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setWeatherSwitch().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetUnit.html":{"url":"doc/set/IDOSetUnit.html","title":" Set unit","keywords":"","body":"Set unit IDOUnitParamModel IDOCmdSetResponseModel Function table: setSupportFahrenheit (secondary menu) setSupportCalorieUnit(2 level menu) setSupportSwimPoolUnit (secondary menu) setSupportCyclingUnit (secondary menu) setSupportWalkRunUnit (secondary menu) Example Swift let param = IDOUnitParam Model(...) Cmds.setUnit(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin val param = IDOUnitParamModel(...) Cmds.setUnit(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // failed } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:59:42 "},"doc/set/IDOSetFindPhone.html":{"url":"doc/set/IDOSetFindPhone.html","title":"Set to find a mobile phone","keywords":"","body":"Set Find Phone IDOCmdSetResponseModel Function table: getFindPhone Example Swift Cmds.setFin dPhone().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setFindPhone().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetOverFindPhone.html":{"url":"doc/set/IDOSetOverFindPhone.html","title":"Set to stop searching for a mobile phone","keywords":"","body":"Set OverFindPhone IDOCmdSetResponseModel Function table: setOverFindPhone Example Swift Cmds. setOverFindPhone().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. setOverFindPhone().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetOnekeySOS.html":{"url":"doc/set/IDOSetOnekeySOS.html","title":"设置一键呼叫","keywords":"","body":"设置一键呼叫 IDOCmdSetResponseModel 功能表：supportSetOnetouchCalling 示例 Swift Cmds.setOnekeySOS().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setOnekeySOS().send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetSportModeSelect.html":{"url":"doc/set/IDOSetSportModeSelect.html","title":"Set sport mode selection","keywords":"","body":"Set motion mode selection IDOSportModeSelectParamModel IDOCmdSetResponseModel Function table: syncTimeLine Example Swift let Param = IDOSportModeSelectParamModel (...) Cmds.setSportModeSelect(param).send {rs In if case .success (let obj) = rs { // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOSportModeSelectParamModel(...) Cmds.setSportModeSelect(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSportModeSort.html":{"url":"doc/set/IDOSetSportModeSort.html","title":"Set sport mode sorting","keywords":"","body":"Set sport mode sorting IDOCmdSetResponseModel Function table: setSportModeSort Example Swift Cmds.setSportModeSort().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. setSportModeSort().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetLongSit.html":{"url":"doc/set/IDOSetLongSit.html","title":"Set sitting","keywords":"","body":"Set sedentaryness IDOLongSitParamModel IDOCmdSetResponseModel Function table: setSedentariness Example Swift let param = IDOLongSitParamModel(...) Cmds.setLongSit(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOLongSitParamModel(...) Cmds.setLongSit(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:28:08 "},"doc/set/IDOSetHeartRateMode.html":{"url":"doc/set/IDOSetHeartRateMode.html","title":"Set heart rate mode","keywords":"","body":"Set heart rate mode IDOHeartRateModeParamModel IDOHeartRateModeModel Function table: setHeartRateMode Example Swift let param = IDOHeartRateModeParamModel(...) Cmds.setHeartRateMode(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOHeartRateModelModel }else { // Failure } } Kotlin val param = IDOHeartRateModeParamModel(...) Cmds.setHeartRateMode(param).send { if (it.error.code == 0) { // Success // it.res is IDOHeartRateModeModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetBodyPowerTurn.html":{"url":"doc/set/IDOSetBodyPowerTurn.html","title":"Set body power switch ","keywords":"","body":"Set the body power switch IDOCmdSetResponseModel Function table: syncV3BodyPower Example Swift Cmd s.setBodyPowerTurn().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. setBodyPowerTurn().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetRRespiRateTurn.html":{"url":"doc/set/IDOSetRRespiRateTurn.html","title":"Set the respiration rate switch","keywords":"","body":"Set the respiration rate switch IDOCmdSetResponseModel Example Swift Cmds.setRRespiRateTurn( ).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setRRespiRateTurn().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetV3Noise.html":{"url":"doc/set/IDOSetV3Noise.html","title":"Ambient volume switch and threshold","keywords":"","body":"Switch and threshold of ambient volume IDOV3NoiseParamModel IDOCmdSetResponseModel Function table: syncV3Noise Example Swift let param = IDOV3NoiseParamModel(...) Cmds.setV3Noise(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOV3NoiseParamModel(...) Cmds.set V3Noise(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWeatherSunTime.html":{"url":"doc/set/IDOSetWeatherSunTime.html","title":"Set sunrise and sunset time","keywords":"","body":"Set sunrise and sunset time IDOWeatherSunTimeParamModel IDOCmdSetResponseModel Function table: setWeatherSunTime Example Swift let param = IDOWeatherSunTimeParamModel(...) Cmds.setWeatherSunTime(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOWeatherSunTimeParamModel(...) Cmds.setWeatherSunTime(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetShortcut.html":{"url":"doc/set/IDOSetShortcut.html","title":"Set shortcut","keywords":"","body":"Set shortcut IDOShortcutParamModel IDOCmdSetResponseModel Example Swift let param = IDOShortcutParamModel(...) Cmds.setShortcut(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failed } } Kotlin val param = IDOShortcutParamModel(...) Cmds.setShortcut(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:58:52 "},"doc/set/IDOSetNoticeStatus.html":{"url":"doc/set/IDOSetNoticeStatus.html","title":"Set notification center","keywords":"","body":"Set up the notification center IDOSetNoticeStatusModel IDONotificationCenterModel Function table: reminderAncs Example Swift let param = IDOSetNoticeStatusModel(...) Cmds.setNoticeStatus(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDONotificationCenterModel }else { // failed } } Kotlin val param = IDOSetNoticeStatusModel(...) Cmds.setNoticeStatus(param).send { if (it.error.code == 0) { // Success // it.res is IDONotificationCenterModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:58:08 "},"doc/set/IDOSetTemperatureSwitch.html":{"url":"doc/set/IDOSetTemperatureSwitch.html","title":"Set night temperature switch","keywords":"","body":"Set the night temperature switch IDOTemperatureSwitchParamModel IDOCmdSetResponseModel Function table: setTemperatureSwitchSupport Example Swift let param = IDOTemperatureSwitchParamModel(...) Cmds.setTemperatureSwitch(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOTemperatureSwitchParamModel(...) Cmds.setTemperatureSwitch(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSleepPeriod.html":{"url":"doc/set/IDOSetSleepPeriod.html","title":"设置睡眠时间段","keywords":"","body":"设置睡眠时间段 IDOSleepPeriodParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOSleepPeriodParamModel(...) Cmds.setSleepPeriod(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOSleepPeriodParamModel(...) Cmds.setSleepPeriod(param).send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetUpHandGesture.html":{"url":"doc/set/IDOSetUpHandGesture.html","title":"Set raising hand to brighten the screen","keywords":"","body":"Set up the screen when raising your hand IDOUpHandGestureParamModel IDOCmdSetResponseModel Function table: getUpHandGesture Example Swift let param = IDOUpHandGestureParamModel(...) Cmds.setUpHandGesture(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOUpHandGestureParamModel(...) Cmds.set UpHandGesture(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetTakingMedicineReminder.html":{"url":"doc/set/IDOSetTakingMedicineReminder.html","title":"设置吃药提醒","keywords":"","body":"设置吃药提醒 IDOTakingMedicineReminderParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOTakingMedicineReminderParamModel(...) Cmds.setTakingMedicineReminder(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOTakingMedicineReminderParamModel(...) Cmds.setTakingMedicineReminder(param).send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetSpo2Switch.html":{"url":"doc/set/IDOSetSpo2Switch.html","title":"Set blood oxygen switch","keywords":"","body":"Set blood oxygen switch IDOSpo2SwitchParamModel IDOCmdSetResponseModel Function table: setSpo2Data Example Swift let param = IDOSpo2SwitchParamModel(...) Cmds.setSpo2Switch(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOSpo2SwitchParamModel(...) Cmds.setSpo2Switch(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:58:56 "},"doc/set/IDOSetWeatherCityName.html":{"url":"doc/set/IDOSetWeatherCityName.html","title":"Set weather city name","keywords":"","body":"Set the weather city name IDOCmdSetResponseModel Function table: setWeatherCity Example Swift Cmds.set WeatherCityName().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. setWeatherCityName().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetAlarm.html":{"url":"doc/set/IDOSetAlarm.html","title":"App to set ble alarm clock","keywords":"","body":"app sets ble’s alarm clock IDOAlarmModel IDOCmdSetResponseModel Function table: syncV3SyncAlarm Example Swift let param = IDOAlarmModel(...) Cmds.setAlarm(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOAlarmModel(...) Cmds.setAlarm(param) .send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetFitnessGuidance.html":{"url":"doc/set/IDOSetFitnessGuidance.html","title":"Fitness Guidance","keywords":"","body":"Fitness Guidance IDOFitnessGuidanceParamModel IDOCmdSetResponseModel Function table: setSetFitnessGuidance Example Swift let param = IDOFitnessGuidanceParamModel(...) Cmds.setFitnessGuidance(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel } else { // failed } } Kotlin val param = IDOFitnessGuidanceParamModel(...) Cmds.setFitnessGuidance(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetDisplayMode.html":{"url":"doc/set/IDOSetDisplayMode.html","title":"显示模式","keywords":"","body":"显示模式 IDODisplayModeParamModel IDOCmdSetResponseModel 功能表： 示例 Swift let param = IDODisplayModeParamModel(...) Cmds.setDisplayMode(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDODisplayModeParamModel(...) Cmds.setDisplayMode(param).send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 15:43:36 "},"doc/set/IDOSetBpMeasurement.html":{"url":"doc/set/IDOSetBpMeasurement.html","title":"Blood pressure measurement","keywords":"","body":"Blood pressure measurement IDOBpMeasurementParamModel IDOBpMeasurementModel Function table: getSupportBpSetOrMeasurementV2 Example Swift let param = IDOBpMeasurementParamModel(...) Cmds.setBpMeasurement(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOBpMeasurementModel } else { // failed } } Kotlin val param = IDOBpMeasurementParamModel(...) Cmds.setBpMeasurement(param).send { if (it.error.code == 0) { // Success // it.res is IDOBpMeasurementModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetMusicOnOff.html":{"url":"doc/set/IDOSetMusicOnOff.html","title":"Music switch","keywords":"","body":"Music switch IDOMusicOnOffParamModel IDOCmdSetResponseModel Function table: setBleControlMusic Example Swift let param = IDOMusicOnOffParamModel(...) Cmds.setMusicOnOff(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel } else { // failed } } Kotlin val param = IDOMusicOnOffParamModel(...) Cmds.setMusicOnOff(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSendRunPlan.html":{"url":"doc/set/IDOSetSendRunPlan.html","title":"app Send running plan (exercise plan)","keywords":"","body":"app issues running plan (exercise plan) IDORunPlanParamModel IDOSendRunPlanModel Function table: setSupportSportPlan Example Swift let param = IDORunPlanParamModel(...) Cmds.setSendRunPlan(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOSendRunPlanModel }else { // failed } } Kotlin val param = IDORunPlanParamModel(...) Cmds.setSend RunPlan(param).send { if (it.error.code == 0) { // Success // it.res is IDOSendRunPlanModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:58:40 "},"doc/set/IDOSetWeatherV3.html":{"url":"doc/set/IDOSetWeatherV3.html","title":"v3 Send v3 weather protocol","keywords":"","body":"v3 Issue v3 weather protocol IDOWatherV3ParamModel IDOCmdSetResponseModel Function table: setSetV3Weather Example Swift let param = IDOWeatherV3ParamModel(...) Cmds.setWeatherV3(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOWeatherV3ParamModel(...) Cmds.setWeatherV3(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOMusicControl.html":{"url":"doc/set/IDOMusicControl.html","title":"Control music ","keywords":"","body":"Control music IDOMusicControlParamModel IDOCmdSetResponseModel Function table: setBleControlMusic Example Swift let param = IDOMusicControlParamModel(...) Cmds.musicControl(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel } else { // failed } } Kotlin val param = IDOMusicControlParamModel(...) Cmds.musicControl(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetMusicOperate.html":{"url":"doc/set/IDOSetMusicOperate.html","title":"Operate songs or folders","keywords":"","body":"Operate songs or folders IDOMusicOpearteParamModel IDOMusicOperateModel Example Swift let param = IDOMusicOpearteParamModel(...) Cmds.setMusicOperate (param) .send {rs In if case .success (let obj) = rs { // obj is IDOMusicOperateModel } else { // failed } } Kotlin val param = IDOMusicOpearteParamModel(...) Cmds.setMusicOperate(param).send { if (it.error.code == 0) { // Success // it.res is IDOMusicOperateModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDONoticeMessageV3.html":{"url":"doc/set/IDONoticeMessageV3.html","title":"通知消息提醒","keywords":"","body":"静态消息通知 IDONoticeMessageParamModel IDOCmdSetResponseModel 功能表：getNotifyMsgV3 示例 Swift let param = IDONoticeMessageParamModel(...) Cmds.noticeMessageV3(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDONoticeMessageParamModel(...) Cmds.noticeMessageV3(param).send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetNoticeMessageState.html":{"url":"doc/set/IDOSetNoticeMessageState.html","title":"Set message notification status","keywords":"","body":"Set message notification status IDONoticeMessageStateParamModel IDONoticeMessageStateModel Example Swift let param = IDONoticeMessageStateParamModel(...) Cmds.setNoticeMessageState(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDONoticeMessageStateModel }else { // Failed } } Kotlin val param = IDONoticeMessageStateParamModel(...) Cmds.setNoticeMessageState(param).send { if (it.error.code == 0) { // Success // it.res is IDONoticeMessageStateModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetNoticeAppName.html":{"url":"doc/set/IDOSetNoticeAppName.html","title":"Dynamic message notification","keywords":"","body":"Dynamic message notification IDONoticeMesaageParamModel IDOCmdSetResponseModel Example Swift let param = IDONoticeMesaageParamModel(...) Cmds.setNoticeAppName(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failed } } Kotlin val param = IDONoticeMesaageParamModel(...) Cmds.setNoticeAppName(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWorldTimeV3.html":{"url":"doc/set/IDOSetWorldTimeV3.html","title":" Issue v3 world time","keywords":"","body":"Issue v3 world time IDOCmdSetResponseModel IDOWorldTimeParamModel Function table: setSetV3WorldTime Example Swift let item = IDOWorldTimeParamModel(...) Cmds.setWorldTimeV3([item]).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val item = IDOWorldTimeParamModel(...) Cmds.setWorldTimeV3(listOf(item)).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:14:41 "},"doc/set/IDOSetSchedulerReminder.html":{"url":"doc/set/IDOSetSchedulerReminder.html","title":"Set schedule reminder","keywords":"","body":"Set schedule reminder IDOSchedulerReminderParamModel IDOSchedulerReminderModel Function table: setScheduleReminder Example Swift let param = IDOSchedulerReminderParamModel(...) Cmds.setSchedulerReminder(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOSchedulerReminderModel }else { // failed } } Kotlin val param = IDOSchedulerReminderParamModel(...) Cmds.setSchedulerReminder(param).send { if (it.error.code == 0) { // Success // it.res is IDOSchedulerReminderModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetBpCalControlV3.html":{"url":"doc/set/IDOSetBpCalControlV3.html","title":"Blood pressure calibration control","keywords":"","body":"Blood Pressure Calibration Control IDOBpCalControlModel Function table: setSupportV3Bp Example Swift Cmds.setBpCalCon trolV3().send { rs in if case .success(let obj) = rs { // Success // obj is IDOBpCalControlModel }else { // Failure } } Kotlin Cmds.setBpCalControlV3().send { if (it.error.code == 0) { // Success // it.res is IDOBpCalControlModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWatchFaceData.html":{"url":"doc/set/IDOSetWatchFaceData.html","title":"Set watch face","keywords":"","body":"Set the dial IDOWatchFaceParamModel IDOWatchFaceModel Function table: getMultiDial Example Swift let param = IDOWatchFaceParamModel(...) Cmds.setWatchFaceData(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOWatchFaceModel } else { // failed } } Kotlin ```kotlin val param = IDOWatchFaceParamModel(...) Cmds.setWatchFaceData(param).send { if (it.error.code == 0) { // Success // it.res is IDOWatchFaceModel }else { // Failure } } `` Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSyncContact.html":{"url":"doc/set/IDOSetSyncContact.html","title":"Synchronize frequently used contacts","keywords":"","body":"Synchronize frequently used contacts IDOSyncContactParamModel IDOSyncContactModel Function table: setSyncContact, reminderCallContact Example Swift let param = IDOSyncContactParamModel(...) Cmds.setSyncContact(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOSyncContactModel }else { // failed } } Kotlin val param = IDOSyncContactParamModel(...) Cmds.setSyncContact( param).send { if (it.error.code == 0) { // Success // it.res is IDOSyncContactModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSportParamSort.html":{"url":"doc/set/IDOSetSportParamSort.html","title":"Set the data arrangement of sports sub-items","keywords":"","body":"Set the sports sub-item data arrangement IDOSportSortParamModel IDOSportSortModel Function table: setSet20SportParamSort Example Swift let param = IDOSportSortParamModel(...) Cmds.setSportParamSort(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOSportSortModel }else { // failed } } Kotlin val param = IDOSportSortParamModel(...) Cmds.setSportParamSort( param).send { if (it.error.code == 0) { // Success // it.res is IDOSportSortModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSport100Sort.html":{"url":"doc/set/IDOSetSport100Sort.html","title":"New 100 sports sorting","keywords":"","body":"New 100 sports sorting IDOSport100SortParamModel IDOSport100SortModel Function table: getSportsTypeV3 Example Swift let param = IDOSport100SortParamModel(...) Cmds.setSport100Sort(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOSport100SortModel }else { // failed } } Kotlin val param = IDOSport100SortParamModel(...) Cmds.setS port100Sort(param).send { if (it.error.code == 0) { // Success // it.res is IDOSport100SortModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetMainUISortV3.html":{"url":"doc/set/IDOSetMainUISortV3.html","title":"Set the main Interface control sorting","keywords":"","body":"Set the main interface control sorting IDOMainUISortParamModel IDOMainUISortModel Function table: setSetMainUiSort Example Swift let param = IDOMainUISortParamModel(...) Cmds.setMainUISortV3(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOMainUISortModel }else { // Failed } } Kotlin val param = IDOMainUISortParamModel(...) Cmds.setMainUISo rtV3(param).send { if (it.error.code == 0) { // Success // it.res is IDOMainUISortModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetHistoricalMenstruation.html":{"url":"doc/set/IDOSetHistoricalMenstruation.html","title":"Distribution of historical menstrual data","keywords":"","body":"Distribution of historical menstrual data IDOHistoricalMenstruationParamModel IDOCmdSetResponseModel Function table: setHistoryMenstrual Example Swift let param = IDOHistoricalMenstruationParamModel(...) Cmds.setHistoricalMenstruation(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOHistoricalMenstruationParamModel(...) Cmds. setHistoricalMenstruation(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:27:57 "},"doc/set/IDOSetLongCityNameV3.html":{"url":"doc/set/IDOSetLongCityNameV3.html","title":"设置运动城市名称","keywords":"","body":"设置运动城市名称 IDOCmdSetResponseModel 示例 Swift Cmds.setLongCityNameV3().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setLongCityNameV3().send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetHeartMode.html":{"url":"doc/set/IDOSetHeartMode.html","title":"V3 set heart rate mode","keywords":"","body":"V3 set heart rate mode IDOHeartModeParamModel IDOHeartModeModel Function table: syncHeartRateMonitor Example Swift let param = IDOHeartModeParamModel(...) Cmds.setHeartMode(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOHeartModeModel }else { // failed } } Kotlin val param = IDOHeartModeParamModel(...) Cmds.setHeartMode(param).send { if (it.error.code == 0) { // Success // it.res is IDOHeartModeModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetVoiceReplyText.html":{"url":"doc/set/IDOSetVoiceReplyText.html","title":"Voice reply text","keywords":"","body":"Voice reply text IDOVoiceReplyParamModel IDOCmdSetResponseModel Function table: getSportsTypeV3 Example Swift let param = IDOVoiceReplyParamModel(...) Cmds.setVoiceReplyText(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOVoiceReplyParamModel(...) Cmds.setVoiceReplyText(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWatchDialSort.html":{"url":"doc/set/IDOSetWatchDialSort.html","title":"Set the dial order","keywords":"","body":"Set the dial order IDOWatchDialSortParamModel IDOCmdSetResponseModel Function table: setWatchDialSort Example Swift let param = IdowatchDialSortparammodel (...) Cmds.setWatchDialSort(param).send {rs in if case .success (let obj) = rs { // obj is IDOCmdSetResponseModel }else { // Failed } } Kotlin val param = IDOWatchDialSortParamModel(...) Cmds.setWatchDialSort(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWalkRemindTimes.html":{"url":"doc/set/IDOSetWalkRemindTimes.html","title":"Set multiple walking reminder time points","keywords":"","body":"Set multiple walking reminder time points IDOWalkRemindTimesParamModel IDOCmdSetResponseModel Function table: setWalkReminderTimeGoal Example Swift let param = IDOWalkRemindTimesParamModel(...) Cmds.setWalkRemindTimes(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOWalkRemindTimesParamModel(...) Cmds.setWalkRemindTimes(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWallpaperDialReply.html":{"url":"doc/set/IDOSetWallpaperDialReply.html","title":"Set wallpaper dial list","keywords":"","body":"Set wallpaper dial list IDOWallpaperDialReplyV3ParamModel IDOWallpaperDialReplyV3Model Function table: setWatchPhotoPositionMo ve Example Swift let param = IDOWallpaperDialReplyV3ParamModel(...) Cmds.setWallpaperDialReply(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOWallpaperDial ReplyV3Model }else { // failed } } Kotlin val param = IDOWallpaperDialReplyV3ParamModel(...) Cmds.setWallpaperDialReply (param).send { if (it.error.code == 0) { // Success // it.res is IDOWallpaperDialReplyV3Model }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetDateTime.html":{"url":"doc/set/IDOSetDateTime.html","title":"Set time ","keywords":"","body":"Set time IDODateTimeParamModel IDOCmdSetResponseModel Example S swift let param = IDODateTimeParamModel(...) Cmds.setDateTime(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { / / failed } } Kotlin ```kotlin val param = IDODateTimeParamModel(...) Cmds.setDateTime(param).send { if (it.error.code == 0 ) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } `` Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetUserInfo.html":{"url":"doc/set/IDOSetUserInfo.html","title":"Set user information","keywords":"","body":"Set user information IDOCmdSetResponseModel IDOUserInfoPramModel Example Swift let param = IDOUserInfoPramModel(...) Cmds.setUserInfo(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setWorldTimeV3().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { / / failed } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOReboot.html":{"url":"doc/set/IDOReboot.html","title":"Restart the device","keywords":"","body":"Reboot the device IDOCmdSetResponseModel Example Swift Cmds.reboot().send { rs in if case .success (let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.reboot( ).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOFactoryReset.html":{"url":"doc/set/IDOFactoryReset.html","title":"Restore factory settings","keywords":"","body":"Restore factory settings IDOCmdSetResponseModel Example Swift Cmds.factoryReset().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.factoryRe set().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:27:37 "},"doc/set/IDOFindDeviceStart.html":{"url":"doc/set/IDOFindDeviceStart.html","title":"Control the start of finding the device","keywords":"","body":"Control finding device start IDOCmdSetResponseModel Example Swift Cmds.findDeviceStart().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds .findDeviceStart().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOFindDeviceStop.html":{"url":"doc/set/IDOFindDeviceStop.html","title":"Control the start of the search for the device End","keywords":"","body":"Control the end of finding device IDOCmdSetResponseModel Example Swift Cmds.findDeviceStop().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds .findDeviceStop().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOPhotoStart.html":{"url":"doc/set/IDOPhotoStart.html","title":"Start taking photos (app -> ble)","keywords":"","body":"Start taking photos (app -> ble) IDOCmdSetResponseModel Example Swift Cmds.photoStart( ).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. photoStart().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOPhotoStop.html":{"url":"doc/set/IDOPhotoStop.html","title":"End taking photos (app -> ble) )","keywords":"","body":"End photo taking (app -> ble) IDOCmdSetResponseModel Example Swift Cmds.photoStop( ).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. photoStop().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetHand.html":{"url":"doc/set/IDOSetHand.html","title":"Set left and right hands","keywords":"","body":"Set left and right hands IDOCmdSetResponseModel Example Swift Cmds.setHand().send { rs in if case .success (let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setHand( ).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetScreenBrightness.html":{"url":"doc/set/IDOSetScreenBrightness.html","title":"Set screen brightness","keywords":"","body":"Set screen brightness IDOScreenBrightnessModel IDOCmdSetResponseModel Function table: setScreenBrightness Example Swift let param = IDOScreenBrightnessModel(...) Cmds.setScreenBrightness(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOScreenBrightnessModel(...) Cmds.setScreenBrightness(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:58:30 "},"doc/set/IDOOtaStart.html":{"url":"doc/set/IDOOtaStart.html","title":"Enter upgrade mode","keywords":"","body":"Enter upgrade mode IDOCmdOTAResponseModel Example Swift Cmds.otaStart().send { rs in if case . success(let obj) = rs { // Success // obj is IDOCmdOTAResponseModel }else { // Failure } } Kotlin Cmds.otaStart( ).send { if (it.error.code == 0) { // Success // it.res is IDOCmdOTAResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetHeartRateInterval.html":{"url":"doc/set/IDOSetHeartRateInterval.html","title":"Set heart rate interval","keywords":"","body":"Set heart rate interval IDOHeartRateIntervalModel IDOCmdSetResponseModel Function table: syncHeartRate Example Swift let param = IDOHeartRateIntervalModel(...) Cmds.setHeartRateInterval(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOHeartRateIntervalModel(...) Cmds.setHeartRateInterval(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetCalorieDistanceGoal.html":{"url":"doc/set/IDOSetCalorieDistanceGoal.html","title":"Set calories and Distance goal (set daily three rings)","keywords":"","body":"Set calorie and distance goals (set daily three-ring) IDOMainSportGoalModel IDOCmdSetResponseModel Function table: setCalorieGoal Example Swift let param = IDOMainSportGoalModel(...) Cmds.setCalorieDistanceGoal(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin val param = IDOMainSportGoalModel(...) Cmds.setCalorieDistanceGoal(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetWalkRemind.html":{"url":"doc/set/IDOSetWalkRemind.html","title":"Set walking reminder","keywords":"","body":"Set walking reminder IDOWalkRemindModel IDOCmdSetResponseModel Function table: setWalkReminder Example Swift let param = IDOWalkRemindModel(...) Cmds.setWalkRemind(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOWalkRemindModel(...) Cmds.setWalkRemind(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetMenstruation.html":{"url":"doc/set/IDOSetMenstruation.html","title":"设置经期","keywords":"","body":"设置经期 IDOMenstruationModel IDOCmdSetResponseModel 示例 Swift let param = IDOMenstruationModel(...) Cmds.setMenstruation(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOMenstruationModel(...) Cmds.setMenstruation(param).send { if (it.error.code == 0) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:43:51 "},"doc/set/IDOSetDrinkWaterRemind.html":{"url":"doc/set/IDOSetDrinkWaterRemind.html","title":"Set drinking water reminder","keywords":"","body":"Set water reminder IDODrinkWaterRemindModel IDOCmdSetResponseModel Example Swift let param = IDODrinkWaterRemindModel(...) Cmds.setDrinkWaterRemind(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failed } } Kotlin val param = IDODrinkWaterRemindModel(...) Cmds.setDrinkWaterRemind(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetMenstruationRemind.html":{"url":"doc/set/IDOSetMenstruationRemind.html","title":"Set menstruation reminder","keywords":"","body":"Set menstruation reminder IDOMenstruationRemindParamModel IDOCmdSetResponseModel Function table: setMenstruation # Example Swift let param = IDOMenstruationRemindParamModel(...) Cmds.setMenstruationRemind(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOMenstruationRemindParamModel(...) Cmds.setMenstruationRemind(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetStressSwitch.html":{"url":"doc/set/IDOSetStressSwitch.html","title":"Set the pressure switch","keywords":"","body":"Set the pressure switch IDOStressSwitchParamModel IDOCmdSetResponseModel Function table: setPressureData Example Swift let param = IDOStressSwitchParamModel(...) Cmds.setStressSwitch(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOStressSwitchParamModel(...) Cmds.setStressSwitch(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetVoiceAssistantOnOff.html":{"url":"doc/set/IDOSetVoiceAssistantOnOff.html","title":"Set the voice assistant switch","keywords":"","body":"Set the voice assistant switch IDOCmdSetResponseModel Function table: getSupportSetVoiceAssistantStatus Example Swift Cmds.setVoiceAssistantOnOff().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds. setVoiceAssistantOnOff().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetNotDisturb.html":{"url":"doc/set/IDOSetNotDisturb.html","title":"Set the do not disturb mode ","keywords":"","body":"Set Do Not Disturb mode IDONotDisturbParamModel IDOCmdSetResponseModel Function table: setDoNotDisturb Example Swift let param = IDONotDisturbParamModel(...) Cmds.setNotDisturb(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin val param = IDONotDisturbParamModel(...) Cmds.setNotDisturb(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetMenuList.html":{"url":"doc/set/IDOSetMenuList.html","title":"Set menu list","keywords":"","body":"Set menu list IDOMenuListParamModel IDOCmdSetResponseModel Function table: setMenuListMain7 Example Swift let param = IDOMenuListParamModel(...) Cmds.setMenuList(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOMenuListParamModel(...) Cmds.setMenuList(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetSportSortV3.html":{"url":"doc/set/IDOSetSportSortV3.html","title":"Set motion type sorting","keywords":"","body":"Set sports type sorting IDOSportParamModel IDOCmdSetResponseModel Function table: getSportsTypeV3 Example Swift let param = IDOSportParamModel(...) Cmds.setSportSortV3(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOSportParamModel(...) Cmds.setSportSortV3(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetCallQuickReplyOnOff.html":{"url":"doc/set/IDOSetCallQuickReplyOnOff.html","title":"Set the firmware quick reply switch for incoming calls","keywords":"","body":"Set the firmware call quick reply switch IDOCmdSetResponseModel Function table: setSupportSetCallQuickReplyOnOff Example Swift Cmds.setCallQuickReplyOnOff().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // Failure } } Kotlin Cmds.setCallQuickReplyOnOff().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetActivitySwitch.html":{"url":"doc/set/IDOSetActivitySwitch.html","title":"Set the sports mode recognition switch","keywords":"","body":"Set the motion mode recognition switch IDOActivitySwitchParamModel IDOCmdSetResponseModel Function table: setActivitySwitch Example Swift let param = IDOActivitySwitchParamModel(...) Cmds.setActivitySwitch(param).send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin val param = IDOActivitySwitchParamModel(...) Cmds.setActivity Switch(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOMusicStart.html":{"url":"doc/set/IDOMusicStart.html","title":"Control music start","keywords":"","body":"Control music start Example Swift Cmds.musicStart().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin Cmds.musicStart().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOMusicStop.html":{"url":"doc/set/IDOMusicStop.html","title":"Control music stop","keywords":"","body":"Control music stop Example Swift Cmds.musicStop().send { rs in if case .success(let obj) = rs { // Success // obj is IDOCmdSetResponseModel }else { // failed } } Kotlin Cmds.musicStop().send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSendBindResult.html":{"url":"doc/set/IDOSendBindResult.html","title":"APP issues pairing result","keywords":"","body":"Quick SMS Reply (Android) IDOFastMsgUpdateParamModel Example The watch receives a message notification, click Quick Reply to view the message details, and receive the following notification, The results are subject to notification. Refer to Full process This command attribute replies to the device and is valid when receiving firmware notification. override fun listenDeviceNotification(status: IDODeviceNotificationModel) { println(\"listenDeviceNotification $status\"); // Quick SMS reply if (status.controlEvt == 580 && status.controlJson != null) { println(\"status.controlJson: ${status.controlJson}\") // 1 means a quick reply to an incoming call if (msgItem.msgType == 1) { // TODO: Call the android system here to send a quick reply to The third app, and get the reply result // val isSuccess = if (reply result) 1 else 0 var param = IDOFastMsgUpdateParamModel(1,msgItem.msgID, msgItem.msgType, msgItem.msgNotice) Cmds.setFastMsgUpdate(param) .send { println(\"setFastMsgUpdate ${it.res?.toJsonString()}\") } }else{ // Third-party message // TODO: Call the android system here to send a quick reply to the third app , and get the reply result // val isSuccess = if (reply result) 1 else 0 var param = IDOFastMsgUpdateParamModel(1,msgItem.msgID, msgItem.msgType, msgItem.msgNotice) Cmds.setFastMsgUpdate(param).send { println(\"setFastMsgUpdate ${it.res?.toJsonString()}\") } } } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDODefaultQuickMsgReply.html":{"url":"doc/set/IDODefaultQuickMsgReply.html","title":"Set the default quick message reply list (Android)","keywords":"","body":"Set the default quick message reply list (Android) IDOFastMsgSettingModel Example Kotlin val param = IDOFastMsg SettingModel(0, listOf ( IDOFastMsgItem(1, \"test1\"), IDOFastMsgItem(2, \"test2\"), IDOFastMsgItem(3, \"test3\"), IDOFastMsgItem(4, \"test4\"), IDOFastMsgItem(5, \"test5\") )) Cmds.setDefaultQuickMsgReplyList(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/set/IDOSetHotStartParam.html":{"url":"doc/set/IDOSetHotStartParam.html","title":"Set hot start parameters","keywords":"","body":"Set hot start parameters IDOGpsHotStartParamModel IDOCmdSetResponseModel Example Swift let param = IDOGpsHotStartParamModel (...) Cmds.setHotStartParam (param).send {rs In if case .success (let obj) = rs { // obj is IDOCmdSetResponseModel } else { // Failed } } Kotlin val param = IDOGpsHotStartParamModel(...) Cmds.setHotStartParam(param).send { if (it.error.code == 0) { // Success // it.res is IDOCmdSetResponseModel }else { // Failure } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/syncData/IDOSyncData.html":{"url":"doc/syncData/IDOSyncData.html","title":"Data synchronization","keywords":"","body":"Data synchronization function Functional Overview Synchronizing device data is a very important feature. It is recommended not to execute other commands during the synchronization process. Progress will be returned during the synchronization process and the completion status will be returned after each item is synchronized. Determine whether the synchronization is completed based on the synchronization status. The synchronization log will be recorded during the synchronization process. SyncDataInterface Attributes status Sync status method startSync(funcProgress:funcData:funcCompleted:) Start syncing all data Parameters: funcProgress: synchronization data progress callback funcData: synchronous data callback funcCompleted: synchronous completion callback stopSync() Stop syncing all data type of data Exercise data Heart rate data Sleep data Blood pressure data Blood oxygenation data Pressure data Noise data Pipe temperature data Respiratory rate data HRV data Multi-sport data GPS data Swimming Data Example Swift /// Start synchronization sdk.syncData.startSync { progress in print(\"sync data progress:\\(progress)\") } funcData: { type, jsonStr, errorCode in print(\"sync data type:\\(type) jsonStr:\\(jsonStr) errCode:\\(errorCode)\") } funcCompleted: { errorCode in print(\"sync data done errCode:\\(errorCode)\") } /// End synchronization sdk.syncData.stopSync() Kotlin: /// Start synchronization sdk.syncData.startSync({ progress -> print(\"sync data progress:$progress\") }, { type, jsonStr, errorCode -> print(\"sync data type:$type, jsonStr:$jsonStr, errCode:$errorCode\") }, { errorCode -> print(\"sync data done errCode:$errorCode\") }) /// End synchronization sdk.syncData.stopSync() Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:21:57 "},"doc/syncData/IDOSyncActivityData.html":{"url":"doc/syncData/IDOSyncActivityData.html","title":" Synchronize multi-sport data","keywords":"","body":"Synchronize multi-sport data HRV iOS: IDOSyncDataType.activity Android : IDOSyncDataType.ACTIVITY json field received by App: Field name Field type Field description version int Protocol version numberThe version number of this message defaults to 0 setSupportSportPlan menu is enabled version=16,syncRealTimeV3 menu is enabled version=32 data_length int Data lengthThe value is 0 when the firmware opens the menu setSupportSportPlan(version=16) or syncRealTimeV3(version=32) packet_count int Number of packets The value is 0 when the firmware opens the menu setSupportSportPlan(version=16) or syncRealTimeV3(version=32) year int data date year month int data date month day int data date day hour int data date hour minute int data date minute second int data date seconds type int Sports enum connect_app int Whether the bracelet is connected to the app, and what kind of report will be generated by using the app evaluation1 means connected, 0 means not connected sport_start_type int 0: invalid, 1: sport initiated by app, 2: sport initiated by watch hr_data_interval_minute int Heart rate data interval unit minutes step int number of steps durations int Exercise durationUnit: secondsEnd time description:MenusyncHealthSyncV3ActivityEndTimeUseUtcMode is not turned on, the exercise end time = start Time + exercise durationAfter the function table syncHealthSyncV3ActivityEndTimeUseUtcMode is turned on, the exercise end time is passed through the fields end_month & end_day & end_hour & end_minute & end_year & end_sec calories int calories Unit: kilocalories distance int distance Unit: meters avg_hr_value int Average heart rate valueUnit: BPM max_hr_value int Maximum heart rate valueUnit: BPM min_hr_value Int Minimum heart rate valuesetSupportSportPlan or getOxygenDataSupportGradeV3 Returns 0 when the menu is not opened avg_step_frequency int Average step frequency Unit: steps/minute max_step_frequency int Maximum step frequency Unit: steps/minute avg_step_stride int Average strideUnit: cm max_step_stride int Maximum strideUnit: cm avg_speed int average speed km/h firmware is expanded 100 times max_speed int Maximum speed km/h firmware is expanded 100 times avg_pace_speed int The average pace is transmitted in seconds For example, 361 361/60=6 points and the remainder is 1s 6''1', Kilometers and miles are based on miles = kilometers*1609/ 1000fsetSupportSportPlan or getOxygenDataSupportGradeV3 Returns 0 when the menu is not opened max_pace_speed int The fastest pacesetSupportSportPlan or getOxygenDataSupportGradeV3 Returns 0 when the menu is not opened avg_km_speed int The average kilometer speed is transmitted in seconds For example, 361 361/60=6 points and the remainder is 1s 6''1', Kilometers and miles are based on miles = kilometers * 1609 /1000f max_km_speed int Fastest kilometer paceTime required per kilometer (seconds) warm_up_mins int The cumulative duration of warm-up exercise in minutes fat_burning_mins int Cumulative fat burning time in minutes aerobic_exercise_mins int The cumulative duration of aerobic exercise in minutes anaerobic_exercise_mins int The cumulative duration of anaerobic exercise in minutes extreme_exercise_mins int The cumulative duration of extreme exercise in minutes warm_up_sec int The cumulative duration of warm-up exercise in seconds fat_burning_sec int Cumulative fat burning time in seconds aerobic_exercise_sec int The cumulative duration of aerobic exercise in seconds anaerobic_exercise_sec int The cumulative duration of anaerobic exercise in seconds extreme_exercise_sec Int The cumulative duration of extreme exercise in seconds vo2max Int Maximum oxygen uptake Unit: ml/kg/minRange 0-80 Do not magnify 100 times (the field is first) grade Int VO2 grade1: Low 2: Amateur 3: Average4: Average 5: Good 6: Excellent 7: ProfessionalsetSupportSportPlan or getOxygenDataSupportGradeV3 Valid if the firmware is enabled, otherwise it is 0. If it is 0, it does not support the oxygen uptake level recovery_time_year int Recovery time point yearsetSyncV3ActivityAddParam or syncRealTimeV3 Returned when the menu is not opened0 recovery_time_mon int Recovery time point monthsetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened recovery_time_day int Recovery time point daysetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened recovery_time_hour int At the recovery time pointsetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened recovery_time_min int Recovery time pointsetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened recovery_time_s int Recovery time point in secondssetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened training_effect int Training effect Unit: None Range: 1.0 - 5.0 (expand transmission 10 times)setSyncV3ActivityAddParam or syncRealTimeV3 Return 0 when the menu is not opened mi_speed_count int Mile pace count hr_item_count int Heart rate count activity_data_item_count int Number of Humboldt custom data field details, one saved per minute km_speed_count int Number of kilometers pace maximum 100 mi_speed_count int Mile pace count pace_count int The number of real-time pacesetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened frequency_count int number of steps paddle_number_count int Number of paddles setSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened paddle_frequency_count int Number of paddle frequencies setSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened tread_frequency_count int Tread frequency number V3_sync_v3_activity_add_param orv3_support_activity_sync_real_timereturns 0 when the menu is not opened real_speed_count int Real-time speed countReturns 0 when the syncRealTimeV3 menu is not opened end_month int Exercise end time monthConsidering that the user pauses exercise after exercise, resulting in a difference between the exercise end time after exercise and the app's exercise end time,the exercise ends at this time The time is returned by the firmware,If the protocol is not supported, the app can return 0 to determine whether the month is 0Determine whether to use the following fields as the exercise end timesetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened end_day int Exercise end time daysetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened end_hour int Exercise end timesetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened end_minute int Exercise end time minuteV3_sync_v3_activity_add_param orv3_support_activity_sync_real_timereturns 0 when the menu is not opened training_offset int Training course date offset starts from zerosetSupportSportPlanReturns 0 when the menu is not opened act_type int Plan type:1: Running plan 3km2: Running plan 5km3: Running plan 10km4: Half marathon training (Phase 2)5: Marathon training (Phase 2) 64: 6-minute easy run65: 10-minute easy run66: 15-minute easy run67: A combination of walking and running Beginner68: Walking and running combined with advanced69: Walking and running combined with strengthening70: Stretching after runningsetSupportSportPlanReturn when the menu is not open 0 in_class_calories int Exercise calories in the course in kilocalories completion_rate int Action completion rate 0—100 hr_completion_rate int Heart rate control rate 0—100 smart_competitor int 0: Invalid 1: Non-intelligent running exercise 2: Intelligent running exerciseThe menu supportSmartCompetitor is enabled and valid ai_image_id int ai image IDMenu supportSmartCompetitor is enabled when enabled user_image_id int User image IDMenu supportSmartCompetitor is enabled when enabled bg_image_id int Background image IDMenu supportSmartCompetitor is enabled when enabled smart_competitor_pace int Intelligent running opponent paceThe menu supportSmartCompetitor is enabled and valid warm_up_performance int Warm-up performance 0-100 setSupportSportPlan and supportWarmUpBeforeRunningEnabled gps_status int GPS status0: invalid 1: enabled 2: not enabled (distance is displayed when not enabled, 3D distance is displayed when enabled)setSupportSportPlan & version=0x30 Valid when distance3d int 3d distance in meterssupportSyncActivityData3dDistanceSpeed, Valid when setSupportSportPlan & version=0x30 avg_3d_speed int Average 3d speed unit km/h App receives the required /100 to expand the transmission by 100 timessupportSyncActivityData3dDistanceSpeed, valid when setSupportSportPlan & version=0x30 avg_vertical_speed int Average vertical speed unit m/h app receives the required /10 to expand the transmission by 10 timessupportSyncActivityDataAvgSlope, Valid when setSupportSportPlan & version=0x30 avg_slope int Average slope unit degree -90 ~ 90supportSyncActivityDataAvgSlope, Valid when setSupportSportPlan & version=0x30 max_altitude int Maximum altitude in meters-500 ~ 9000getSupportSyncActivityDataAltitudeInfo, Valid when setSupportSportPlan & version=0x30 mix_altitude int Minimum altitude in meters-500 ~ 9000getSupportSyncActivityDataAltitudeInfo, Valid when setSupportSportPlan & version=0x30 cumulative_altitude_rise int Cumulative altitude rise in metersgetSupportSyncActivityDataAltitudeInfo, Valid when setSupportSportPlan & version=0x30 cumulative_altitude_loss int Cumulative altitude loss in metersgetSupportSyncActivityDataAltitudeInfo, Valid when setSupportSportPlan & version=0x30 altitude_count int Number of altitude detailsgetSupportSyncActivityDataAltitudeInfo, Valid when setSupportSportPlan & version=0x30 avg_altitude int Average altitude in meters -500 ~ 9000getSupportSyncActivityDataAltitudeInfo, Valid when setSupportSportPlan & version=0x30 act_count int Number of action details hr_data_vlaue int [] Heart rate data details frequency_items int [] Cadence data details items_mi_speed int [] Mile pace details pace_speed_items int [] Real-time pace detailssetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened paddle_number_items int [] Paddle detailssetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened paddle_frequency_items int [] Paddle frequency detailssetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened tread_frequency_items int [] Tread frequency detailssetSyncV3ActivityAddParam or syncRealTimeV3 Returns 0 when the menu is not opened act_items int [] Action details Returns 0 when the setSupportSportPlan menu is not opened item_real_speed_temp int [] Real-time speed detailsReturns 0 when the setSupportSportPlan menu is enabledReturns 0 when the syncRealTimeV3 menu is not enabled altitude_item int [] Altitude data unit meter range -500~9000getSupportSyncActivityDataAltitudeInfo&valid when setSupportSportPlan & version=0x30 items collection Humboldt custom field data details,Collection of steps & calories & distance items_km_speed Collection Kilometer pace data details, collection of second Field name Field type Field description steps int cadence calories int calories distance int DistanceUnit: meters Field name Field type Field description second int Kilometer paceUnit: seconds Example { \"act_type\" : 0, \"action_temp\" : null, \"activity_data_item_count\" : 0, \"aerobic_exercise_mins\" : 0, \"aerobic_exercise_sec\" : 0, \"anaerobic_exercise_mins\" : 0, \"anaerobic_exercise_sec\" : 0, \"avg_hr_value\" : 0, \"avg_km_speed\" : 0, \"avg_pace_speed\" : 0, \"avg_speed\" : 0, \"avg_step_frequency\" : 0, \"avg_step_stride\" : 0, \"calories\" : 0, \"completion_rate\" : 0, \"connect_app\" : 0, \"data_length\" : 0, \"day\" : 0, \"distance\" : 0, \"durations\" : 0, \"end_day\" : 0, \"end_hour\" : 0, \"end_minute\" : 0, \"end_month\" : 0, \"extreme_exercise_mins\" : 0, \"extreme_exercise_sec\" : 0, \"fat_burning_mins\" : 0, \"fat_burning_sec\" : 0, \"frequency_count\" : 0, \"frequency_items\" : [], \"grade\" : 0, \"hour\" : 0, \"hr_completion_rate\" : 0, \"hr_data_interval_minute\" : 0, \"hr_data_vlaue\" : [0], \"hr_item_count\" : 0, \"in_class_calories\" : 0, \"item_real_speed_temp\" : [], \"items\" : [{\"steps\":0,\"calories\":0,\"distance\":0}], \"items_km_speed\" : [{\"second\":0}], \"items_mi_speed\" : [], \"km_speed_count\" : 0, \"max_hr_value\" : 0, \"max_km_speed\" : 0, \"max_pace_speed\" : 0, \"max_speed\" : 0, \"max_step_frequency\" : 0, \"max_step_stride\" : 0, \"mi_speed_count\" : 0, \"min_hr_value\" : 0, \"minute\" : 0, \"month\" : 0, \"pace_count\" : 0, \"pace_speed_items\" : [], \"packet_count\" : 0, \"paddle_frequency_count\" : 0, \"paddle_frequency_items\" : [], \"paddle_number_count\" : 0, \"paddle_number_items\" : [], \"real_speed_count\" : 0, \"recovery_time_day\" : 0, \"recovery_time_hour\" : 0, \"recovery_time_min\" : 0, \"recovery_time_mon\" : 0, \"recovery_time_s\" : 0, \"recovery_time_year\" : 0, \"second\" : 0, \"sport_start_type\" : 0, \"step\" : 0, \"training_effect\" : 0, \"training_offset\" : 0, \"tread_frequency_count\" : 0, \"tread_frequency_items\" : [], \"type\" : 0, \"vO2max\" : 0, \"version\" : 0, \"warm_up_mins\" : 0, \"warm_up_sec\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:18:03 "},"doc/syncData/IDOSyncBpData.html":{"url":"doc/syncData/IDOSyncBpData.html","title":"Synchronize blood pressure data","keywords":"","body":"Synchronize blood pressure data blood pressure iOS: IDOSyncDataType.bloodPressure Android : IDOSyncDataType.BLOODPRESSURE json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day start_time int Start time, unit second, offset from 0 point sleep_avg_bp int Sleep average blood pressure value max_bp int Maximum blood pressure item_count int Number of blood pressure details items Collection Blood pressure details, collection of offset&sys_blood&dias_blood Field name Field type Field description offset int Data offset unit: minutes (blood pressure data interval is offset by minutes) sys_blood int Maximum systolic blood pressure dias_blood int minimum systolic blood pressure Example { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"sleep_avg_bp\":0, \"max_bp\":0, \"item_count\":3, \"items\":[ { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 }, { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 }, { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:18:35 "},"doc/syncData/IDOSyncGpsData.html":{"url":"doc/syncData/IDOSyncGpsData.html","title":"Synchronize GPS data","keywords":"","body":"Synchronize GPS data GPS iOS: IDOSyncDataType.gPS Android: IDOSyncDataType.GPS json field received by App: Field name Field type Field description year int Data date year month int data date month day int data date day hour int data date hour minute int data date minute second int data date second data_interval int data offset string_items char [] GPS array details Example { \"year\":2022, \"month\":12, \"day\" :26, \"hour\":10, \"minute\":10, \"second\":10, \"data_interval\":0, \"stringItems\" : [ \"11359.217000E,2240.776500N\", \"113 59.217700 E,2240.775900N\", \"11359.218200E,2240.775600N\", \"11359.218300E,2240.775700N\", \"11359.218400E,2240.776200N\", \"11359.218600E,2240.776800N\", \"11359.218600E,2240.777000N\" , \"11359.218700E,2240.777300N\", \"11359.218800E,2240.777300N\", \"11359.218900E,2240.777200N\", \"11359.2188 00E,2240.777500N\" ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/syncData/IDOSyncHrData.html":{"url":"doc/syncData/IDOSyncHrData.html","title":"Synchronize Heart rate data","keywords":"","body":"Synchronize heart rate data Heart rate iOS: IDOSyncDataType.heartRate Android : IDOSyncDataType.HEARTRATE json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day start_time int Start time, unit second, offset from 0 point data_type int 0 is invalid, 1 is a value, 2 is the maximum and minimum value (reserved field) silent_hr int Resting heart rate five_min_max_data int Five-minute maximum heart rate five_min_min_data int Five-minute minimum heart rate five_min_avg_data int Five-minute heart rate average five_min_data int [] All five-minute heart rate values hr_data_count int The number of heart rate data when it is too high or too low When the getSupportSyncOverHighLowHeartData menu is not opened, it returns 0 hr_interval Collection 5 heart rate zones:Warm-up heart rate zoneUltimate heart rate zoneFat-burning heart rate zoneAerobic endurance heart rate zoneAnaerobic endurance heart rate zone Collection of threshold & minute items Collection Collection of heart rate data offset & heart_rateVal hr_data Collection Collection of high and low heart rate data hour & minute & type & heart_rate Returns 0 when the getSupportSyncOverHighLowHeartData menu is not opened Field name Field type Field description offset int offset in seconds heart_rateVal int heart rate value Field name Field type Field description threshold int threshold minute int minute Field name Field type Field description hour int The heart rate data time when it is too high or too low. Returns 0 when the getSupportSyncOverHighLowHeartData menu is not opened minute int The heart rate data time minute when it is too high or too low Returns 0 when the getSupportSyncOverHighLowHeartData menu is not opened type int Heart rate value type 0: Heart rate value when the heart rate is too low 1: Heart rate value when the heart rate is too high Returns 0 when the getSupportSyncOverHighLowHeartData menu is not opened heart_rate int Heart rate value Unit: beats/minute Returns 0 when the getSupportSyncOverHighLowHeartData menu is not opened Example { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":0, \"silent_hr\":85, \"five_min_max_data\":0, \"five_min_min_data\":0, \"five_min_avg_data\":0, \"hr_data_count\":2, \"five_min_data\":[ 85, 90, 80, 83 ], \"hr_interval\":[ { \"threshold\": 80, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 } ], \"items\":[ { \"offset\":80, \"heart_rateVal\":5 }, { \"offset\":83, \"heart_rateVal\":5 } ], \"hr_data\":[ { \"hour\":11, \"minute\":25, \"type\":1, \"heart_rate\":120 }, { \"hour\":11, \"minute\":25, \"type\":0, \"heart_rate\":70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:27:52 "},"doc/syncData/IDOSyncHrvData.html":{"url":"doc/syncData/IDOSyncHrvData.html","title":"Sync HRV data","keywords":"","body":"Synchronize HRV data HRV iOS: IDOSyncDataType.hRV Android: IDOSyncDataType.HRV json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day start_time int Start time, unit seconds, offset from 0 point items Collection HRV data details, collection of min_offset&hrv_value Field name Field type Field description min_offset int Default offset unit minutes hrv_value int HRV data Example { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"items\":[ { \"min_offset\":5, \"hrv_value\":0 }, { \"min_offset\":5, \"hrv_value\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/syncData/IDOSyncNoiseData.html":{"url":"doc/syncData/IDOSyncNoiseData.html","title":"Synchronize ambient volume data","keywords":"","body":"Synchronize ambient volume data Ambient volume iOS: IDOSyncDataType.noise Android: IDOSyncDataType.NOISE json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day hour int data date hour minute int Data date minute second int Data date second version int Protocol version number 0 start_time int Start synchronization time unit seconds interval_mode int 2 The interval unit of data is seconds avg_noise int Average noise max_noise int Maximum noise min_noise int Minimum noise noise_count int Number of noise details items Collection Noise details, collection of offset&value Field name Field type Field description offset int offset of data value int noise value Example { \"year\":2022, \"month \":12, \"day\":26, \"hour\":11, \"minute\":58, \"second\":30, \"version\":0, \"start_time\":0, \"interval_mode\" :30, \"avg_noise\":50, \"max_noise\":60, \"min_noise\":40, \"noise_count\":2, \"items\":[ { \"offset\":30, \"value\" :50 }, { \"offset\":30, \"value\":50 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/syncData/IDOSyncPivenData.html":{"url":"doc/syncData/IDOSyncPivenData.html","title":"Sync leather Temperature data","keywords":"","body":"Synchronize skin temperature data Piwen iOS: IDOSyncDataType.piven Android: IDOSyncDataType.PIVEN json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day hour int data date hour minute int data date minute start_time int Start synchronization time Unit seconds interval_mode int The interval for saving automatic body temperature dataUnit secondsReserved avg_temperature int Average temperature. Keep one decimal place. Expand transmission ten times max_temperature int Maximum temperature. Keep one decimal place. Expand transmission ten times min_temperature int Minimum temperature. Keep one decimal place. Expand transmission ten times temperature_count int Number of temperature details items Collection Body temperature details, collection of offset&value Field name Field type Field description offset int offset of data value int Example { \"avg_temperature\" : 0, \"day\" : 0, \"hour\" : 0, \"interval_mode\" : 0, \"items\" : [{\"offset\":0,\"value\":0}], \"max_temperature\" : 0, \"min_temperature\" : 0, \"minute\" : 0, \"month\" : 0, \"start_time\" : 0, \"temperature_count\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:29:37 "},"doc/syncData/IDOSyncPressure.html":{"url":"doc/syncData/IDOSyncPressure.html","title":"Synchronized pressure data","keywords":"","body":"Synchronize pressure data pressure iOS: IDOSyncDataType.pressure Android : IDOSyncDataType.PRESSURE json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day start_time int Start time, unit second, offset from 0 point data_type int 0 is invalid, 1 is a value, 2 is the maximum and minimum value (reserved bytes) items collection collection of offset & value Field name Field type Field description offset int offset in minutes value int pressure value Example { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30, }, { \"offset\":30, \"value\":30, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:30:03 "},"doc/syncData/IDOSyncRespirRateData.html":{"url":"doc/syncData/IDOSyncRespirRateData.html","title":"Synchronized respiration rate data","keywords":"","body":"Synchronize respiration rate data Respiration rate iOS: IDOSyncDataType.respirationRate Android: IDOSyncDataType.RESPIRATIONRATE json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day item_count int breath Number of rate details items Collection Respiration rate details, collection of start_time&respid Field name Field type Field description start_time int Start time, unit seconds ,Offset from 0 point respid int Respiration rate value Example { \"year\":2022, \"month\":12, \"day\":26, \"item_count\":3, \"items\":[ { \"start_time\":0, \"respid\":80 }, { \"start_time\":100, \"respid\":80 }, { \"start_time\":100, \"respid\":80 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:30:28 "},"doc/syncData/IDOSyncSleepData.html":{"url":"doc/syncData/IDOSyncSleepData.html","title":"Synchronized sleep Data","keywords":"","body":"Synchronize sleep data Sleep iOS: IDOSyncDataType.sleep Android: IDOSyncDataType.SLEEP json field received by App: Field name Field type Field description data_type int 1: Scientific sleep (with REM, breathing score)2: Nap4: Normal sleep6: Nap and does not support scientific sleep fall_asleep_year int fall_asleep_month int fall_asleep_day int fall_asleep_day int fall_asleep_hour int fall_asleep_minte int get_up_year int Wake up time year get_up_month int Wake up time month get_up_day int Wake up time day get_up_hour int Wake up time hour Total sleep duration unit: minutes wake_mins int Total wake time unit: minutes light_mins int Total light sleep duration unit: minutes rem_mins int Total eye movement duration unit: minutes deep_mins int Total deep sleep duration unit: minutes wake_count int number of wakes light_count int number of light sleep rem_count int number of eye movements deep_count int number of deep sleep awrr_status int Breathing status sleep_score int Sleep score breath_quality int Breathing quality (0 - 100) Unitless sleep_avg_hr_value int Average heart rate during sleep stages sleep_avg_spo2_value int Average blood oxygen level during sleep stage sleep_avg_respir_rate_value int Average breathing rate during sleep stage item_count int Number of sleep details items Collection Sleep details, collection of stage & duration Field name Field type Field description stage int Stage1: Awake2: Light sleep3: Deep sleep4: Eye movement duration int Duration in seconds Example { \"awrr_status\" : 0, \"breath_quality\" : 0, \"data_type\" : 1, \"deep_count\" : 0, \"deep_mins\" : 0, \"fall_asleep_day\" : 0, \"fall_asleep_hour\" : 0, \"fall_asleep_minte\" : 0, \"fall_asleep_month\" : 0, \"fall_asleep_year\" : 0, \"get_up_day\" : 0, \"get_up_hour\" : 0, \"get_up_minte\" : 0, \"get_up_month\" : 0, \"get_up_year\" : 0, \"item_count\" : 0, \"items\" : [{stage:1,duration:500}], \"light_count\" : 0, \"light_mins\" : 0, \"rem_count\" : 0, \"rem_mins\" : 0, \"sleep_score\" : 0, \"total_sleep_time_mins\" : 0, \"wake_count\" : 0, \"wake_mins\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:30:43 "},"doc/syncData/IDOSyncSpo2Data.html":{"url":"doc/syncData/IDOSyncSpo2Data.html","title":"Synchronized blood oxygen data","keywords":"","body":"Synchronize blood oxygen data Blood oxygen iOS: IDOSyncDataType.bloodOxygen Android: IDOSyncDataType.BLOODOXYGEN json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day start_time int Start time, unit second, offset from 0 point data_type int 0 is invalid, 1 is a value, 2 is the maximum and minimum valuePreliminary stay items collection collection of offset&value field name field type field description offset int Default offset unit is secondsIf the function table getSpo2OffChangeV3 is configured, the data offset is in minutes value int average blood oxygen level Example { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30, }, { \"offset\":30, \"value\":30, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:48:37 "},"doc/syncData/IDOSyncStepCount.html":{"url":"doc/syncData/IDOSyncStepCount.html","title":"Synchronized exercise data","keywords":"","body":"Synchronize motion data Step count iOS: IDOSyncDataType.stepCount Android : IDOSyncDataType.STEPCOUNT json field received by App: Field name Field type Field description version int Protocol version number 0: No wearing identification data16: There is wearing identification data, firmware configuration is required v3SupportWearFlag menu year int data date year month int data date month day int data date day start_time int Start time, unit minute, offset from 0 o'clock per_minute int The minute interval between each piece of data (default 15 minutes) 206 customization added: duration interval 1 minuteIf the generation interval is one minute, the app needs to judgegetSupportPerMinuteOne To determine whether the firmware supports the one-minute synchronization type total_step int total number of steps total_rest_activity_calories int total activity + resting calories total_distances int Total distance miles data = firmware distance (meters) multiplied by 0.00062 total_active_time int The active time of the day in minutes total_activity_calories int total activity calories walk_goal_time int The actual walking time of the firmware needs to be configured in hours item_count int Number of sports data details wear_flag_array int [] Number of wearing minutes for each hour of 24 hours, maximum 24 bytes Returns 0 when the getSupportSyncOverHighLowHeartData menu is not enabled items Collection Exercise data details (refer to the table below), collection of mode&step_count&active_time&activity_calories&distance&rest_activity_calories Field name Field type Field description mode int Mode 00: quiet, 01: mild, 10: moderately active, 11: intense step_count int number of steps active_time int Active time in minutes, the maximum per_minute parameter is determined, currently it is 15 minutes activity_calories int activity calories distance int distance in meters rest_activity_calories int activity + resting calories Example { \"day\" : 26, \"item_count\" : 47, \"items\" : [ { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 } ], \"month\" : 12, \"per_minute\" : 15, \"start_time\" : 0, \"total_active_time\" : 0, \"total_activity_calories\" : 0, \"total_distances\" : 0, \"total_rest_activity_calories\" : 0, \"total_step\" : 0, \"version\" : 0, \"walk_goal_time\" : 0, \"wear_flag_array\" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"year\" : 2022 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 11:54:11 "},"doc/syncData/IDOSyncSwimData.html":{"url":"doc/syncData/IDOSyncSwimData.html","title":"Synchronized swimming data ","keywords":"","body":"Synchronize swimming data Swimming iOS: IDOSyncDataType.swim Android: IDOSyncDataType.SWIM json field received by App: Field name Field type Field description year int data date year month int data date month day int data date day hour int data date hour minute int data date minute second int data date seconds version int protocol version number type int Type 0 is invalid,1 is for indoor swimming,2 is for open water swimming calories int caloriesUnit: Kcal distance int distanceUnit: meters confirm_distance int user confirmation distanceUnit: meters duration int durationUnit :seconds trips int number of swimming trips average_swolf int average stroke efficiency total_strokes_number int total number of strokes swimming_posture int main stroke0 : Medley1: Freestyle2: Breaststroke3: Backstroke4: Butterfly pool_distance int Pool distanceUnit: meters avg_speed int Average paceSec/100 meters How many seconds does it take to reach 100 metersUnit: secondsversion=1 is valid, otherwise the field is 0 avg_frequency Int Average stroke Water frequencyUnit: times/minuteVersion=1 is valid, otherwise the field is 0 items Collection Swimming data details, swolf & strokesNumber & duration & swimmingPosture & distance & frequency& speed & stop_time & Collection of difference_time Field name Field type Field description swolf int Stroke efficiency swimming_posture int Stroke0: Medley1: Freestyle2: Breaststroke3: Backstroke4: Butterfly strokes_number int Number of strokes duration int timeUnit: seconds distance int DistanceUnit: meters frequency int frequencyUnit: times/ Pointsversion=1 is valid, otherwise the field is 0 speed int Paceseconds/how many seconds it took to reach 100 metersUnit: secondsversion=1 is valid, otherwise the field is 0 stop_time int End TimeUnit: secondsversion=1 is valid, otherwise the field is 0 difference_time int Rest time between two tripsUnit: secondsversion=1 is valid , otherwise the field is 0 Example { \"average_swolf\": 113, \"avg_frequency\": 42, \"avg_speed\": 146, \"calories\": 63, \"confirm_distance\": 250, \"day\": 18, \"distance\": 250, \"duration\": 367, \"hour\": 10, \"items\": [{ \"difference_time\": 0, \"distance\": 25, \"duration\": 45, \"frequency\": 30, \"speed\": 180, \"stop_time\": 45, \"strokes_number\": 23, \"swimming_posture\": 1, \"swolf\": 136 }], \"minute\": 3, \"month\": 4, \"pool_distance\": 25, \"pool_distance_decimal\": 0, \"second\": 6, \"swimming_posture\": 4, \"total_strokes_number\": 235, \"trips\": 10, \"type\": 1, \"version\": 2, \"year\": 2024 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 14:57:03 "},"doc/transfer/IDOFileTransfer.html":{"url":"doc/transfer/IDOFileTransfer.html","title":"File transfer","keywords":"","body":"File transfer FileTransfernterface Properties isTransmitting Whether the transfer is being performed transFileType The file type currently being transferred Method transferFiles(fileItems:cancelPrevTranTask:transProgress:transStatus:completion:) Perform file transfer Parameters: fileItems: File to be transferred cancelPrevTranTask: Whether to cancel the ongoing transfer task ( if Yes) transProgress: file transfer progress transStatus: file transfer status completion: transfer result, in the form: [true, true, ...] and the incoming fileItems correspond one-to-one iwfFileSize (filePath:type:completion:) Get the .iwf file size before compression Parameters: filePath: watch face file absolute path type: watch face type 1 cloud watch face, 2 wallpaper watch face completion: file size (Unit bytes) Example Entity class: IDOTransSportModel IDOTransMusicModel IDOTransNormalModel pieces Example: IDOTransType Swift: var items = [IDOTransBaseModel]() //Music items.append(IDOTransMusic Model(filePath: \"\\(mp3Path)/1.mp3\", fileName: \"mp3_1\", musicId: 1)) items.append(IDOTransMusicModel(filePath: \"\\(mp3Path)/2.mp3\", fileName: \"mp3_2\", musicId: 2)) items.append(IDOTransMusicModel(filePath: \"\\(mp3Path)/3.mp3\", fileName: \"mp3_3\", musicId: 3)) // Sports icon - picture items.append(IDOTransSportModel(filePath : \"x.png\", fileName: \"icon_sport1\", sportType: 2, iconType: 1, isSports: false)) items.append(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport2\", sportType: 2 , iconType: 1, isSports: false)) // Sports icons - animation items.append(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports1\", sportType: 2, iconType: 3, isSports: true )) items.append(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports2\", sportType: 2, iconType: 3, isSports: true)) // Wallpaper dial items.append(IDOTransNormalModel(fileType : .wallpaperZ, filePath: \"x.png\", fileName: \"wallpaper.z\")) // Cloud dial items.append(IDOTransNormalModel(fileType: .iwfLz, filePath: \"noise_w96.zip\", fileName: \" noise_w96\")) // Firmware items.append(IDOTransNormalModel(fileType: .fw, filePath: \"xx.fw\", fileName: \"xx\")) // Call transfer let canceler = sdk.transfer .transferFiles(fileItems: items, cancelPrevTranTask: true) { currentIndex, totalCount, _, totalProgress in print(\"Transferring (\\(currentIndex + 1)/\\(totalCount)...\") } transStatus: { _, status, errorCode, _ in if status != .finished || errorCode != 0 { print(\"Transmission failed:\\(errorCode)\") } } completion: { rs in print(\"Transmission completed: \\ (rs)\") if rs.last! { // Transfer successful } else { // Transfer failed } } // Cancel transfer canceler?.cancel() Kotlin : var items = mutableListOf() // Music items.add(IDOTransNormalModel(filePath: \"\\(mp3Path)/1.mp3\", fileName: \"mp3_1\", musicId: 1)) items.add(IDOTransNormalModel(filePath: \"\\(mp3Path)/2.mp3\", fileName: \"mp3_2\", musicId: 2)) items.add(IDOTransNormalModel(filePath: \"\\(mp3Path)/3 .mp3\", fileName: \"mp3_3\", musicId: 3)) // Sports icon - picture items.add(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport1\", sportType: 2, iconType: 1, isSports: false)) items.add(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport2\", sportType: 2, iconType: 1, isSports: false)) // Sports icon - animation items.add(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports1\", sportType: 2, iconType: 3, isSports: true)) items.add(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports2\", sportType: 2, iconType: 3, isSports: true)) // Wallpaper dial items.add(IDOTransNormalModel(fileType = IDOTransType.WALLPAPERZ,filePath = \"xx/xx.png\",fileName = \"wallpaper.z\",fileSize = xx) ) // Cloud watch face items.add(IDOTransNormalModel(fileType: .iwfLz, filePath: \"noise_w96.zip\", fileName: \"noise_w96\")) // Firmware items.add(IDOTransNormalModel(fileType: .fw , filePath: \"xx.fw\", fileName: \"xx\")) // Call transfer val cancelable = sdk.transfer.transferFiles( items, cancelPre, { currentIndex, totalCount, currentProgress, totalProgress -> print(\"Transmitting ${currentIndex + 1}/$totalCount...\") }, { currentIndex: Int, status: IDOTransStatus, errorCode: Int?, finishingTime: Int? -> if (status != IDOTransStatus .FINISHED || errorCode != 0) { print(\"Transmission failed: $errorCode\") } }, {resultList-> resultList.forEach { if (it){ //Transmission successful }else{ //Transfer failed } }}) // Cancel transfer canceler?.cancel() Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/transfer/IDOTransMessageModel.html":{"url":"doc/transfer/IDOTransMessageModel.html","title":"Message icon","keywords":"","body":"CLASS IDOTransMessageModel Message icon Properties Type Description filePath String File absolute address fileName String File name fileSize Int File size evtType Int Event typeReference message notification0x01: SMS0x02: Email0x03: WeChat0x04: QQ0x05: Sina Weibo0x06: facebook0x07: twitter0x08: WhatsApp0x09: Messenger0x0A : Instagram0x0B: Linked in0x0C: Calendar0x0D: skype;0x0E: Alarm clock0x0F: pokeman0x10: VKontakte 0x11：Line0x12：Viber0x13：KakaoTalk0x14：Gmail0x15：Outlook,0x16：Snapchat0x17：TELEGRAM 0x18: other0x20: chatwork0x21: slack0x22: Yahoo Mail0x23: Tumblr,0x24: Youtube0x25: Yahoo Pinterest />0x26: TikTok0x27: Redbus0x28: Dailyhunt0x29: Hotstar0x2A: Inshorts0x2B: Paytm0x2C: Amazon0x2D: Flipkart0x2E: Prime0x2F: Netflix0x30: Gpay0x31: Phonpe0x32: Swiggy0x33: Zomato 0x34: Make My trip0x35: Jio Tv0x36: keep0x37: Microsoft0x38: WhatsApp Business0x39: niosefit0x3A: missed_calls not available Receive a call0x3B: Gpap0x3C: YTmusic0x3D: Uber0x3E: Ola0x3F: Reminder0x40: Google meet packName String Application package name Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/transfer/IDOTransMusicModel.html":{"url":"doc/transfer/IDOTransMusicModel.html","title":"Music","keywords":"","body":"CLASS IDOTransMusicModel Music Properties Type Description filePath String File absolute address fileName String file name fileSize Int file size musicId Int music id singerName String singer name Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:52:00 "},"doc/transfer/IDOTransSportModel.html":{"url":"doc/transfer/IDOTransSportModel.html","title":"Sports icon","keywords":"","body":"CLASS IDOTransSportModel sport icons Properties Type Description filePath String Absolute file address fileName String filename fileSize Int file size sportType Int Sport ModePrevious sport type: 0: None, 1: Walking, 2: Running, 3: Cycling, 4: Hiking, 5: Swimming, 6: Climbing, 7: Badminton, 8: Others, 9: Fitness, 10: Spinning bike, 11: Elliptical machine, 12: Treadmill, 13: Sit-ups, 14: Push-ups, 15: Dumbbells, 16: Weightlifting, 17: Aerobics, 18: Yoga, 19: Rope skipping, 20: Table tennis, 21: Basketball, 22: Football, 23: Volleyball, 24: Tennis, 25: Golf, 26: Baseball, 27: Skiing, 28: Roller skating, 29: Dancing, 31: Indoor rowing/roller machine, 32: Pilates/pilates, 33: Cross training/cross train, 34: Aerobics/cardio, 35: Zumba Dance/Zumba, 36:square dance, 37:Plank, 38:gym 48:Outdoor running, 49:Indoor running, 50:Outdoor cycling, 51:Indoor cycling, 52: Outdoor walking, 53: Indoor walking, 54: Pool swimming, 55: Open water swimming, 56: Elliptical machine, 57: Rowing machine, 58: High-intensity interval training, 75: CricketBasic exercise : 101: Functional strength training, 102: Core training, 103: Stepper, 104: Relaxation Fitness (25 types) 110: Traditional strength training, 112: Pull-ups , 114: Jumping Jacks, 115: Squats, 116: High Leg Raise, 117: Boxing, 118: Barbell, 119: Martial Arts, 120: Tai Chi, 121: Taekwondo, 122: Karate, 123: Kickboxing , 124: Fencing, 125: Archery, 126: Gymnastics, 127: Horizontal bar, 128: Parallel bars, 129: Walking machine, 130: Mountain climbing machine Ball games: 131: Bowling, 132 : Billiards, 133: Hockey, 134: Rugby, 135: Squash, 136: Softball, 137: Handball, 138: Shuttlecock, 139: Beach Soccer, 140: Sepak Takraw, 141: Dodgeball Leisure sports 152: Street dance, 153: Ballet, 154: Social dance, 155: Frisbee, 156: Darts, 157: Horse riding, 158: Stair climbing, 159: Kite flying, 160: Fishing Ice and snow sports 161: Sled, 162: Snowmobile, 163: Snowboarding, 164: Snow sports, 165: Alpine skiing, 166: Cross-country skiing, 167: Curling, 168: Ice hockey, 169: Winter Two items Water sports (10 types) 170: Surfing, 171: Sailing, 172: Windsurfing, 173: Kayak, 174: Motor boat, 175: Rowing, 176: Rowing, 177 :Dragon boat, 178: Water polo, 179: Rafting, Extreme sports (5 types) 180: Skateboarding, 181: Rock climbing, 182: Bungee jumping, 183: Parkour, 184: BMX, kr01 customized project 193:Outdoor Fun (outdoor play), 194:Other Activity (other sports) iconType Int Icon type 1: Single small motion picture 2: Single large motion picture 3: Multiple motion animated pictures 4: Single medium motion picture 5: Minimum motion icon isSports Bool Sports Icons - Animated Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 16:35:54 "},"doc/transfer/IDOTransNormalModel.html":{"url":"doc/transfer/IDOTransNormalModel.html","title":"Other files","keywords":"","body":"CLASS IDOTransNormalModel Normal files Divided according to FileTransType Note: The following types need to use the corresponding classification: -Message icon-use IDOTransMessageModel class -Music- Using IDOTransMusicModel Sports Icons - Using IDOTransSportModel Properties Type Description fileType IDOTransType File type filePath String File absolute address fileName String File name fileSize Int File size Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOModelIndex.html":{"url":"doc/model/IDOModelIndex.html","title":"Model","keywords":"","body":"Model IDOActivitySwitchModel IDOAlarmItem IDOAllHealthSwitchStateModel IDOBatteryInfoModel IDOBleBeepModel IDOBleVoiceParamModel IDOBpAlgVersionModel IDOBpCalControlModel IDOBpCalibrationModel IDOBpCalibrationParamModel IDOBpMeasurementModel IDOBpMeasurementParamModel IDOBtNoticeModel IDOCmdGetResponseModel IDOCmdSetResponseModel IDOContactItem IDOContactReviseTimeModel IDODataTranConfigModel IDODateTimeParamModel IDODeviceLogStateModel IDODeviceNotificationModel IDODisplayModeParamModel IDODownloadLanguageModel IDODownloadLanguageType IDOErrorRecordModel IDOFitnessGuidanceParamModel IDOFlashBinInfoModel IDOFuncSimpleFileOptModel IDOFuncSimpleFileOptParamModel IDOGpsControlModel IDOGpsControlParamModel IDOGpsInfoModel IDOGpsInfoModelItem IDOGpsStatusModel IDOHandWashingReminderParamModel IDOHeartModeModel IDOHeartModeParamModel IDOHeartRateModeModel IDOHeartRateModeParamModel IDOHeartRateModeSmartParamModel IDOHistoricalMenstruationParamItem IDOHistoricalMenstruationParamModel IDOHotStartParamModel IDOItemItem IDOLanguageLibraryItem IDOLanguageLibraryModel IDOLiveDataModel IDOLongSitParamModel IDOLostFindParamModel IDOMainSportGoalModel IDOMainUISortItem IDOMainUISortModel IDOMainUISortParamModel IDOMainUISortSupportItem IDOMtuInfoModel IDOMusicControlParamModel IDOMusicFolderItem IDOMusicInfoModel IDOMusicItem IDOMusicOnOffParamModel IDOMusicOpearteParamModel IDOMusicOperateModel IDONotDisturbStatusModel IDONoticeMesaageParamItem IDONoticeMesaageParamModel IDONoticeMessageParamModel IDONoticeMessageStateItemItem IDONoticeMessageStateModel IDONoticeMessageStateParamModel IDONotificationCenterModel IDONotificationStatusParamModel IDORunPlanParamModel IDOSchedulerReminderItem IDOSchedulerReminderModel IDOScientificSleepSwitchParamModel IDOScreenBrightnessModel IDOSendRunPlanModel IDOSetNoticeStatusModel IDOShortcutParamModel IDOSleepPeriodParamModel IDOSpo2SwitchParamModel IDOSport100SortItem IDOSport100SortModel IDOSport100SortParamModel IDOSportGoalParamModel IDOSportModeSelectParamModel IDOSportModeSortParamModel IDOSportSortModel IDOSportSortParamModel IDOStepGoalModel IDOStressCalibrationModel IDOStressCalibrationParamModel IDOStressValModel IDOSupportMaxSetItemsNumModel IDOSyncContactModel IDOSyncContactParamModel IDOTakingMedicineReminderParamModel IDOTemperatureSwitchParamModel IDOUnitParamModel IDOUpdateStatusModel IDOUpHandGestureModel IDOUpHandGestureParamModel IDOV3NoiseParamModel IDOVersionInfoModel IDOVoiceReplyParamModel IDOWalkRemindModel IDOWalkRemindTimesItem IDOWalkRemindTimesParamModel IDOWallpaperDialReplyV3Model IDOWallpaperDialReplyV3ParamModel IDOWatchDialIdModel IDOWatchDialInfoModel IDOWatchDialParamModel IDOWatchDialSortItem IDOWatchDialSortParamModel IDOWatchFaceModel IDOWatchFaceParamModel IDOWatchItem IDOWatchListModel IDOWatchListV2Model IDOWeatherDataFuture IDOWeatherDataParamModel IDOWeatherSunTimeParamModel IDOWeatherV3ParamModel IDOWorldTimeParamModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:43:19 "},"doc/model/IDOActivitySwitchModel.html":{"url":"doc/model/IDOActivitySwitchModel.html","title":"IDOActivitySwitchModel","keywords":"","body":"IDOActivitySwitchModel Properties Type Description errCode Int 0 means success Non-zero means error autoIdentifySportWalk Int Automatic identification of walking switch: 0 is off, 1 is on, -1 is not supported autoIdentifySportRun Int Automatic identification of running Switch: 0 is off, 1 is on, -1 is not supported autoIdentifySportBicycle Int Automatic identification cycle switch: 0 is off, 1 is on, -1 is not supported autoPauseOnOff Int Automatic pause switch : 0 is off, 1 is on, -1 is not supported autoEndRemindOnOffOnOff Int End reminder switch: 0 is off, 1 is on, -1 is not supported autoIdentifySportElliptical Int Automatic identification of elliptical switch: 0 is off, 1 is on, -1 is not supported autoIdentifySportRowing Int Automatically identify the rowing switch: 0 is off, 1 is on, -1 is not supported autoIdentifySportSwim Int Automatically identify the swimming switch: 0 is off, 1 is on, -1 is not supported autoIdentifySportSmartRope Int Automatically identify the smart rope switch: 0 is off, 1 is on, -1 is not supported Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:27:39 "},"doc/model/IDOAlarmItem.html":{"url":"doc/model/IDOAlarmItem.html","title":"IDOAlarmItem","keywords":"","body":"IDOAlarmModel 属性 类型 说明 items List [IDOAlarmItem] IDOAlarmItem 集合 IDOAlarmItem 属性 类型 说明 alarmID Int 报警ID，从1开始，1~支持的最大报警数 delayMin Int 延迟几分钟 hour Int 闹钟 时钟 minute Int 闹钟 分钟 name String 报警名称，最大23字节 isOpen Bool 开关 repeats HashSetSet() 重复IDOWeek 集合 repeatTimes Int 闹钟重复次数闹钟重复的次数，延时开关，设置为0则关闭，设置为某个数字则重复该次数 status IDOAlarmStatus 0：隐藏（删除） 1：显示 -1：无效 type IDOAlarmType 报警类型 IDOAlarmStatus Android enum class IDOAlarmStatus(val rawValue: Int) { INVALID(-1), HIDDEN(0), DISPLAYED(1); } iOS public enum IDOAlarmStatus: Int { case invalid = -1 case hidden = 0 case displayed = 1 } IDOAlarmType Android enum class IDOAlarmType(val rawValue: Int) { WAKEUP(0x00), SLEEP(0x01), EXERCISE(0x02), MEDICATION(0x03), DATE(0x04), GATHERING(0x05), MEETING(0x06), OTHER(0x07); } iOS public enum IDOAlarmType: Int { case wakeUp = 0x00 case sleep = 0x01 case exercise = 0x02 case medication = 0x03 case date = 0x04 case gathering = 0x05 case meeting = 0x06 case other = 0x07 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-03-27 18:01:34 "},"doc/model/IDOAllHealthSwitchStateModel.html":{"url":"doc/model/IDOAllHealthSwitchStateModel.html","title":"IDOAllHealthSwitchStateModel","keywords":"","body":"IDOAllHealthSwitchStateModel 属性 类型 说明 heartMode Int 连续心率测量开关：1：开0：关-1：不支持 pressureMode Int 自动血压测量开关1：开0：关-1：不支持 spo2Mode Int 自动血氧测量开关1：开0：关-1：不支持 scienceMode Int 科学睡眠开关2：科学睡眠模式1：正常睡眠模式-1：不支持 temperatureMode Int 夜间温度开关1：开0：关-1：不支持 noiseMode Int 噪音开关1：开0：关-1：不支持 menstrualMode Int 月经周期开关1：开0：关-1：不支持 walkMode Int 步行提醒开关1：开0：关-1：不支持 handwashingMode Int 洗手提醒开关1：开0：关-1：不支持 respirRateState Int 呼吸频率开关1：开0：关-1：不支持 bodyPowerState Int 机身电池开关1：开0：关-1：不支持 drinkwaterMode Int 喝水提醒开关1：开0：关-1：不支持 heartmodeNotifyFlag Int 心率通知状态：0 无效1 允许通知2 静音通知3 禁用通知 pressureNotifyFlag Int 血压通知状态：0 无效1 允许通知2 静默通知3 禁用通知 spo2NotifyFlag Int 血氧通知状态：0为无效1为允许通知2为静默通知3为禁用通知 menstrualNotifyFlag Int 月经周期通知状态：0 无效1 允许通知2 静音通知3 禁用通知 guidanceNotifyFlag Int 健身指导通知状态：0 无效1 允许通知2 静默通知3 禁用通知 reminderNotifyFlag Int 提醒通知状态：0 无效1 允许通知2 静默通知3 禁用通知 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBatteryInfoModel.html":{"url":"doc/model/IDOBatteryInfoModel.html","title":"IDOBatteryInfoModel","keywords":"","body":"IDOBatteryInfoModel 属性 类型 说明 type Int 电池类型：0：可充电锂电池，1：纽扣电池 voltage Int 电压 status Int 电池状态0：正常1：充电中2：充电完成3：电量低 level Int 等级 lastChargingYear Int 最后一次充电时间，年份 lastChargingMonth Int 最后一次充电时间、月份 lastChargingDay Int 最后充电时间，天 lastChargingHour Int 最后充电时间，小时 lastChargingMinute Int 最后充电时间，分钟 lastChargingSecond Int 最后一次充电时间，秒 mode Int 0：无效1：普通模式（非省电模式）2：省电模式 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBleBeepModel.html":{"url":"doc/model/IDOBleBeepModel.html","title":"IDOBleBeepModel","keywords":"","body":"IDOBleBeepModel Properties Type Description errCode Int Error code, 0 means success, non-0 means failure items List[IDOBleBeepItem] IDOBleBeepItem Attributes Type Description name String name Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBleVoiceParamModel.html":{"url":"doc/model/IDOBleVoiceParamModel.html","title":"IDOBleVoiceParamModel","keywords":"","body":"IDOBleVoiceParamModel Properties Type Description totalVolume Int total volume currentVolume Int current volume Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBpAlgVersionModel.html":{"url":"doc/model/IDOBpAlgVersionModel.html","title":"IDOBpAlgVersionModel","keywords":"","body":"IDOBpAlgVersionModel Properties Type Description bpVersion1 Int Firmware blood pressure algorithm version 1 bpVersion2 Int Firmware blood pressure algorithm version 2 bpVersion3 Int Firmware blood pressure algorithm version 3 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBpCalControlModel.html":{"url":"doc/model/IDOBpCalControlModel.html","title":"IDOBpCalControlModel","keywords":"","body":"IDOBpCalControlModel Properties Type Description errorCode Int Error code: 0 means success, non-0 means failure operate Int Operation0: Invalid1: Start blood pressure calibration2: Stop blood pressure calibration3: Get the feature vector sbpPpgFeatureNum Int The number of high blood pressure PPG feature vectorsValid when operate=3 dbpPpgFeatureNum Int The number of low blood pressure PPG feature vectorsoperate=3 sbpPpgFeatureItems List High blood pressure PPG feature vector set dbpPpgFeatureItems List Hypotension PPG feature vector set Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:31:48 "},"doc/model/IDOBpCalibrationModel.html":{"url":"doc/model/IDOBpCalibrationModel.html","title":"IDOBpCalibrationModel","keywords":"","body":"IDOBpCalibrationModel Properties Type Description retCode Int 0: Successful1: Successfully entered calibration mode, calibration in progress2: In exercise mode3: Device busy4: Invalid status Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBpCalibrationParamModel.html":{"url":"doc/model/IDOBpCalibrationParamModel.html","title":"IDOBpCalibrationParamModel","keywords":"","body":"IDOBpCalibrationParamModel Property Type Description flag Int 1: Blood pressure calibration settings2: Blood pressure calibration query results diastolic Int Systolic blood pressure systolic Int Diastolic blood pressure Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBpMeasurementModel.html":{"url":"doc/model/IDOBpMeasurementModel.html","title":"IDOBpMeasurementModel","keywords":"","body":"IDOBpMeasurementModel Property Type Description status Int 0: Not supported1: Measuring2: Measurement successful3: Measurement failed4: The device is in motion mode systolicBp Int Shrink pressure diastolicBp Int diastolic blood pressure Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBpMeasurementParamModel.html":{"url":"doc/model/IDOBpMeasurementParamModel.html","title":" IDOBpMeasurementParamModel","keywords":"","body":"IDOBpMeasurementParamModel Properties Type Description flag Int 1: Start measurement2: End measurement3: Get blood pressure data Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBtNoticeModel.html":{"url":"doc/model/IDOBtNoticeModel.html","title":"IDOBtNoticeModel","keywords":"","body":"IDOBtNoticeModel Properties Type Description btConnectStates Int 1: BT connection status is on0: BT connection status is off-1: Invalid btPairStates Int 1: BT pairing status is on0: BT pairing status Close-1: Invalid a2dpConnectStates Int 1: A2DP connection state is on0: A2DP connection state is closed-1: Invalid hfpConnectStates Int 1: HFP Connection status is on0: HFP connection status is off-1: Invalid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOCmdGetResponseModel.html":{"url":"doc/model/IDOCmdGetResponseModel.html","title":"IDOCmdGetResponseModel","keywords":"","body":"IDOCmdGetResponseModel Property Type Description onOff Int Switch status1: On0: Off-1: Not supported Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOCmdSetResponseModel.html":{"url":"doc/model/IDOCmdSetResponseModel.html","title":"IDOCmdSetResponseModel ","keywords":"","body":"IDOCmdSetResponseModel Property Type Description isSuccess Int 0: successnon-0: failure Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:32:29 "},"doc/model/IDOContactItem.html":{"url":"doc/model/IDOContactItem.html","title":"IDOContactItem","keywords":"","body":"IDOContactItem Properties Type Description phone String Contact phone number content, maximum 14 bytes + '\\0' newline character name String Contact name content, maximum 31 bytes + '\\0' newline character Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOContactReviseTimeModel.html":{"url":"doc/model/IDOContactReviseTimeModel.html","title":"IDOContactReviseTimeModel","keywords":"","body":"IDOContactReviseTimeModel Property Type Description result Int 0: No need to send contact information file1: Need to send contact information data Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODataTranConfigModel.html":{"url":"doc/model/IDODataTranConfigModel.html","title":"IDODataTranConfigModel","keywords":"","body":"IDODataTranConfigModel Properties Type Description errCode Int Error code0: NormalNon-zero: Error type Int Icon type corresponding to the activity type0: Invalid1: Activity small icon 2: Activity large icon3: Activity animation icon4: Medium size activity icon evtType Int Event type0: InvalidFor example 1: SMS, 2: Email, 3: WeChat, etc. sportType Int Activity type0: InvalidActivity mode type, 1: walking, 2: running, etc. iconWidth Int The required width of the firmware icon (determined by type and evt_type/sport_type) iconHeight Int The required height of the firmware icon (determined by type and evt_type/sport_type) format Int Color format blockSize Int Compression block size bigSportsNum Int Number of large sports icons msgNum Int Number of message icons mediumNum Int Number of medium-sized icons Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODateTimeParamModel.html":{"url":"doc/model/IDODateTimeParamModel.html","title":"ID ODateTimeParamModel","keywords":"","body":"IDODateTimeParamModel Property Type Description year Int year monuth Int month day Int day hour Int hour minute Int minute second Int Week: Monday to Sunday 0-6 timeZone Int Time zone in 24-hour format: 0-12 is east, 13-24 is west (not enabled, assigned value 0) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODeviceLogStateModel.html":{"url":"doc/model/IDODeviceLogStateModel.html","title":"IDODeviceLogStateModel","keywords":"","body":"IDODeviceLogStateModel Property Type Description type Int 0: No corresponding log1: Firmware restart log2: Firmware exception errCode Int Firmware restart log error code, 0 is normal Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODeviceNotificationModel.html":{"url":"doc/model/IDODeviceNotificationModel.html","title":"IDODeviceNotificationModel","keywords":"","body":"IDO device notification/control event model description IDODeviceNotificationModel Provides the ability to account for notification/control event model members actively requested by the firmware. Properties Type Description type Int Monitoring device status Description notifyType Int Notification type Description msgId Int Each message corresponds to an ID msgNotice Int Custom SMS Description errorIndex Int Error status index Description controlEvt Int Control event type Description controlJson String Control event return value (only available for some events) Description Device status:   Decimal value Description 0 Invalid 1 The bracelet has been untied 2 Heart rate pattern change 3 Blood oxygen production data has changed 4 Pressure generates data and changes 5 Exit during Alexa recognition process 6 The firmware initiates a factory reset and notifies the app of a pop-up reminder 7 The app needs to enter the camera interface (TIT01 customization) 8 SOS event notification (205 Türkiye customized) 9 For the alarm clock set by Alexa and the firmware modification, the corresponding notification bit needs to be sent to the app. After receiving it, the app will send the alarm clock command to obtain V3 10 The firmware has a deletion schedule reminder, and the app needs to update the corresponding list data 11 The firmware has modified the corresponding dial style, and notifies the app to obtain it (command_id is 0x33, key is 0x5000) 12 Firmware notification ios update notification icon and name 13 The firmware notifies the app that the icon has been updated, and notifies the app to obtain the updated icon status 14 The firmware requests to reset the weather, the app receives it and sends the weather data 15 The number of steps increases by 2000 steps each time, the device requests the app to synchronize data, and the app calls the synchronization interface 16 Detect the end of sleep, request the app to synchronize sleep data, and the app calls the synchronization interface to synchronize 17 Firmware three-ring data modification, notify app to update three-ring data 18 When the firmware is fully charged, a reminder will be sent. After the app receives it, the notification bar will display that the device is fully charged 19 After finishing exercise, after manually measuring heart rate, after manually measuring blood oxygen, after manually measuring pressure, the device automatically requests synchronization. Check the link status first. If it is not connected, this synchronization will not be executed. It will be judged again after meeting the next automatic synchronization conditions. Initiate synchronization request 20 The firmware modifies the heart rate notification status type, pressure notification status type, blood oxygen notification status type, menstrual cycle notification status type, health guidance notification status type, and reminder notification status type to notify the app to update heart rate, pressure, blood oxygen, and menstrual cycle , health guidance, reminder notification status type 21 The firmware pressure value calculation is completed, and the app is notified to obtain the pressure value 22 The firmware notifies the app that the firmware pressure calibration failed (the firmware exited the measurement interface/detection failed/detection timed out/not worn) 23 Reserved 24 The firmware notifies the app that bt Bluetooth is connected 25 Firmware notification app bt bluetooth disconnected 26 Firmware Bluetooth call starts 27 Firmware Bluetooth call ended 28 The new version of the firmware sends a notification command every 4 minutes and 30 seconds to fix the problem that ios will display offline 29 Notify the app that movement has started (the same as 26 for intercepting dial transmission) 30 Notify the app that the movement is over (the same as 27 for intercepting dial transmission) 31 The firmware restarts and sends a notification to the app (the app needs to obtain the firmware version information after receiving the notification) 32 When the device is idle (aleax is not used), a notification needs to be reported to the app (the time interval is 1 hour) 33 The firmware clears the space and notifies the app to continue downloading the watch face file 34 The firmware notifies the app to end the search for bracelet command (corresponds to 6.3 search for bracelet) 35 Firmware enters power saving mode to notify app 36 Firmware exits power saving mode notification app 37 Firmware notification requests app to issue and set gps hot start parameters (obsolete) 38 The firmware completes transmitting the original data and notifies the app to obtain the feature vector information 39 The firmware notifies the app that the firmware blood pressure calibration failed (the firmware exited the measurement interface/detection failed/detection timed out/not worn) 40 The firmware completes the transmission of raw data and there is no feature vector information, notifying the app that the data collection is completed 41 v3 health data synchronization single data completion notification (android internal use) 42 The firmware finishes organizing the gps data space and notifies the app to distribute the gps file 43 Firmware upgrade EPO.dat file failed, notify the app to deliver the file again 44 Firmware upgrade EPO.dat file successful 45 Firmware upgrade to GPS failed, notify app to retransmit 46 Firmware upgrade GPS successful 47 When initiating exercise, the firmware GPS is abnormal and the app is notified 48 Firmware Runfeng peripheral information update, notify app to obtain 49 The firmware notifies the user to cancel the pairing of BLE and the watch, and the app pop-up window processing 50 The firmware notifies the app that bt pairing is completed 51 Firmware sets motion sequencing and notifies the app to obtain motion sequencing information 52 The firmware all-day step target parameter has changed, notify the app to obtain the all-day step target (0208) 53 The firmware notifies the app firmware to enter the blood pressure calibration interface 54 Firmware automatic recognition switch status update, notify app to obtain motion automatic recognition switch status (02EA) 55 Firmware fast mode switch to slow mode 56 Firmware slow mode switching to fast mode 57 Firmware updates mtu, APP issues to obtain the mtu and update the locally recorded mtu (the locally recorded mtu size is larger than 20 Bytes and will not be updated) 58 The firmware power changes, and the APP downloads the power information 59 Currently in DFU mode (Sich Platform) 60 Firmware unit switching, notify APP to obtain the unit (0222) 61 Firmware modification menu list (shortcut list), notify APP to obtain (02A8) 62 The firmware modifies the local language and notifies the APP to obtain it (0222) 63 The firmware modifies the current dial and notifies the APP to obtain 64 Firmware measurement completed, notify APP to obtain the results (0606) 65 The firmware modifies the smart heart rate mode and notifies the APP to obtain the smart heart rate mode parameters (0263) 66 The firmware notifies the APP to upgrade the blood pressure model algorithm file (.bpalgbin) 67 The firmware modifies the pressure switch status and notifies the APP to obtain the pressure switch parameters (0245) 68 The firmware modifies the blood oxygen saturation switch status and notifies the APP to obtain the blood oxygen saturation switch parameters (0244) 69 The firmware modifies the electronic card content and notifies the APP to obtain the electronic card content 70 The firmware modifies the content of the morning newspaper and notifies the APP to obtain the content of the morning newspaper 71 The firmware modifies the voice memo and notifies the APP to obtain the content of the voice memo Notification type:   value description bits 1 The alarm has been modified bit0 2 Firmware overheat abnormality alarm bit1 4 The bright screen parameter has been modified (02 b0) bit2 8 The wrist raising parameter has been modified (02 b1) bit3 16 Do Not Disturb mode acquisition (02 30) bit4 32 Mobile phone volume delivery (03 0xE3) (delete), app volume modification, direct delivery bit5 Custom SMS:   value description 0 None 1 Custom text message 1 (meeting in progress, contact you later). 2 Custom SMS 2 3 Custom SMS 3 4 Custom SMS 4 5 Custom SMS 5 .. ..(and so on to 10) 10 Custom SMS 10 Error status index:   Value Error Type Comments 0 No errors 1 ACC 1~100 is firmware error 2 PPG 3 TP 4 FLASH 5 Overheating (PPG) 6 Air pressure 7 GPS 8 Geomagnetism 100 Open door dog reset 100~200 reset log code 101 Power-on reset 102 Software misalignment reset 103 OTA reset 104 User active reset 105 Low power shutdown reset Control events and corresponding event return values:   Event type Event number (controlEvt) Event return value (controlJson) Device control app music starts 551 - Device control app music pause 552 - Device control app music stops 553 - Device control app music previous song 554 - Device Control App Music Next 555 - Device control app to take photos and take single shots 556 - Device control app for continuous shooting 557 - Device control app volume increase 558 - Device control app volume reduction 559 - Device control app opens the camera 560 - Device control app turns off the camera 561 - Device control app to answer calls 562 - Device control app rejects calls 563 - Device control app music volume percentage 565 Jump to description Device control app to find mobile phone to start 570 - Device control app looking for mobile phone end 571 - Device notification app anti-lost activation 572 - Device notification app one-click call start 574 Jump to description Device Notification Sensor Data 575 - Device notification app operation type 576 - Device notification app data update 577 - Device request version check 578 - Equipment request ota 579 - Device notification app SMS message 580 Jump to description Device control app camera 581 Jump to description Device notification firmware speaker volume modification 591 Jump to description Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:57:52 "},"doc/model/IDODisplayModeParamModel.html":{"url":"doc/model/IDODisplayModeParamModel.html","title":"IDODisplayModeParamModel","keywords":"","body":"IDODisplayModeParamModel Properties Type Description mode Int Mode0: Default1: Landscape2: Portrait3: Flip (180 degrees) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODownloadLanguageModel.html":{"url":"doc/model/IDODownloadLanguageModel.html","title":"IDODownloadLanguageModel","keywords":"","body":"IDODownloadLanguageModel Properties Type Description useLang Int Currently used language defaultLang Int Default language fixedLang Int Fixed number of storage languages ​​ maxStorageLang Int Maximum storage languages ​​ ]() collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODownloadLanguageType.html":{"url":"doc/model/IDODownloadLanguageType.html","title":"IDODownloadLanguageType","keywords":"","body":"IDODownloadLanguageType Properties Type Description type Int Invalid: 0, Chinese: 1, English: 2, French: 3, German: 4, Italian: 5, Spanish: 6, Japanese: 7, Polish: 8, Czech: 9 , Romanian: 10, Lithuanian: 11, Dutch: 12, Slovenian: 13, Hungarian: 14, Russian: 15, Ukrainian: 16, Slovak: 17, Danish: 18, Croatia: 19, Indonesian: 20, Korean: 21, Hindi: 22, Portuguese: 23, Turkish: 24, Thai: 25, Vietnamese: 26, Burmese: 27, Philippines Language: 28, Traditional Chinese: 29, Greek: 30, Arabic: 31, Swedish: 32, Finnish: 33, Persian: 34, Norwegian: 35 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOErrorRecordModel.html":{"url":"doc/model/IDOErrorRecordModel.html","title":"IDOErrorRecordModel","keywords":"","body":"IDOErrorRecordModel Properties Type Description type Int 0 query1 clear log resetFlag Int 0 normal1 hard fault2 watchdog service3 assertion reset 4 Power outage5 Other exceptions hwError Int Hardware error code0 Normal1 Accelerometer error2 Heart rate error3 TP error4 Flash memory error Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOFitnessGuidanceParamModel.html":{"url":"doc/model/IDOFitnessGuidanceParamModel.html","title":"IDOFitnessGuidanceParamModel","keywords":"","body":"IDOFitnessGuidanceParamModel 属性 类型 说明 mode Int 健身指导模式开关1：开0：关 startHour Int 开始时间 startMinute Int 开始分钟 endHour Int 结束时间 endMinute Int 结束分钟 notifyFlag Int 通知类型0：无效1：允许2：静默3：禁用 goMode Int 移动开关提醒1：开0：关 repeats Set 重复IDOWeek 集合 isOpen Bool 总开关 targetSteps Int 目标步数 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-03-27 17:57:28 "},"doc/model/IDOFlashBinInfoModel.html":{"url":"doc/model/IDOFlashBinInfoModel.html","title":"IDOFlashBinInfoModel","keywords":"","body":"IDOFlashBinInfoModel Property Type Description status Int Status: 0 - normal, 1 - invalid font, checksum error, 2 - version mismatch version Int protocol version (no assignment required) matchVersion Int font versionprivate let version: IntThe matching version required by the firmware checkCode Int Font library check code Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOFuncSimpleFileOptModel.html":{"url":"doc/model/IDOFuncSimpleFileOptModel.html","title":"IDOFuncSimpleFileOptModel","keywords":"","body":"IDOFuncSimpleFileOptModel Property Type Description error Int Error code0 means success, other means error operate Int Operation type0: Get1: Overwrite2: Delete index Int index number Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOFuncSimpleFileOptParamModel.html":{"url":"doc/model/IDOFuncSimpleFileOptParamModel.html","title":"IDOFuncSimpleFileOptParamModel","keywords":"","body":"IDOFuncSimpleFileOptParamModel 属性 类型 说明 operate Int 操作类型0：获取1：覆盖2：删除3：复制 index Int 索引号 destIndex Int 目的索引，仅用于复制，其他情况无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOGpsControlModel.html":{"url":"doc/model/IDOGpsControlModel.html","title":"IDOGpsControlModel","keywords":"","body":"IDOGpsControlModel Properties Type Description type Int 1: Enable log2: Disable log3: Write AGPS data4: Erase AGPS data5: Write GPS firmware status Int 0: Invalid1: Command in progress2: Completed errorCode Int 0 means success, non-0 means failure Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOGpsControlParamModel.html":{"url":"doc/model/IDOGpsControlParamModel.html","title":"IDOGpsControlParamModel","keywords":"","body":"IDOGpsControlParamModel Properties Type Description operate Int 1: Control2: Query type Int 1: Enable log2: Disable log3: Write AGPS data4: Erase Except AGPS data5: Write GPS firmware Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOGpsInfoModel.html":{"url":"doc/model/IDOGpsInfoModel.html","title":"IDOGpsInfoModel","keywords":"","body":"IDOGpsInfoModel Properties Type Description errCode Int GPS Error Code0 - Normal, non-zero - Exception fwVersion Int GPS firmware version agpsInfo Int AGPS (Assisted GPS) validity period agpsErrCode Int AGPS Error Code utcYear Int UTC Year utcMonth Int UTC Month utcDay Int UTC utcHour Int UTC utcMinute Int UTC minutes startMode Int Start mode1 - Cold start2 - Warm start gns Int Positioning satellite selection1 - GPS 2 - GLONASS3 - GPS + GLONASS fixStartBit Int Fixed start bitDefault 0, for debugging Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOGpsInfoModelItem.html":{"url":"doc/model/IDOGpsInfoModelItem.html","title":"IDOGpsInfoModelItem","keywords":"","body":"IDOGpsInfoModelItem Properties Type Description type Int Training type186: Rest plan187: Outdoor running plan188: Indoor running plan189: Indoor fitness plan num Int Number of movements Note: The number of actions during rest is zero, and the number of actions during other actions is non-zero items List IDOItemItem collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:06:32 "},"doc/model/IDOGpsStatusModel.html":{"url":"doc/model/IDOGpsStatusModel.html","title":"IDOGpsStatusModel","keywords":"","body":"IDOGpsStatusModel Attributes Type Description gpsRunStatus Int GPS running status0 - Not running1 - Searching for satellites2 - Tracking agpsIsValid Int AGPS (Assisted GPS) validity in hours )Non-zero value indicates validity Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHandWashingReminderParamModel.html":{"url":"doc/model/IDOHandWashingReminderParamModel.html","title":"IDOHandWashingReminderParamModel","keywords":"","body":"IDOHandWashingReminderParamModel Property Type Description onOff Int 0: Off1: OnDefault off startHour Int The start time of the reminder startMinute Int The start minute of the reminder endHour Int Reminder End time endMinute Int Reminder end minutes repeats Set Repeat IDOWeek Set interval Int Reminder interval (minutes) Default is 60 minutes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:06:57 "},"doc/model/IDOHeartModeModel.html":{"url":"doc/model/IDOHeartModeModel.html","title":"IDOHeartModeModel","keywords":"","body":"IDOHeartModeModel Property Type Description updateTime Int The update time as a Unix timestamp in seconds. If equal to 0, it means getting the current UTC timestamp. mode Int Mode0: Off1: Automatic (5 minutes)2: Continuous monitoring (5 seconds)3: Manual mode (disable automatic) 4: Default type, the firmware will automatically set to the default mode after setting5: Set the corresponding measurement interval6: Intelligent heart rate mode (ID206)Note: 1. If the setSetV3HeartInterval function is configured, mode 0, mode 1, and mode 2 are invalid. 2. When configuring using quick settings, setting setSetV3HeartInterval will activate mode 53. When setting continuous heart rate, if the setSetV3HeartInterval function is configured, the corresponding mode is mode 5. hasTimeRange Int Whether there is a time range. 0: No, 1: Yes measurementInterval Int Measurement interval (in seconds) getSECMode Int The heart rate type currently supported by the watchAll 0 invalid valuesBit0 :5s modeNote: If setSetV3HeartInterval is not enabled in the firmware, 0 will be returned getMinMode Int The heart rate type currently supported by the watch,All 0: invalid valueBit0 : 1 minutebit1: 3 minutesbit2: 5 minutesbit3: 10 minutesbit4: 30 minutesbit5: 285 mode,bit6: 15 Minute ModeNote: If setSetV3HeartInterval is not enabled in the firmware, 0 is returned startHour Int Start time, hours startMinute Int Start time, minutes endHour Int End time , hour endMinute Int End time, minute notifyFlag Int Notification type:0: Invalid1: Allow notification2: Silent notification 3: Turn off notificationNote: If the firmware does not enable v3HeartSetRateModeCustom, this function is invalid highHeartMode Int 1: Turn on smart high heart rate reminder0: Turn offNote: If the firmware does not If v3HeartSetRateModeCustom is turned on, this function is invalid lowHeartMode Int 1: Turn on intelligent low heart rate reminder0: OffNote: If the firmware does not turn on v3HeartSetRateModeCustom, this function is invalid highHeartValue Int Intelligent High heart rate reminder thresholdNote: If v3HeartSetRateModeCustom is not enabled in the firmware, this function is invalid lowHeartValue Int Smart low heart rate reminder thresholdNote: If v3HeartSetRateModeCustom is not enabled in the firmware, this function is invalid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHeartModeParamModel.html":{"url":"doc/model/IDOHeartModeParamModel.html","title":" IDOHeartModeParamModel","keywords":"","body":"IDOHeartModeParamModel Property Type Description updateTime Int The update time as a Unix timestamp in seconds. If equal to 0, it means getting the current UTC timestamp. mode Int Mode0: Off1: Automatic (5 minutes)2: Continuous monitoring (5 seconds)3: Manual mode (disable automatic) 4: Default type, the firmware will automatically set to the default mode after setting5: Set the corresponding measurement interval6: Intelligent heart rate mode (ID206)Note: 1. If the setSetV3HeartInterval function is configured, mode 0, mode 1, and mode 2 are invalid. 2. When configuring using quick settings, setting setSetV3HeartInterval will activate mode 53. When setting continuous heart rate, if the setSetV3HeartInterval function is configured, the corresponding mode is mode 5. hasTimeRange Int Whether there is a time range. 0: No, 1: Yes measurementInterval Int Measurement interval in seconds startHour Int Start time, hours startMinute Int Start time, minutes endHour Int End time, hour endMinute Int End time, minute notifyFlag Int Notification type:0: Invalid1: Allow notification2: Silent notification3: Turn off notificationNote: If v3HeartSetRateModeCustom is not enabled in the firmware, this function is invalid highHeartMode Int 1: Turn on smart high heart rate reminder0: Turn offNote: If the firmware does not enable v3HeartSetRateModeCustom, this function is invalid lowHeartMode Int 1: Enable intelligent low heart rate reminder0: DisableNote: If the firmware does not enable v3HeartSetRateModeCustom, this function is invalid highHeartValue Int Intelligent high heart rate reminder thresholdNote: If v3HeartSetRateModeCustom is not enabled in the firmware, this function is invalid lowHeartValue Int Intelligent low heart rate reminder thresholdNote: If v3HeartSetRateModeCustom is not enabled in the firmware, this function is invalid Invalid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHeartRateModeModel.html":{"url":"doc/model/IDOHeartRateModeModel.html","title":"IDOHeartRateModel","keywords":"","body":"IDOHeartRateModeModel Properties Type Description mode Int 0: Off1: Manual mode2: Automatic3: Continuous monitoring-1: Invalid hasTimeRange Int Whether there is a time range 0 : None 1: Yes measurementInterval Int Measurement interval (minutes) startHour Int Start time, hour startMinute Int Start time, minute endHour Int End time, hour endMinute Int end time, minutes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHeartRateModeParamModel.html":{"url":"doc/model/IDOHeartRateModeParamModel.html","title":"IDOHeartRateModeParamModel","keywords":"","body":"IDOHeartRateModeParamModel Property Type Description mode Int 0: Off1: Automatic (5 minutes)2: Continuous monitoring (5 seconds)3: Manual mode hasTimeRange Int Time range0: No1: Yes startHour Int Start time (24-hour clock, 0-23) startMinute Int Start minute (0-59) endHour Int End time endMinute Int End minute measurementInterval Int Measurement intervalUnit: minutes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHeartRateModeSmartParamModel.html":{"url":"doc/model/IDOHeartRateModeSmartParamModel.html","title":"IDOHeartRate ModeSmartParamModel","keywords":"","body":"IDOHeartRateModeSmartParamModel Property Type Description mode Int Switch0: Off1: On notifyFlag Int Notification type0: Invalid1: Allow notification2: Silent Notifications3: Disable notifications highHeartMode Int 1: Enable smart high heart rate alerts0: Disable lowHeartMode Int 1: Enable smart low heart rate alerts0: Disable highHeartValue Int Smart high heart rate alert threshold lowHeartValue Int Smart low heart rate alert threshold startHour Int Heart rate monitoring start time (hours) startMinute Int Heart rate monitoring start time (minutes) endHour Int Heart rate monitoring end time (hour) endMinute Int Heart rate monitoring end time (minutes) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHistoricalMenstruationParamItem.html":{"url":"doc/model/IDOHistoricalMenstruationParamItem.html","title":"IDOHistoricalMenstruationParamItem","keywords":"","body":"IDOHistoricalMenstruationParamItem Property Type Description year Int Year when menstruation starts mon Int Month when menstruation starts day Int Day when menstruation starts menstrualDay Int Menstrual length (days) cycleDay Int Cycle Length (days) ovulationIntervalDay Int The interval from the next menstrual period to the day of ovulation is usually 14 days. ovulationBeforeDay Int The number of fertile days before ovulation day is usually 5 days, at this time ovulationAfterDay Int The number of fertile days after ovulation day is usually 5 days, at this time Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOHistoricalMenstruationParamModel.html":{"url":"doc/model/IDOHistoricalMenstruationParamModel.html","title":"IDOHistoricalMenstruationParamModel","keywords":"","body":"IDOHistoricalMenstruationParamModel Property Type Description avgMenstrualDay Int Average menstrual cycle length unit: days avgCycleDay Int Average menstrual cycle length unit: days items List IDOHistoricalMenstruationParamItem Collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:08:52 "},"doc/model/IDOHotStartParamModel.html":{"url":"doc/model/IDOHotStartParamModel.html","title":"IDOHotStartParamModel","keywords":"","body":"IDOHotStartParamModel Properties Type Description tcxoOffset Int TCXO offset longitude Int Longitude (multiplied by 10^6) latitude Int Latitude (multiplied by 10^6) altitude Int Altitude (multiplied by 10) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:09:50 "},"doc/model/IDOItemItem.html":{"url":"doc/model/IDOItemItem.html","title":"IDOItemItem","keywords":"","body":"IDOItemItem Properties Type Description type Int Action type1: Fast walking2: Jogging3: Medium speed running4: Fast running time Int Target time unit: seconds heightHeart Int low heart rate range lowHeart Int high heart rate range Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOLanguageLibraryItem.html":{"url":"doc/model/IDOLanguageLibraryItem.html","title":"IDOLanguageLibraryItem","keywords":"","body":"IDOLanguageLibraryItem Properties Type Description languageType IDOLanguageType language type languageVersion Int language version number Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOLanguageLibraryModel.html":{"url":"doc/model/IDOLanguageLibraryModel.html","title":"IDOLanguageLibraryModel","keywords":"","body":"IDOLanguageLibraryModel Properties Type Description useLang Int Currently used language defaultLang Int Default language fixedLang Int Fixed number of storage languages ​​ maxStorageLang Int Maximum storage language items List IDOLanguageLibraryIte collection itemsUser List IDOLanguageLibraryIte collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:10:47 "},"doc/model/IDOLiveDataModel.html":{"url":"doc/model/IDOLiveDataModel.html","title":"IDOLingDataModel","keywords":"","body":"IDOLiveDataModel Property Type Description totalStep Int Total steps totalCalories Int Total calories (kcal) totalDistances Int Total distance (meters) totalActiveTime Int Total active time in seconds heartRate Int Heart rate data (beats per minute) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOLongSitParamModel.html":{"url":"doc/model/IDOLongSitParamModel.html","title":"IDOLongSitParamModel","keywords":"","body":"IDOLongSitParamModel Property Type Description startHour Int Sedentary reminder start time (hours) startMinute Int Sedentary reminder start time (minutes) endHour Int Sedentary reminder end time (hours) endMinute Int long Sit reminder end time (minutes) interval Int Interval (in minutes) Value should be greater than 15 minutes repetitions Int Repeat with switchbit0: 0 means off, 1 means openbit1-7: 0 means no repetition, 1 means repetition Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOLostFindParamModel.html":{"url":"doc/model/IDOLostFindParamModel.html","title":" IDOLostFindParamModel","keywords":"","body":"IDOLostFindParamModel Property Type Description mode Int Mode0: No anti-lost1: Short-distance anti-lost2: Mid-distance anti-lost3: Long-distance anti-lost Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMainSportGoalModel.html":{"url":"doc/model/IDOMainSportGoalModel.html","title":"IDOMainSportGoalModel","keywords":"","body":"IDOMainSportGoalModel Properties Type Description calorie Int Activity calorie goal in kilocaloriesRequires firmware to enable menu \"setCalorieGoal\" distance Int Target distance in meters calorieMin Int Minimum activity calorie value calorieMax Int Maximum activity caloric value midHighTimeGoal Int Medium to high exercise time goal in seconds Requires firmware to enable the menu \"setMidHighTimeGoal\" walkGoalTime Int Goal time in hours ) timeGoalType Int 0: invalid1: Daily goal2: Weekly goalRequires firmware to enable the menu getSupportSetGetTimeGoalTypeV2 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMainUISortItem.html":{"url":"doc/model/IDOMainUISortItem.html","title":"IDOMainUISortItem","keywords":"","body":"IDOMainUISortItem Properties Type Description locationX Int Coordinate x-axis, starting from 1 locationY Int Coordinate y-axis, starting from 1A y-axis represents a horizontal grid sizeType Int 0: invalid 1: large Icon 2: Small icon widgetsType Int Control type0: Invalid1: Week/date2: Number of steps3: Distance4 : Calories5: Heart rate6: Battery supportSizeType Int Editable icon type supported by firmware0: Invalid1: Large Icon2: Small icon3: Large icon + small icon Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:09:06 "},"doc/model/IDOMainUISortModel.html":{"url":"doc/model/IDOMainUISortModel.html","title":"IDOMainUISortModel","keywords":"","body":"IDOMainUISortModel Properties Type Description errCode Int 0: success, non-zero: failure operate Int operation0: invalid 1: query 2: setting allNum Int The number of lists currently displayed in the firmware supportItems List IDOMainUISortSupportItem collection items List IDOMainUISortItem collection locationX Int Horizontal axis x Starts from 1 locationY Int Vertical axis y Starts from 1 sizeType Int Icon type0: Invalid 1: Large icon 2: Small icon widgetsType Int Reference widget type list widgets_type Widget type list Enumeration value Meaning 0 Invalid 1-100 are small icons 1 Three activity rings (small icon) 2 steps 3 Latest activity 4 Music 5 Weather 6 Heart rate 7 Pressure 8 sleep 9 Alexa 10 Body temperature 11 Blood Oxygen 12 Timer 13 Alarm clock 14 Event reminder (current schedule reminder) 15 Noise 16 Power 17 Telephone (Contact Person) 18 World Time Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:40:45 "},"doc/model/IDOMainUISortParamModel.html":{"url":"doc/model/IDOMainUISortParamModel.html","title":"IDOMainUISortParamModel","keywords":"","body":"IDOMainUISortParamModel Properties Type Description operate Int Operation0: Invalid 1: Query 2: Settings locationX Int Coordinate x-axis, starting from 1 locationY Int Coordinate y-axis, starting from 1 A y-axis represents a horizontal grid sizeType Int 0: Invalid 1: Large icon 2: Small icon widgetsType Int Control type0: Invalid1: Week/ Date2: Steps3: Distance4: Calories5: Heart rate6: Battery items List int collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:12:37 "},"doc/model/IDOMainUISortSupportItem.html":{"url":"doc/model/IDOMainUISortSupportItem.html","title":"IDOMainUISortSupportItem","keywords":"","body":"IDOMainUISortSupportItem Properties Type Description widgetsType Int Control type0: Invalid1: Week/date2: Number of steps3: Distance4: Calories5: Heart rate6: Battery supportSizeType Int Editable icon type supported by firmware0: Invalid1: Large icon2: Small icon3: Large icon + small icon Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:15:23 "},"doc/model/IDOMtuInfoModel.html":{"url":"doc/model/IDOMtuInfoModel.html","title":"IDOMtuInfoModel","keywords":"","body":"IDOMtuInfoModel Properties Type Description status Int 0: The data is valid1: The data is invalid, please wait a moment and try again. If the data is invalid, the MTU is 20. rxMtu Int MTU for data received by the application txMtu Int MTU for data sent by the application phySpeed ​​ Int Physical layer speed0: Invalid1000: 1M 2000: 2M512: 512K dleLength Int DLE length0: Not supported Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMusicControlParamModel.html":{"url":"doc/model/IDOMusicControlParamModel.html","title":"IDOMusicControlParamModel","keywords":"","body":"IDOMusicControlParamModel Description Type Properties Status: 0: Invalid 1: Play 2: Pause 3: Stop Int status Current play time unit: seconds Int curTimeSecond Total play time unit: seconds Int totalTimeSecond Music name ( Maximum 63 bytes) String musicName Singer name (maximum 63 bytes)This value does not apply if v3MusicControl02AddSingerName is not enabled on the firmware String singerName Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:44:51 "},"doc/model/IDOMusicFolderItem.html":{"url":"doc/model/IDOMusicFolderItem.html","title":"IDOMusicFolderItem","keywords":"","body":"IDOMusicFolderItem Properties Type Description folderID Int Playlist (folder) id, ranging from 1 to 10 musicNum Int Number of songs in the playlist, up to 100 folderName String Playlist (folder) name, up to 19 bytes musicIndex List int Collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:45:32 "},"doc/model/IDOMusicInfoModel.html":{"url":"doc/model/IDOMusicInfoModel.html","title":"IDOMusicInfoModel","keywords":"","body":"IDOMusicInfoModel Properties Type Description allMemory Int Firmware SDK card informationTotal spaceUnit: Byte usedMemory Int Firmware SDK card informationCurrently used space (in bytes)Uint:Byte usefulMemory Int Firmware SDK card informationAvailable spaceUnit: Byte folderItems List IDOMusicFolderItem collection musicItems List IDOMusicItem collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:46:50 "},"doc/model/IDOMusicItem.html":{"url":"doc/model/IDOMusicItem.html","title":"IDOMusicItem","keywords":"","body":"IDOMusicItem Attributes Type Description musicID Int Music id, starting from 1 musicMemory Int Space occupied by music musicName String Music name, up to 44 bytes singerName String Singer name, up to 29 bytes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMusicOnOffParamModel.html":{"url":"doc/model/IDOMusicOnOffParamModel.html","title":"IDOMusicOnOffParamModel","keywords":"","body":"IDOMusicOnOffParamModel Properties Type Description onOff Int 1: On0: Off showInfoStatus Int Show song information switch1: On0: OffRequires firmware support menu: supportV2SetShowMusicInfoSwitch Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMusicOpearteParamModel.html":{"url":"doc/model/IDOMusicOpearteParamModel.html","title":"IDOMusicOpearteParamModel","keywords":"","body":"IDOMusicOpearteParamModel Properties Type Description musicOperate Int Music operation0: Invalid operation1: Delete music2: Add music folderOperate Int Folder (playlist) operation0: Invalid operation1: Delete folder2: Add folder3: Modify playlist4: Import playlist5: Delete music Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMusicOperateModel.html":{"url":"doc/model/IDOMusicOperateModel.html","title":"IDOMusicOperateModel","keywords":"","body":"IDOMusicOperateModel Properties Type Description operateType Int Operation type:0: Invalid operation1: Delete music2: Add music3: Delete folder4: Add folder5: Modify the playlist6: Import the playlist7: Delete the music in the playlist version Int Firmware SDK card informationTotal space errCode Int 0: success; non-zero: failure musicId Int Add music successfully and return music id folderItems List IDOMusicFolderItem Collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:18:18 "},"doc/model/IDONotDisturbStatusModel.html":{"url":"doc/model/IDONotDisturbStatusModel.html","title":"IDONotDisturbStatusModel","keywords":"","body":"IDONotDisturbStatusModel 属性 类型 说明 switchFlag Int 开关状态1：开0：关-1：不支持 startHour Int 开始时间 startMinute Int 开始分钟 endHour Int 结束时间 endMinute Int 结束分钟 haveTimeRange Int 是否有时间范围0：无效1：无时间范围2：有时间范围 weekRepeat Int 重复bit0：无效(bit1 - bit7)：周一至周日 noontimeRestOnOff Int 中午休息开关、耳机提醒开关1：开0：关-1：不支持 noontimeRestStartHour Int 提醒开始时间 noontimeRestStartMinute Int 提醒开始分钟 noontimeRestEndHour Int 提醒结束时间 noontimeRestEndMinute Int 提醒结束分钟 allDayOnOff Int 全天免打扰开关1：开0：关-1：不支持 intelligentOnOff Int 智能免打扰开关1：开0：关-1：不支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMesaageParamItem.html":{"url":"doc/model/IDONoticeMesaageParamItem.html","title":"IDONoticeMesaageParamItem","keywords":"","body":"IDONoticeMesaageParamItem 属性 类型 说明 language Int 语言类型 name String 国家对应的应用名称（最大49字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMesaageParamModel.html":{"url":"doc/model/IDONoticeMesaageParamModel.html","title":"IDONoticeMesaageParamModel","keywords":"","body":"IDONoticeMesaageParamModel 属性 类型 说明 verison Int 协议库版本号 osPlatform Int 系统0：无效，1：Android，2：iOS evtType Int 当前模式 0：无效，1：消息提醒 notifyType Int 消息枚举类型 最大值：20000 msgID Int 消息ID 仅当evt_type为消息提醒且msg_ID不为0时有效 appItemsLen Int 国家/地区数量和语言详细信息 contact String 联系人姓名（最大 63 字节） phoneNumber String 电话号码（最大 31 字节） msgData String 消息内容（最大249字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMessageParamModel.html":{"url":"doc/model/IDONoticeMessageParamModel.html","title":"IDONoticeMessageParamModel","keywords":"","body":"IDONoticeMessageParamModel 属性 类型 说明 verison Int 协议库版本号默认version=1Version=2为发送格式带msg_id evtType Int 消息应用类型 msgID Int 消息ID若evt_type为消息提醒，则mesg_ID有效 supportAnswering Bool 支持接听：1不支持接听：0 supportMute Bool 支持静音：1不支持静音：0 supportHangUp Bool 支持挂断：1不支持挂断：0 msgData String 消息数据 contact String 联系人姓名（最大 63 字节） phoneNumber String 电话号码（最大 31 字节） dataText String 消息内容（最大249字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMessageStateItem.html":{"url":"doc/model/IDONoticeMessageStateItem.html","title":"IDONoticeMessageStateItem","keywords":"","body":"IDONoticeMessageStateItem Properties Type Description evtType int Event type notifyState int Notification status1: Allow notifications2: Silent notifications3: Close notifications picFlag int Applicable when replying, Set this parameter to 00: Invalid1: Download the corresponding picture2: No corresponding picture Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:23:03 "},"doc/model/IDONoticeMessageStateModel.html":{"url":"doc/model/IDONoticeMessageStateModel.html","title":"IDONoticeMessageStateModel","keywords":"","body":"IDONoticeMessageStateModel Properties Type Description errCode Int Error code: 0 means success, non-0 means failure operat Int Operation1: Add2: Modify3: Get query allOnOff Int Query validReply the overall notification switch status1: Turn on all notifications,0: Turn off all notifications-1: Invalid items List IDONoticeMessageStateItemItem Collection musicItems List IDOMusicItem Collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:23:54 "},"doc/model/IDONoticeMessageStateParamModel.html":{"url":"doc/model/IDONoticeMessageStateParamModel.html","title":"IDONoticeMessageStateParamModel","keywords":"","body":"IDONoticeMessageStateParamModel Properties Type Description operat Int Operation 1: Add 2: Modify 3: Get query allOnOff Int Only add and modifyOverall notification switch1: Turn on all notifications0: Turn off all Notification allSendNum Int Total number of packets sentSend more than 100 packets in batchesall_send_num = now_send_index indicates sending is completed nowSendIndex Int Current sending order items List IDONoticeMessageStateItem Collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDONotificationCenterModel.html":{"url":"doc/model/IDONotificationCenterModel.html","title":"IDONotificationCenterModel","keywords":"","body":"IDONotificationCenterModel Properties Type Description notifySwitch Int Notification reminder switch statusCode Int Status0: Unknown timeout1: Success2: Failure (cancelled)3: Firmware pairing timeout errCode Int 0: SuccessNon-zero: Failure Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDONotificationStatusParamModel.html":{"url":"doc/model/IDONotificationStatusParamModel.html","title":"IDONotificationStatusParamModel","keywords":"","body":"IDONotificationStatusParamModel Property Type Description notifyFlag Int Notification type:1: Allow notification2: Silent notification3: Disable notification Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDORunPlanParamModel.html":{"url":"doc/model/IDORunPlanParamModel.html","title":"IDORunPlanParamModel","keywords":"","body":"IDORunPlanParamModel Property Type Description verison Int Protocol library version number operate Int Operation1: Start plan2: Send plan data3: End plan4: Query running plan type Int Plan type1: 3-kilometer running plan2: 5-kilometer running plan3: 10-kilometer running plan4: Half-marathon training ( Phase 2)5: Marathon training (Phase 2) dayNum Int Planned daysApplicable when running for 2 days year Int Exercise plan start time month Int Exercise plan start time day Int Exercise plan start time hour Int Exercise plan start time min Int Exercise plan start time sec Int Exercise plan start time items List IDOGpsInfoModelItem collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:25:28 "},"doc/model/IDOSchedulerReminderItem.html":{"url":"doc/model/IDOSchedulerReminderItem.html","title":"IDOSchedulerReminderItem","keywords":"","body":"IDOSchedulerReminderItem 属性 类型 说明 id Int 提醒事件 ID。应用程序发送的增量值，从0开始 repeatType Int 重复时间如果使用getSupportSetRepeatWeekTypeOnScheduleReminderV3启用，则设置基于周的重复的bit1-bit7（周一到周日，位0作为通用开关）设置重复类型（0：无效， 1：一次、2：每天、3：每周、4：每月、5：每年）（如果通过getSupportSetRepeatTypeOnScheduleReminderV3启用） remindOnOff Int 每日提醒开关0：关，1：开 state Int 状态码0：无效，1：已删除，2：启用 title String 标题内容。最大 74 字节 note String 提醒内容。最大 149 字节 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:25:33 "},"doc/model/IDOSchedulerReminderModel.html":{"url":"doc/model/IDOSchedulerReminderModel.html","title":" IDOSchedulerReminderModel","keywords":"","body":"IDOSchedulerReminderModel Properties Type Description operate Int Operation type0: Invalid1: Add2: Delete3: Query4: Modify errCode Int Error code . 0 if successful, non-zero if error Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOScientificSleepSwitchParamModel.html":{"url":"doc/model/IDOScientificSleepSwitchParamModel.html","title":"IDOScientificSleepSwitchParamModel","keywords":"","body":"IDOScientificSleepSwitchParamModel Property Type Description mode Int Mode2: Scientific sleep1: Normal sleep startHour Int Start time - hour startMinute Int Start time - minute endHour Int end time - hours endMinute Int end time - minutes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOScreenBrightnessModel.html":{"url":"doc/model/IDOScreenBrightnessModel.html","title":"IDOScreenBrightnessModel","keywords":"","body":"IDOScreenBrightnessModel Properties Type Description level Int Brightness level(0-100) opera Int 0 automatic1 manualIf it is an automatic synchronization configuration, please send 00; if it is a user adjustment, please Send 01 mode Int 0 Specify level1 Use ambient light sensor2 Level does not matter autoAdjustNight Int Automatic brightness adjustment at night0 Invalid, defined by firmware 1 Off2 Automatic brightness adjustment at night3 Night brightness reduction using set time startHour Int start time hours startMinute Int start time minutes endHour Int end time hours endMinute Int end time minutes nightLevel Int night brightness showInterval Int display interval Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSendRunPlanModel.html":{"url":"doc/model/IDOSendRunPlanModel.html","title":"IDOSendRunP lanModel","keywords":"","body":"IDOSendRunPlanModel Properties Type Description errCode Int 00: Success, 01: Failure, 02: Another run plan is enabled version Int Protocol library version number operate Int Operation:1: Start plan2: Send plan data3: End plan4: Query running plan type Int Plan type:1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (second stage)5: Marathon training (second stage) year Int plan Implementation start time year month Int Planned implementation start time month day Int Planned implementation start time day hour Int Planned implementation start time hour min Int Planned implementation start Time minutes sec Int Plan implementation start time seconds Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSetNoticeStatusModel.html":{"url":"doc/model/IDOSetNoticeStatusModel.html","title":"IDOSetNoticeStatusModel","keywords":"","body":"IDOSetNoticeStatusModel Properties Type Description notifySwitch IDONoticeNotifySwitchState notification reminder switch callSwitch IDONoticeCallSwitchState Incoming call reminder switch msgAllSwitch IDONoticeMsgAllSwitchState Message application master switch callDelay Int Call delay isOnSms Bool SMS reminder isOnEmail Bool Email reminder isOnWeChat Bool WeChat reminder isOnQq Bool qq reminder isOnWeibo Bool Weibo reminder isOnFaceBook Bool FaceBook Reminder isOnTwitter Bool Twitter Alert isOnWhatsapp Bool Whatsapp Reminder isOnMessenger Bool Messenger reminder isOnInstagram Bool Instagram Reminder isOnLinkedIn Bool LinkedIn Alert isOnCalendar Bool Calendar Reminder isOnSkype Bool Skype Reminder isOnAlarm Bool Alarm reminder isOnPokeman Bool Pokeman (other) reminder isOnVkontakte Bool Vkontakte reminder isOnLine Bool Line Reminder isOnViber Bool Viber reminder isOnKakaoTalk Bool KakaoTalk Reminder isOnGmail Bool Gmail Reminder isOnOutlook Bool Outlook Reminder isOnSnapchat Bool Snapchat Reminder isOnTelegram Bool Telegram reminder isOnChatwork Bool Chatwork reminder isOnSlack Bool Slack reminder isOnYahooMail Bool Yahoo Mail Reminder isOnTumblr Bool Tumblr Reminder isOnYoutube Bool Youtube Reminder isOnYahooPinterest Bool Yahoo Pinterest Alert isOnKeep Bool Keep Reminder isOnTikTok Bool TikTok Reminder isOnRedbus Bool Redbus reminder isOnDailyhunt Bool Dailyhunt Reminder isOnHotstar Bool Hotstar Reminder isOnInshorts Bool Inshorts reminder isOnPaytm Bool Paytm Reminder isOnAmazon Bool Amazon Reminder isOnFlipkart Bool Flipkart Reminder isOnPrime Bool Prime reminder isOnNetflix Bool Netflix Reminder isOnGpay Bool Gpay reminder isOnPhonpe Bool Phonpe Reminder isOnSwiggy Bool Swiggy Reminder isOnZomato Bool Zomato Reminder isOnMakeMyTrip Bool MakeMyTrip Reminder isOnJioTv Bool JioTv Reminder isOnMicrosoft Bool Microsoft Reminder isOnWhatsAppBusiness Bool WhatsApp Business Reminder isOnNioseFit Bool nioseFit Reminder isOnDidNotCall Bool No call reminder isOnMattersRemind Bool Matter Reminder isOnUber Bool uber reminder isOnOla Bool ola reminder isOnYtMusic Bool yt music reminder isOnGoogleMeet Bool google meet reminder isOnMormaiiSmartwatch Bool mormaii smartwatch Reminder isOnTechnosConnect Bool technos connect reminder isOnEnioei Bool enioei reminder isOnAliexpress Bool aliexpress Reminder isOnShopee Bool shopee reminder isOnTeams Bool teams reminder isOn99Taxi Bool 99 taxi reminder isOnUberEats Bool uber eats reminder isOnLfood Bool l food reminder isOnRappi Bool rappi reminder isOnMercadoLivre Bool mercado Livre Reminder isOnMagalu Bool Magalu Reminder isOnAmericanas Bool Americanas Reminder isOnYahoo Bool Yahoo Reminder isOnInstantemail Bool Instantemail reminder isOnNhnemail Bool nhnemail reminder isOnZohoemail Bool zohoemail reminder isOnExchangeemail Bool Exchangeemail reminder isOn189email Bool 189email Reminder isOnGoogleGmail Bool googleGmail reminder isOnVeryfit Bool Veryfit reminder menu 0x4F isOnGeneral Bool general reminder isOnAlibabaemail Bool 189email Reminder Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:09:54 "},"doc/model/IDOShortcutParamModel.html":{"url":"doc/model/IDOShortcutParamModel.html","title":"IDOShortcutParamModel","keywords":"","body":"IDOShortcutParamModel Properties Type Description mode Int Shortcut key 1 function0: Invalid1: Quickly enter camera control2: Quickly enter sports mode3: Quickly enter do not disturb Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSleepPeriodParamModel.html":{"url":"doc/model/IDOSleepPeriodParamModel.html","title":"IDOSleepPeriodParamModel","keywords":"","body":"IDOSleepPeriodParamModel Attributes Type Description onOff Int switch1 on0 off startHour Int start time (hours) startMinute Int start time (minutes) endHour Int end time (hour) endMinute Int end time (minute) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSpo2SwitchParamModel.html":{"url":"doc/model/IDOSpo2SwitchParamModel.html","title":"IDOSpo2SwitchParamModel","keywords":"","body":"IDOSpo2SwitchParamModel Properties Type Description onOff Int SpO2 All day switch1 On0 Off startHour Int Start time (hour) startMinute Int Start time (minute) endHour Int End time (hours) endMinute Int End time (minutes) lowSpo2OnOff Int Low SpO2 switch1 On0 OffRequires menu setSpo2AllDayOnOff Support lowSpo2Value Int Low SpO2 thresholdRequires support of menu \"v3SupportSetSpo2LowValueRemind\" notifyFlag Int Notification type0: Invalid1: Allow notification 2: Silent notification3: Disable notificationRequires the support of menu \"getSpo2NotifyFlag\" Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSport100SortItem.html":{"url":"doc/model/IDOSport100SortItem.html","title":"IDOSport100SortItem","keywords":"","body":"IDOSport100SortItem Properties Type Description type IDOSportType Sports type flag Int 0: Do not download allBit0: Download small iconBit1: Download large iconBit2: Downloading iconBit3: Downloading smallest icon Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSport100SortModel.html":{"url":"doc/model/IDOSport100SortModel.html","title":"IDOSport100SortModel","keywords":"","body":"IDOSport100SortModel Properties Type Description errCode Int 0: Success, non-zero: Failure operate Int Operation 0: Invalid 1: Query 2: Settings minShowNum Int Minimum number of items to display, at least 1 maxShowNum Int Maximum number of displayed items, up to 20 nowUserLocation Int Displays the current location of the added sports items. The application displays based on the location. The device added before corresponds to the location, and the device added later corresponds to the location. The position after the should position. Only valid for queries items List Collection IDOSport100SortItem Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSport100SortParamModel.html":{"url":"doc/model/IDOSport100SortParamModel.html","title":"IDOSport100SortParamModel","keywords":"","body":"IDOSport100SortParamModel 属性 类型 说明 operate Int 操作0：无效 1：查询 2：设置 nowUserLocation Int 显示的添加运动的当前位置 items [Int] 运动排序列表 最大值150个 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 16:56:03 "},"doc/model/IDOSportGoalParamModel.html":{"url":"doc/model/IDOSportGoalParamModel.html","title":"IDOSportGoalParamModel","keywords":"","body":"IDOSportGoalParamModel Properties Type Description sportStep Int Number of steps for exercise goal walkGoalSteps Int Hourly walking goal step setting targetType Int Goal type setting0: Invalid1: Daily goal2: Weekly goalsRequires menu getStepDataTypeV2 support Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSportModeSelectParamModel.html":{"url":"doc/model/IDOSportModeSelectParamModel.html","title":"IDOSportModeSelectParamModel","keywords":"","body":"IDOSportModeSelectParamModel Properties Type Description flag Int 0: Invalid1: Set the fast motion type - sport_type1 & sport_type2 & sport_type3 & sport_type42: Set the specific sport type sportType1 Int Fast motion type 1 Flags: 1 valid sportType2 Int Fast motion type 2 Flags: 1 valid sportType3 Int Fast motion type 3 Flags: 1 valid sportType4 Int Fast Sport Type 4Flags: 1 Valid sportType0Walk Bool Type: Walking, 0 Not Supported, 1 Supported Flags: 2 Valid sportType0Run Bool Type: Running, 0 Not Supported, 1 supported Flags: 2 valid sportType0ByBike Bool Type: Cycling, 0 not supported, 1 supported Flags: 2 valid sportType0OnFoot Bool Type: walking (walking) ), 0 not supported, 1 supported Flags: 2 valid sportType0Swim Bool Type: Swimming, 0 not supported, 1 supported Flags: 2 valid sportType0MountainClimbing Bool Type: Mountaineering, 0 is not supported, 1 is supportedflag: 2 is valid sportType0Badminton Bool Type: badminton, 0 is not supported, 1 is supportedFlag: 2 is valid sportType0Other Bool Type: Others, 0 not supported, 1 supportedFlags: 2 valid sportType1Fitness Bool Type: Fitness, 0 not supported, 1 supportedFlags: 2 valid sportType1Spinning Bool Type: Rotation, 0 not supported, 1 supported Flags: 2 valid sportType1Ellipsoid Bool Type: Ellipsoid, 0 not supported, 1 supported Flags: 2 valid sportType1Treadmill Bool Type : Treadmill, 0 not supported, 1 supportedFlags: 2 valid sportType1SitUp Bool Type: sit-ups, 0 not supported, 1 supportedFlags: 2 valid sportType1PushUp Bool Type: Push-ups, 0 not supported, 1 supported Flags: 2 valid sportType1Dumbbell Bool Type: Dumbbells, 0 not supported, 1 supported Flags: 2 valid sportType1Weightlifting Bool Type: Weightlifting, 0 not supported, 1 supportedFlags: 2 valid sportType2BodybuildingExercise Bool Type: Fitness exercise, 0 not supported, 1 supportedFlags: 2 valid sportType2Yoga Bool Type: Yoga, 0 not supported, 1 supportedFlags: 2 valid sportType2RopeSkipping Bool Type: skipping, 0 not supported, 1 supportedFlags: 2 valid sportType2TableTennis Bool Type: table tennis, 0 not supported, 1 supportedFlags: 2 valid sportType2Basketball Bool Type: basketball, 0 not supported, 1 supportedFlags: 2 valid sportType2Football Bool Type: Football, 0 not supported, 1 supportedFlags: 2 valid sportType2Volleyball Bool Type: Volleyball, 0 not supported, 1 supportedFlags: 2 valid sportType2Tennis Bool Type: Tennis, 0 not supported, 1 supportedFlags: 2 valid sportType3Golf Bool Type: Golf, 0 not supported, 1 supportedFlags: 2 valid sportType3Baseball Bool Type: Baseball, 0 not supported, 1 supportedFlags: 2 valid sportType3Skiing Bool Type: Skiing, 0 not supported, 1 supportedFlags: 2 valid sportType3RollerSkating Bool Type: Roller skating, 0 not supported, 1 supportedFlags: 2 valid sportType3Dance Bool Type: Dance, 0 not supported, 1 supportedFlags: 2 valid sportType3StrengthTraining Bool Type: Strength training, 0 not supported, 1 supportedFlags: 2 valid sportType3CoreTraining Bool Type: Core training, 0 not supported, 1 supportedFlags: 2 valid sportType3TidyUpRelax Bool Type: TidyUpRelax, 0 not supported, 1 supportedFlags: 2 valid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSportModeSortParamModel.html":{"url":"doc/model/IDOSportModeSortParamModel.html","title":"IDOSportModeSortParamModel","keywords":"","body":"IDOSportModeSortParamModel Properties Type Description index Int Sorting index (starts from 1, 0 is invalid) type IDOSportType Motion type Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSportSortModel.html":{"url":"doc/model/IDOSportSortModel.html","title":"IDOSportSortModel del","keywords":"","body":"IDOSportSortModel Properties Type Description errCode Int 0: Success, non-zero: Failure operate Int Operation0: Invalid 1: Query 2: Settings sportType IDOSportType Sports type nowUserLocation Int Displays the current location of the added sports item, and the application displays it based on the location. The device added before corresponds to the location, and the device added later corresponds to the location after the location. Only valid for query items [Int] Setting list Maximum value 50 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSportSortParamModel.html":{"url":"doc/model/IDOSportSortParamModel.html","title":"IDOSportSortParamModel","keywords":"","body":"IDOSportSortParamModel Properties Type Description operate Int Operation0: Invalid 1: Query 2: Settings sportType IDOSportType Sport Type nowUserLocation Int Displayed added sport The current position of Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOStepGoalModel.html":{"url":"doc/model/IDOStepGoalModel.html","title":"IDOStepGoalModel","keywords":"","body":"IDOStepGoalModel 属性 类型 说明 step Int 每日步数目标 stepWeek Int 每周步数目标启用 getStepDataTypeV2 时有效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:13:28 "},"doc/model/IDOStressCalibrationModel.html":{"url":"doc/model/IDOStressCalibrationModel.html","title":"IDOStepGoalModel","keywords":"","body":"IDOStressCalibrationModel Properties Type Description retCode Int 0: Success1: Failure-Calibrating2: Failure-Charging3: Failure-Not Weared4: Failure-Sports Scene Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOStressCalibrationParamModel.html":{"url":"doc/model/IDOStressCalibrationParamModel.html","title":" IDOStressCalibrationParamModel","keywords":"","body":"IDOStressCalibrationParamModel Property Type Description stressScore Int Stress score, ranging from 1 to 10 status Int 0: Start calibration settings1: Cancel calibration settings Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOStressValModel.html":{"url":"doc/model/IDOStressValModel.html","title":"IDOStressValModel","keywords":"","body":"IDOStressValModel Property Type Description stressVal Int stress value threshold Int critical point Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:34:16 "},"doc/model/IDOSupportMaxSetItemsNumModel.html":{"url":"doc/model/IDOSupportMaxSetItemsNumModel.html","title":"IDOSupportMaxSetItemsNumModel","keywords":"","body":"IDOSupportMaxSetItemsNumModel Property Type Description contactMaxSetNum Int The firmware supports the maximum number of regular contacts set by the app (default 10) reminderMaxSetNum Int The firmware supports the maximum number of schedule reminders set by the app (default 30) msgMaxBuffSize Int Message reminder sending buffer Maximum size (default 250 bytes) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSyncContactModel.html":{"url":"doc/model/IDOSyncContactModel.html","title":"IDOSyncContactModel","keywords":"","body":"IDOSyncContactModel Properties Type Description errCode Int Error code, 0 means success, non-0 means error code operat Int Operation0: Invalid1: Setting2: Query3 :Set emergency contacts (requires menu to support getSupportSetGetEmergencyContactV3)4: Query emergency contacts (requires menu to support getSupportSetGetEmergencyContactV3) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:36:03 "},"doc/model/IDOSyncContactParamModel.html":{"url":"doc/model/IDOSyncContactParamModel.html","title":"IDOSyncContactParamModel","keywords":"","body":"IDOSyncContactParamModel Properties Type Description operat Int Operation0: Invalid1: Set contact2: Query contact3: Set emergency contact (requires getSupportSetGetEmergencyContactV3 support in the menu)4: Query emergency contacts (needs to support getSupportSetGetEmergencyContactV3 in the menu) version int Protocol version (no assignment required) itemsNum Int number of items (no assignment required) items List IDOContactItem Collection Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:37:09 "},"doc/model/IDOTakingMedicineReminderParamModel.html":{"url":"doc/model/IDOTakingMedicineReminderParamModel.html","title":"IDOTakingMedicineReminderParamModel","keywords":"","body":"IDOTakingMedicineReminderParamModel Properties Type Description takingMedicineId Int ID range is 1 to 5 onOff Int 0 means off1 means on startHour Int Start time of the reminder startMinute Int Start minute of the reminder endHour Int Reminder end time endMinute Int Reminder end minute repeats Set RepeatIDOWeek interval Int Reminder interval (minutes)Default is 60 minutes doNotDisturbOnOff Int Do Not Disturb time period switch0 is off1 is onDefault is off doNotDisturbStartHour Int Do Not Disturb start time doNotDisturbStartMinute Int Do Not Disturb start minute doNotDisturbEndHour Int Do Not Disturb end time Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOTemperatureSwitchParamModel.html":{"url":"doc/model/IDOTemperatureSwitchParamModel.html","title":"IDOTemperatureSwitchParamModel","keywords":"","body":"IDOTemperatureSwitchParamModel 属性 类型 说明 mode Int 模式：1：开0：关 startHour Int 开始时间、小时 startMinute Int 开始时间，分钟 endHour Int 结束时间，小时 endMinute Int 结束时间，分钟 unit Int 温度单位设置：1：摄氏度2：华氏度 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-12 11:23:33 "},"doc/model/IDOUnitParamModel.html":{"url":"doc/model/IDOUnitParamModel.html","title":"IDOUnitParamModel","keywords":"","body":"IDOUnitParamModel Properties Type Description distUnit Int Distance unit:0: Invalid1: Kilometer (metric)2: Mile (imperial) weightUnit Int Weight unit:0: invalid1: kg2: lb temp Int Temperature unit:0: invalid1: ℃2: ℉ stride Int Walking stride:0: invalid0: cm language Int language is12HourFormat Int Time format:0: invalid1: 24-hour format2: 12-hour format strideRun Int Running stride:0: invalid1: cmMale default value: 90cm strideGpsCal Int Via GPS stride calibration on/off:0: Invalid1: On2: Off weekStartDate Int The start date of the week:0: Monday1: Sunday3: Saturday calorieUnit Int Calorie unit settings:0: Invalid1: Default kCal2: Cal3: kJ swimPoolUnit Int Pool unit setting:0: invalid1: Default meters2: yards cyclingUnit Int Cycling unit:0: Invalid1: Kilometers2: Miles walkingRunningUnit Int Walking or running unit (km/mile) settings:0: Invalid1: Kilometers2: MilesRequires device firmware setSupportWalkRunUnit Support Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:38:47 "},"doc/model/IDOUpdateStatusModel.html":{"url":"doc/model/IDOUpdateStatusModel.html","title":"IDOUpdateStatusModel","keywords":"","body":"IDOUpdateStatusModel 属性 类型 说明 devVesion Int 固件版本号 state Int 0为正常状态1为升级状态 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOUpHandGestureModel.html":{"url":"doc/model/IDOUpHandGestureModel.html","title":"IDOUpHandGestureParamModel","keywords":"","body":"IDOUpHandGestureModel Properties Type Description endHour Int End time, hours endMinute Int End time, minutes hasTimeRange Int Whether the time range is available 1: Yes 0: No onOff Int Switch 1: On 0: Off -1: Not supported showSecond Int screen on duration in seconds startHour Int start time, hour startMinute Int start time, minute Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOUpHandGestureParamModel.html":{"url":"doc/model/IDOUpHandGestureParamModel.html","title":"IDOUpHandGestureParamModel","keywords":"","body":"IDOUpHandGestureParamModel 属性 类型 说明 onOff Int 开关1：开0：关 showSecond Int 屏幕保持开启的持续时间（以秒为单位） hasTimeRange Int 是否有时间范围1：有0：无 startHour Int 时间范围的开始时间 startMinute Int 时间范围的起始分钟 endHour Int 时间范围的结束小时 endMinute Int 时间范围的结束分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 12:25:27 "},"doc/model/IDOV3NoiseParamModel.html":{"url":"doc/model/IDOV3NoiseParamModel.html","title":"IDOV3NoiseParamModel","keywords":"","body":"IDOV3NoiseParamModel Properties Type Description mode Int All-day ambient noise volume switch1: On0: Off startHour Int Start time (hour) startMinute Int Start time (minute) endHour Int end time (hour) endMinute Int end time (minute) highNoiseOnOff Int threshold switch1: on0: off highNoiseValue Int Threshold Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOVersionInfoModel.html":{"url":"doc/model/IDOVersionInfoModel.html","title":"IDOVersionInfoModel","keywords":"","body":"IDOVersionInfoModel Properties Type Description sdkVersion Int SDK version hrAlgorithmVersion Int Heart rate algorithm version sleepAlgorithmVersion Int Sleep algorithm version stepAlgorithmVersion Int Pedometer algorithm version gestureRecognitionVersion Int Gesture recognition algorithm version pcbVersion Int PCB version (multiplied by 10, for example, 1.1 version multiplied by 11) spo2Version Int Wearable version wearVersion Int SpO2 algorithm version stressVersion Int Stress level algorithm Version kcalVersion Int Calorie algorithm version disVersion Int Distance algorithm version axle3SwimVersion Int 3-axis sensor swimming algorithm version actModeTypeVersion Int Activity pattern recognition algorithm version allDayHrVersion Int All-day heart rate algorithm version gpsVersion Int GPS algorithm version peripheralsVersion Int Peripheral versions of 206 customized projects Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOVoiceReplyParamModel.html":{"url":"doc/model/IDOVoiceReplyParamModel.html","title":"IDOVoiceReplyParamModel","keywords":"","body":"IDOVoiceReplyParamModel Property Type Description flagIsContinue Int Continue recording flag0: Stop recording, 1: Continue recording title String Title data, maximum 31 bytes textContent String Content data, maximum 511 bytes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWalkRemindModel.html":{"url":"doc/model/IDOWalkRemindModel.html","title":"IDOWalkRemindModel","keywords":"","body":"IDOWalkRemindModel 属性 类型 说明 onOff Int 0 关，1 开 goalStep Int 目标步骤（已弃用） startHour Int 开始时间（小时） startMinute Int 开始时间（分钟） endHour Int 结束时间（小时） endMinute Int 结束时间（分钟） repeats Set 重复IDOWeek isOpen Bool 重复开关 goalTime Int 目标时间（已弃用） notifyFlag Int 通知类型0：无效1：允许通知2：静默通知3：关闭通知需要固件启用setWalkReminderAddNotify doNotDisturbOnOff Int 请勿打扰开关0 关闭1 开启需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbStartHour Int 请勿打扰开始时间（小时）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbStartMinute Int 请勿打扰开始时间（分钟）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbEndHour Int 请勿打扰结束时间（小时）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbEndMinute Int 请勿打扰结束时间（分钟）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-03-27 18:02:01 "},"doc/model/IDOWalkRemindTimesItem.html":{"url":"doc/model/IDOWalkRemindTimesItem.html","title":"IDOWalkRemindTimesItem","keywords":"","body":"IDOWalkRemindTimesItem Properties Type Description hour Int Walking reminder time: hour min Int Walking reminder time: minutes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWalkRemindTimesParamModel.html":{"url":"doc/model/IDOWalkRemindTimesParamModel.html","title":"IDOWalkRemindTimesParamModel","keywords":"","body":"IDOWalkRemindTimesParamModel Property Type Description onOff Int Switch: 1: on 0: off items [IDOWalkRemindTimesItem] Walking reminder details Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:39:40 "},"doc/model/IDOWallpaperDialReplyV3Model.html":{"url":"doc/model/IDOWallpaperDialReplyV3Model.html","title":"IDOWallpaperDialReplyV3Model","keywords":"","body":"IDOWallpaperDialReplyV3Model 属性 类型 说明 errCode Int 0 表示成功，非 0 表示失败 operate Int 操作：0为查询，1为设置，2为删除壁纸表盘 location Int 设置位置信息 hideType Int 隐藏类型 timeColor Int 时间控制颜色 widgetType Int 控制类型 widgetIconColor Int 小部件图标的颜色（保留 1 个字节 + R（1 个字节）+ G（1 个字节）+ B（1 个字节）） widgetNumColor Int 小部件编号的颜色（保留 1 个字节 + R（1 个字节）+ G（1 个字节）+ B（1 个字节）） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWallpaperDialReplyV3ParamModel.html":{"url":"doc/model/IDOWallpaperDialReplyV3ParamModel.html","title":"IDOWallpaperDialReplyV3ParamModel","keywords":"","body":"IDOWallpaperDialReplyV3ParamModel Property Type Description operate Int Operation: 0 is query, 1 is setting, 2 is deleting wallpaper dial location Int Set location information, refer to the 9-grid layout hideType Int Hide type: 0 means display all, 1 Indicates hidden sub-controls (icons and numbers) timeColor Int time control color (reserved 1 byte + R (1 byte) + G (1 byte) + B (1 byte)) widgetType Int Control type: 1 for week/date, 2 for steps, 3 for distance, 4 for calories, 5 for heart rate, 6 for battery widgetIconColor Int Color of the widget icon (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widgetNumColor Int Color of the widget number (1 byte reserved + R (1 byte) ) + G (1 byte) + B (1 byte)) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWatchDialIdModel.html":{"url":"doc/model/IDOWatchDialIdModel.html","title":"IDOWatchDialIdModel","keywords":"","body":"IDOWatchDialIdModel Properties Type Description watchId Int watch ID Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWatchDialInfoModel.html":{"url":"doc/model/IDOWatchDialInfoModel.html","title":"IDOWatchDialInfoModel","keywords":"","body":"IDOWatchDialInfoModel Properties Type Description blockSize Int Compression block size familyName String Family name (up to 10 bytes) format Int color format height Int screen height (pixel size) sizex100 Int Size in 100x increments width Int screen width (pixel size) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:43:09 "},"doc/model/IDOWatchDialParamModel.html":{"url":"doc/model/IDOWatchDialParamModel.html","title":"IDOW atchDialParamModel","keywords":"","body":"IDOWatchDialParamModel Property Type Description dialId Int The dial ID that needs to be setDial id0 is invalid, currently supports 1~4 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWatchDialSortItem.html":{"url":"doc/model/IDOWatchDialSortItem.html","title":"IDOWatchDialSortItem","keywords":"","body":"IDOWatchDialSortItem Properties Type Description type Int Watch dial type 1: Ordinary dial, 2: Wallpaper dial, 3: Cloud dial sortNumber Int Serial number, starting from 0, not exceeding the total number of supported watch dials name String Dial ID, maximum 29 bytes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWatchDialSortParamModel.html":{"url":"doc/model/IDOWatchDialSortParamModel.html","title":"IDOWatchDialSortParamModel","keywords":"","body":"IDOWatchDialSortParamModel Property Type Description sortItemNumb Int Number of items in the dial sort list pSortItem [IDOWatchDialSortItem] Contents of the dial sort list Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:44:37 "},"doc/model/IDOWatchFaceModel.html":{"url":"doc/model/IDOWatchFaceModel.html","title":"IDOWatchFaceModel","keywords":"","body":"IDOWatchFaceModel Properties Type Description errCode Int Error code, 0 means success, non-0 means error operate Int Operation:0 - Query the currently used watch face1 - Set the watch face2 - Delete Dial3 - The space size corresponding to the dynamic request space setting fileName String Dial name, up to 29 bytes fileCount Int The number of files requires firmware to enable the function table getWatchDailSetAddSize If operate!=3, the data is the same as before, both are 1, and the saving method is the same as beforeIf operate=3: dynamically request space to set the corresponding space size, this corresponds to the deleted file name list If getWatchDailSetAddSize is not enabled, this field defaults to 1 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:47:21 "},"doc/model/IDOWatchFaceParamModel.html":{"url":"doc/model/IDOWatchFaceParamModel.html","title":" IDOWatchFaceParamModel","keywords":"","body":"IDOWatchFaceParamModel Properties Type Description operate Int Operation:0 - Query the currently used dial1 - Set the dial2 - Delete the dial3 - Dynamically request the space to set the corresponding space size fileName String Watch face name, maximum 29 bytes watchFileSize Int Uncompressed file lengthAfter the firmware opens the function table getWatchDailSetAddSize, the application needs to send this field Before the watch face is transferred, the firmware needs to allocate corresponding space to save, and the uncompressed file length needs to be transferred. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 14:47:59 "},"doc/model/IDOWatchItem.html":{"url":"doc/model/IDOWatchItem.html","title":"IDOWatchItem","keywords":"","body":"IDOWatchItem Properties Type Description type Int Watch face type1: Ordinary watch face2: Wallpaper watch face3: Cloud watch face watchVersion Int The current version number of the watch face (applicable to cloud watch faces) sortNumber Int watch face sequence numberStarts from 0 name String watch face name size Int watch face size in bytesOnly when firmware enables getWatchDailSetAddSize applicable, otherwise the field is invalid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:06:51 "},"doc/model/IDOWatchListModel.html":{"url":"doc/model/IDOWatchListModel.html","title":"IDOWatchListModel","keywords":"","body":"IDOWatchListModel Property Type Description localWatchNum Int Total number of local watch faces cloudWatchNum Int Total number of cloud watch faces wallpaperWatchNum Int Total number of wallpaper watch faces nowShowWatchName String Currently displayed watch face ID, maximum 30 bytes watchFrameMainVersion Int Framework version number, starting from 1 fileMaxSize Int Maximum size of a single file, in kilobytes Units (reserved) watchCapacitySize Int Total watch face capacityUint:ByteSet to 0 if firmware enables setWatchCapacitySizeDisplay userWatchCapacitySize Int Watch face used capacity Uint:ByteIf the firmware enables setWatchCapacitySizeDisplay then set to 0 usableMaxDownloadSpaceSize Int The maximum contiguous space available for downloading watch facesUint:ByteIf the firmware enables setWatchCapacitySizeDisplay then Set to 0 items [IDOWatchItem] watch face list details Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:10:27 "},"doc/model/IDOWatchListV2Model.html":{"url":"doc/model/IDOWatchListV2Model.html","title":"IDOWatchListV2Model","keywords":"","body":"IDOWatchListV2Model Properties Type Description availableCount Int Number of available files remaining fileMaxSize Int Maximum size of a single file in KB items [IDOWatchListV2Item] Watch face list details Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWeatherDataFuture.html":{"url":"doc/model/IDOWeatherDataFuture.html","title":"IDOWeatherDataFuture","keywords":"","body":"IDOWeatherDataFuture Properties Type Description type Int Weather type0x00 Other0x01 Sunny0x02 Cloudy0x03 Cloudy0x04 Rain0x05 Heavy rain0x06 Thunderstorm0x07 Snow0x08 Sleet0x09 Typhoon0x0A Sandstorm0x0B Clear night0x0C Cloudy night0x0D Hot0x0E Cold 0x0F breeze0x10 strong wind0x11 haze0x12 shower0x13 cloudy to sunny0x30 thunder0x31 hail0x32 sand Dust0x33 Tornado minTemp Int Future minimum temperature maxTemp Int Future maximum temperature Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:11:46 "},"doc/model/IDOWeatherDataParamModel.html":{"url":"doc/model/IDOWeatherDataParamModel.html","title":"IDOWeatherDataParamModel","keywords":"","body":"IDOWeatherDataParamModel Property Type Description type Int Weather type0x00 Other0x01 Sunny0x02 Cloudy0x03 Cloudy0x04 Rain0x05 Heavy rain0x06 Thunderstorm0x07 Snow0x08 Sleet0x09 Typhoon0x0A Sandstorm0x0B Clear night0x0C Cloudy night0x0D Hot0x0E Cold 0x0F breeze0x10 strong wind0x11 haze0x12 shower0x13 cloudy to sunny0x30 thunder0x31 hail0x32 sand Dust0x33 Tornado temp Int Current temperature maxTemp Int The highest temperature of the day minTemp Int The lowest temperature of the day humidity Int Current humidity uvIntensity Int Current UV intensity aqi Int Current air quality index (AQI) future [IDOWeatherDataFuture] Weather conditions for the next three days Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:12:05 "},"doc/model/IDOWeatherSunTimeParamModel.html":{"url":"doc/model/IDOWeatherSunTimeParamModel.html","title":"IDOWeatherSunTimeParamModel","keywords":"","body":"IDOWeatherSunTimeParamModel Properties Type Description sunriseHour Int Sunrise time sunriseMin Int Sunrise time sunsetHour Int Sunset time Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOWeatherV3ParamModel.html":{"url":"doc/model/IDOWeatherV3ParamModel.html","title":"IDOWeatherV3ParamModel","keywords":"","body":"IDOWeatherV3ParamModel Properties Type Description month int The month when the server was last synchronized day int The day when the server was last synchronized hour int The hour when the server was last synchronized min int The minute when the server was last synchronized sec int The second the server last synced week Int Day of the weekbit0: Mondaybit1: Tuesday, and so on until Sunday weatherType Int Weather Type0: Other1: Sunny2: Cloudy3: Overcast4: Rain5: Heavy rain6: Thunderstorm 7: Snow8: Sleet9: Typhoon10: Sandstorm11: Sunny at night12: Cloudy at night 13: Hot14: Cold15: Breeze16: Strong wind17: Haze18: Showers19: Cloudy to sunny48: Thunder49: Hail50: Wind and sand51: Tornado (realme custom weather type idw02) todayTmp Int Current temperature (Celsius) For negative temperatures, add 100 to the temperature and transmit todayMaxTemp Int Maximum temperature (Celsius)For negative temperatures, add 100 to the temperature and transmit todayMinTemp Int Minimum temperature ( degrees Celsius)For negative temperatures, add 100 to the temperature and transmit cityName String city nameup to 74 bytes airQuality Int air qualityMultiply by 10 Transmission precipitationProbability Int Precipitation probability0-100% todayUvIntensity Int UV intensityMultiply by 10 to get the transmittance sunriseItemNum Int Sunrise and sunset times Number of detailsCurrently the maximum number of days is set to 7Invalid version 1 hoursWeatherItems Collection Collection of weather data for the next 48 hours IDOHoursWeatherItem futureItems Collection Weather data for the next seven daysIDOFutureItem sunriseItem Collection Sunrise and sunset time detailsIDOSunriseItem version is valid for 2&3 IDOHoursWeatherItem Property Type Description weatherType int Weather type temperature int temperatureTemperature plus 100 transmission probability int Probability of temperature occurrence0-100 percentage IDOFutureItem Attributes Type Description weatherType int Weather type maxTemp int Maximum temperatureTemperature plus 100 transmission minTemp int Minimum temperatureTemperature plus 100 transmission IDOSunriseItem Attributes Type Description sunriseHour int When the sunrise time is version is 1, it is invalid sunriseMin int When the sunrise time is version is 1 is invalid sunsetHour int When the sunset timeversion is 1, it is invalid sunsetMin int When the sunset time is version is 1, it is invalid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 15:12:33 "},"doc/model/IDOWorldTimeParamModel.html":{"url":"doc/model/IDOWorldTimeParamModel.html","title":"IDOWorldTimeParamModel","keywords":"","body":"IDOWorldTimeParamModel Properties Type Description id Int Detailed ID, unique minOffset Int Offset in minutes from the current time to UTC 0 cityName String City name, up to 59 bytes longitudeFlag Int 1: East longitude 2: West longitude longitude Int Longitude, multiplied by 100, retained to 2 decimal places latitudeFlag Int 1: North latitude 2: South latitude latitude Int Latitude, multiplied by 100, retained 2 decimal places Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOUserInfoPramModel.html":{"url":"doc/model/IDOUserInfoPramModel.html","title":"IDOUserInfoPramModel","keywords":"","body":"IDOUserInfoPramModel Property Type Description year int birth date year month int birth date month day int birth date day height int height in centimeters weight int Weight unit kilogram value requires x100 gender int Gender1: Female0: Male Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOMenstruationModel.html":{"url":"doc/model/IDOMenstruationModel.html","title":"IDOMenstruationModel","keywords":"","body":"IDOMenstrationModel Attributes Type Description onOff int Menstrual switch 1 on 0 off menstrualLength int menstrual length menstrualCycle int menstrual cycle lastMenstrualYear int most recent Menstrual period start time in year lastMenstrualMonth int Last menstrual period start time in month lastMenstrualDay int Last menstrual period start time in day ovulationIntervalDay int The interval from before the next menstrual period to the ovulation day, generally is 14 days ovulationBeforeDay int The number of fertile days before ovulation day, usually 5 ovulationAfterDay int The number of fertile days after ovulation day, usually 5 notifyFlag int Notification type0: Invalid1: Allow notifications2: Silent notifications3: Turning off notifications requires firmware to enable menu support getMenstrualAddNotifyFlagV3 menstrualReminderOnOff int Menstrual reminder switch1: On0: OffThe firmware is required to enable the menu to support getSupportSetMenstrualReminderOnOff. When this switch is invalid, the default reminder is when the function is enabled. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-24 12:15:25 "},"doc/model/IDOHeartRateIntervalModel.html":{"url":"doc/model/IDOHeartRateIntervalModel.html","title":"IDOHeartRateIntervalModel","keywords":"","body":"IDOHeartRateIntervalModel Property Type Description burnFatThreshold int Fat training heart rate zoneCalculation rule: 50%-69% of maximum heart rateUnit: beats/minute aerobicThreshold int Cardiopulmonary training heart rate zoneCalculation rule: 70%-84% of maximum heart rateUnit: times/minute limitThreshold int Peak training heart rate zoneCalculation rules: 85%-100% of maximum heart rateUnit: times /minute userMaxHr int Upper limit of heart rate, maximum heart rate reminderUnit: times/minute range1 int Warm-up heart rate zoneCalculation rule: (200-age) * 50Unit: times/minute range2 int Fat burning heart rate zoneCalculation rule: (200-age) * 60Unit: times/minute range3 int Yes Aerobic exercise heart rate zoneCalculation rule: (200-age) * 70Unit: times/minute range4 int Anaerobic exercise heart rate zoneCalculation rule: (200-age) ) * 80Unit: times/minute range5 int Extreme exercise heart rate zoneCalculation rule: (200-age) * 90Unit: times/minute minHr int Minimum heart rateUnit: beats/minute maxHrRemind int Maximum heart rate reminder0 off, 1 on minHrRemind int Minimum heart rate reminder0 off ,1 turn on remindStartHour int when the reminder starts remindStartMinute int when the reminder starts remindStopHour int when the reminder ends remindStopMinute int when the reminder ends Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOCmdOTAResponseModel.html":{"url":"doc/model/IDOCmdOTAResponseModel.html","title":"IDOCmdOTAResponseModel","keywords":"","body":"IDOCmdOTAResponseModel Attributes Type Description errFlag int 0: Enter OTA successfully1: Failed: The battery is too low2: Failed: The device does not support it3: Failure: Incorrect parameters Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODefaultSportTypeModel.html":{"url":"doc/model/IDODefaultSportTypeModel.html","title":"IDODefaultSportTypeModel","keywords":"","body":"IDODefaultSportTypeModel Property Type Description defaultShowNum Int The number displayed by default minShowNum Int The minimum supported number Supported, 1 supported sportTypes [IDOSportTypeItem] Collection of sport type list collection types IDOSportTypeItem Properties Type Description type IDOSportType Default displayed quantity Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:34:24 "},"doc/model/IDODeviceInfo.html":{"url":"doc/model/IDODeviceInfo.html","title":"IDODeviceInfo","keywords":"","body":"Device information Device information model description IDODeviceInterface Attribute Type Description deviceMode Bool Device mode 0: sports mode, 1: sleep mode battStatus Bool Battery status 0: normal, 1: charging, 2: full, 3: Low battery battLevel Bool Battery level 0～100 rebootFlag Bool Whether to restart 0: Not restarted 1: Restart bindState Bool Binding status 0: Unbound 1: Bind bindType Bool 5: Click vertically on the screen to confirm and cancel, confirmation is at the top 6: Click vertically on the screen to confirm and cancel, confirmation is at the bottom 7: Click (a button on the right) bindTimeout Bool Binding The maximum timeout is 15 seconds, 0 means no timeout platform Bool 60: Tailing micro+5340+no nand flash, 70: Goodix+Furikun, 80:5340 deviceShapeType Bool device Shape type 0: invalid; 1: round; 2: square; 3: ellipse deviceType Bool device type 0: invalid; 1: bracelet; 2: watch dialMainVersion Bool custom dial The main version starts from 1 0: does not support the corresponding custom watch face function showBindChoiceUi Bool displays hook ui interface when firmware is bound 0: not required 1: required deviceId Bool device id firmwareVersion Bool Device firmware major version number macAddress Bool Current device mac address - without colon macAddressFull Bool Current device mac address - with colon deviceName Bool If you need to get the latest value, you can use Cmds.getDeviceName().send(..) method otaMode Bool OTA mode uuid Bool UUID ios-specific macAddressBt Bool BT macAddress - with colon fwVersion1 Bool Firmware Version version1 fwVersion2 Bool Firmware version version2 fwVersion3 Bool Firmware version3 fwBtFlag Bool BT version effective flag bit 0: Invalid 1: Indicates that the firmware has a corresponding BT firmware fwBtVersion1 Bool BT version version1 fwBtVersion2 Bool BT version version2 fwBtVersion3 Bool BT version version3 fwBtMatchVersion1 Bool BT version version1 that needs to be matched fwBtMatchVersion2 Bool BT's required matching version version2 fwBtMatchVersion3 Bool BT's required matching version version3 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODrinkWaterRemindModel.html":{"url":"doc/model/IDODrinkWaterRemindModel.html","title":"IDODrinkWaterRemindModel","keywords":"","body":"IDODrinkWaterRemindModel Attribute Type Description onOff int switch0 off1 on startHour int start time startMinute int start time minutes endHour int end time endMinute int end time minutes repeats Set repeat IDOWeek set interval int reminder intervalunit minutes notifyFlag int notification type0: invalid1: allow notification2: silent notification3: close notificationRequires firmware to enable menu support setDrinkWaterAddNotifyFlag doNotDisturbOnOff int Reminder-free switch 00 off 01 onNeed firmware to enable menu support setNoReminderOnDrinkReminder noDisturbStartHour int Reminder-free start timeNeed firmware to enable menu supportsetNoReminderOnDrinkReminder noDisturbStartMinute int Reminder-free start timeNeeds firmware to enable menu supportsetNoReminderOnDrinkReminder noDisturbEndHour int Reminder-free end timeNeeds firmware to enable menu supportsetNoReminderOnDrinkReminder noDisturbEndMinute int Reminder-free end timeRequires firmware to enable menu support setNoReminderOnDrinkReminder Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:00:33 "},"doc/model/IDOMenstruationRemindParamModel.html":{"url":"doc/model/IDOMenstruationRemindParamModel.html","title":"IDOMenstruationRemindParamModel","keywords":"","body":"IDOMenstrationRemindParamModel Properties Type Description startDay int Start day reminder number of days in advance ovulationDay int Ovulation day reminder number of days in advance hour int reminder time hour minute int reminder time minutes pregnancyDayBeforeRemind int How many days in advance to remind when the fertile period starts pregnancyDayEndRemind int How many days in advance to remind when the fertile period ends menstrualDayEndRemind int How many days in advance to remind the end of menstrual period Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:41:52 "},"doc/model/IDOMenuListParamModel.html":{"url":"doc/model/IDOMenuListParamModel.html","title":" IDOMenuListParamModel","keywords":"","body":"IDOMenuListParamModel Property Type Description items [int] Menu list with built-in sortingIf there is no sorting, it will be displayed if there is a value, but it is unrealistic if there is no valueIf there is sorting, it needs to start from 0 according to the array0 Invalid 1 Step Count2 Heart Rate3 Sleep4 Photoshoot5 Alarm Clock6 Music7 Stopwatch8 Timer 9 Sports mode10 Weather11 Breathing exercise12 Find mobile phone13 Stress14 Data three rings15 Time interface16 Last activity17 Health data18 Blood oxygen19 Menu settings20 (20) Alexa voice display in sequence21 X screen (gt01pro-X New)22 Calories (New for Doro Watch)23 Distance (New for Doro Watch)24 One-click measurement (New for IDW05) 25 renpho health (Runfeng Health)(IDW12 new) 26 Compass (mp01 new)27 Barometric altimeter (mp01 new) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 15:42:25 "},"doc/model/IDONotDisturbParamModel.html":{"url":"doc/model/IDONotDisturbParamModel.html","title":"IDONotDisturbParamModel","keywords":"","body":"IDONotDisturbParamModel Attribute Type Description switchFlag int switch1 on0 off startHour int start timehour startMinute int start timeminute endHour int end timehour endMinute int end timeminute haveTimeRange int whether there is a time range0 invalid1 means no time range2 means there is a time rangeThe menu getSupportDisturbHaveRangRepeat is enabled and valid noontimeRESTOnOff int Do not disturb switch during the day1 On0 Off noontimeRESTStartHour int Start timehour noontimeRESTStartMinute int start timeminute noontimeRESTEndHour int end timehour noontimeRESTEndMinute int end timeminute allDayOnOff int All-day Do Not Disturb1 On0 OffThe menu setOnlyNoDisturbAllDayOnOff is enabled and valid intelligentOnOff int Intelligent Do Not Disturb switch1 On br/>0 CloseThe menu setOnlyNoDisturbSmartOnOff is enabled and valid Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOSportParamModel.html":{"url":"doc/model/IDOSportParamModel.html","title":"IDOSportParamModel","keywords":"","body":"IDOSportParamModel Attribute Type Description items [IDOSportModeSortParamModel] Motion type sorting details (maximum 30) IDOSportModeSortParamModel Attribute Type Description index Int Sorting number, 0 is invalid, starts from 1 type IDOSportType Sports Type Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOStressSwitchParamModel.html":{"url":"doc/model/IDOStressSwitchParamModel.html","title":"IDOStressSwitchParamModel","keywords":"","body":"IDOStressSwitchParamModel Attribute Type Description onOff int 总开关 1开 0关闭 startHour int 开始时间 时 startMinute int 开始时间 分 endHour int 结束时间 时 endMinute int 结束时间 分 remindOnOff int 压力提醒开关 1开 0关on_off为关则提醒不起作用 interval int 提醒间隔,单位分钟 默认60分钟 highThreshold int 压力过高阈值 stressThreshold int 压力校准阈值，默认是80 需要固件开启功能表支持 setSendCalibrationThreshold notifyFlag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持 getPressureNotifyFlagMode repeats Set 重复IDOWeek Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-03 17:05:24 "},"doc/model/IDOUnerasableMeunListModel.html":{"url":"doc/model/IDOUnerasableMeunListModel.html","title":"IDOUnerasableMeunListModel","keywords":"","body":"IDOUnerasableMeunListModel Attribute Type Description itemList [int] Number of items in the list, maximum is 10private let num: IntList of applications that cannot be deleted0 invalid1 step2 Heart rate3 Sleep4 Take Pictures5 Alarm Clock6 Music7 stopwatch8 Timer9 Exercise mode10 Weather11 Breathing Exercises12 Finding your Phone13 pressure14 Data three rings15 time interface16 Last activity17 Health Data18 blood oxygen19 Menu Settings20 (20)aleax Voices are displayed in sequence21 X screen (New on gt01pro-X)22 calories (added by Doro Watch)23 distance (added by Doro Watch)24 One-touch measurement (Added in IDW05)25 renpho health(Added in IDW12)26 Compass (new on mp01)27 Barometric altimeter (new on mp01) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-26 10:18:23 "},"doc/model/IDOActivitySwitchParamModel.html":{"url":"doc/model/IDOActivitySwitchParamModel.html","title":"IDOActivitySwitchParamModel","keywords":"","body":"IDOActivitySwitchParamModel Properties Type Description autoIdentifySportWalk Int Automatically identify the walking switch0 Off1 OnMenu getAutoActivitySetGetUseNewStructExchange autoIdentifySportRun Int Automatically identify the running switch0 Off 1 OnMenu getAutoActivitySetGetUseNewStructExchange autoIdentifySportBicycle Int Automatically identify bicycle switch0 Off1 OnMenu getAutoActivitySetGetUseNewStructExchange autoPauseOnOff Int Motion auto-pause0 Off1 OnMenu getAutoActivitySetGetUseNewStructExchange autoEndRemindOnOffOnOff Int End reminder0 Off1 OnFunction Table getAutoActivitySetGetUseNewStructExchange autoIdentifySportElliptical Int Automatically identify the elliptical machine switch0 Off1 OnMenu getAutoActivitySetGetUseNewStructExchange autoIdentifySportElliptical Int Automatically identify the rowing machine switch br/>0 Off1 OnMenugetAutoActivitySetGetUseNewStructExchange autoIdentifySportSwim Int Automatically identify swimming switch0 Off1 OnMenugetAutoActivitySetGetUseNewStructExchange autoIdentifySportSmartRope Int Automatically identify the smart rope skip switch0 off1 onMenu getAutoActivitySetGetUseNewStructExchange Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDODeviceModel.html":{"url":"doc/model/IDODeviceModel.html","title":"IDOUnerasableMeunListModel","keywords":"","body":"IDODeviceModel Property Type Description rssi Int rssi name String Device name state IDODeviceStateType Device state uuid String String mac address otaMacAddress String ota mac address btMacAddress String Bracelet isOta Bool Whether it is ota mode isTlwOta Bool Whether it is Tailing micro ota bltVersion Int bt version number isPair Bool Pairing status (Android) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOFastMsgSettingModel.html":{"url":"doc/model/IDOFastMsgSettingModel.html","title":"IDOFastMsgSettingModel","keywords":"","body":"IDOFastMsgSettingModel Property Type Description type Int 0 other (default), 1 incoming call message version number fastItems List fast message details IDOFastMsgItem Properties Type Description msgId Int Quick message id starts from 1 msgData String The maximum content of quick message is 68 bytes Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOFastMsgUpdateParamModel.html":{"url":"doc/model/IDOFastMsgUpdateParamModel.html","title":"IDOFastMsgUpdateParamModel","keywords":"","body":"IDOFastMsgUpdateParamModel Property Type Description isSuccess int 0app failed to send information, 1app sent information successfully msgID int Reply ID: Each message corresponds to an ID msgType int Message type msgNotice int 0 means there is no corresponding SMS reply, corresponding reply list Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOGpsHotStartParamModel.html":{"url":"doc/model/IDOGpsHotStartParamModel.html","title":"IDOGpsHotStartParamModel","keywords":"","body":"IDOGpsHotStartParamModel Properties Type Description tcxoOffset Int TCXO offset longitude Int Longitude (multiplied by 10^6) latitude Int Latitude (multiplied by 10^6) altitude Int Altitude (multiplied by 10) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 10:18:14 "},"doc/model/IDOSppMtuModel.html":{"url":"doc/model/IDOSppMtuModel.html","title":"IDOSppMtuModel","keywords":"","body":"IDOSppMtuModel Attributes Type Description errCode Int Error code mtu Int Get the firmware mtu value. If the reply data is non-0, then use the firmware's prn data transmission checkCode Int Reserved Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOStatusNotification.html":{"url":"doc/model/IDOStatusNotification.html","title":"IDOStatusNotification","keywords":"","body":"IDOStatusNotification Properties Type Description protocolConnectCompleted Int The protocol library has completed the Bluetooth library bridging, and the cache data has been initialized functionTableUpdateCompleted Int The function table acquisition is completed deviceInfoUpdateCompleted Int Device information acquisition completed deviceInfoFwVersionCompleted Int Level 3 version acquisition completed unbindOnBindStateError Int Binding status is abnormal and needs to be unbound (triggered when local binding status and device information are inconsistent) fastSyncCompleted Int Fast configuration completed fastSyncFailed String Fast configuration failed, the business layer needs to re-trigger fast configuration deviceInfoBtAddressUpdateCompleted String BT MacAddress acquisition completed macAddressError String macAddress obtained by fast configuration This error is reported when it is inconsistent with the one passed in by markConnectedDevice syncHealthDataIng String Synchronizing health data syncHealthDataCompleted String Synchronizing health data completed Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/model/IDOBluetoothStateModel.html":{"url":"doc/model/IDOBluetoothStateModel.html","title":"IDOBluetoothStateModel","keywords":"","body":"`IDOBluetoothStateModel Properties Type Description type IDOBluetoothStateType State Type scanType IDOBluetoothScanType Scan Type Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-23 14:30:10 "},"doc/model/IDODeviceStateModel.html":{"url":"doc/model/IDODeviceStateModel.html","title":"IDODeviceStateModel","keywords":"","body":"IDODeviceStateModel 属性 类型 说明 uuid String uuid(ios) macAddress String mac地址 state IDODeviceStateType 连接状态 errorState IDOConnectErrorType 连接错误 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-03-25 17:17:04 "},"doc/enum/IDOEnumIndex.html":{"url":"doc/enum/IDOEnumIndex.html","title":"Enumeration","keywords":"","body":"Enumeration Event Type Sport Type Transfer file type Binding Status Bluetooth State Bluetooth Scan Status Connection Error Type Device connection status Health data type week Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:30:12 "},"doc/enum/IDOEvtType.html":{"url":"doc/enum/IDOEvtType.html","title":"Event Type","keywords":"","body":"Event type evtType Type Description 0x01 SMS 0x02 Email 0x03 WeChat 0x04 QQ 0x05 Sina Weibo 0x06 facebook 0x07 twitter 0x08 WhatsApp 0x09 Messenger 0x0A Instagram 0x0B Linked in 0x0C Calendar 0x0D skype; 0x0E Alarm clock 0x0F pokeman 0x10 VKontakte 0x11 Line 0x12 Viber 0x13 KakaoTalk 0x14 Gmail 0x15 Outlook, 0x16 Snapchat 0x17 TELEGRAM 0x18 other 0x20 chatwork 0x21 slack 0x22 Yahoo Mail 0x23 Tumblr, 0x24 Youtube 0x25 Yahoo Pinterest 0x26 TikTok 0x27 Redbus 0x28 Dailyhunt 0x29 Hotstar 0x2A Inshorts 0x2B Paytm 0x2C Amazon 0x2D Flipkart 0x2E Prime 0x2F Netflix 0x30 Gpay 0x31 Phonpe 0x32 Swiggy 0x33 Zomato 0x34 Make My trip 0x35 Jio Tv 0x36 keep 0x37 Microsoft 0x38 WhatsApp Business 0x39 niosefit 0x3A missed_callsMissed calls 0x3B Gpap 0x3C YTmusic 0x3D Uber 0x3E Ola 0x3F Reminder 0x40 Google meet Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOSportType.html":{"url":"doc/enum/IDOSportType.html","title":"运动类型","keywords":"","body":"运动类型 sportType 功能表：getSportsTypeV3 = false 以前(老设备)运动类型: 类型 说明 0 无 1 走路 2 跑步 3 骑行 4 徒步 5 游泳 6 爬山 7 羽毛球 8 其他 9 健身 10 动感单车 11 椭圆机 12 跑步机 13 仰卧起坐 14 俯卧撑 15 哑铃 16 举重 17 健身操 18 瑜伽 19 跳绳 20 乒乓球 21 篮球 22 足球 23 排球 24 网球 25 高尔夫球 26 棒球 27 滑雪 28 轮滑 29 跳舞 31 室内划船/roller machine 32 普拉提/pilates 33 交叉训练/cross train 34 有氧运动/cardio 35 尊巴舞/Zumba 36 广场舞/square dance 37 平板支撑/Plank 38 健身房/gym 功能表：getSportsTypeV3 = true 现在(新设备)运动类型 类型 说明 48 户外跑步 49 室内跑步 50 户外骑行 51 室内骑行 52 户外走路 53 室内走路 54 泳池游泳 55 开放水域游泳 56 椭圆机 57 划船机 58 高强度间歇训练法 75 板球运动 基础运动： 类型 说明 101 功能性力量训练 102 核心训练 103 踏步机 104 整理放松 基健身（25种）： 类型 说明 110 传统力量训练 112 引体向上 114 开合跳 115 深蹲 116 高抬腿 117 拳击 118 杠铃 119 武术 120 太极 121 跆拳道 122 空手道 123 自由搏击 124 击剑 125 射箭 126 体操 127 单杠 128 双杠 129 漫步机 130 登山机 球类： 类型 说明 131 保龄球 132 台球 133 曲棍球 134 橄榄球 135 壁球 136 垒球 137 手球 138 毽球 139 沙滩足球 140 藤球 141 躲避球 休闲运动： 类型 说明 152 街舞 153 芭蕾 154 社交舞 155 飞盘 156 飞镖 157 骑马 158 爬楼 159 放风筝 160 钓鱼 冰雪运动： 类型 说明 161 雪橇 162 雪车 163 单板滑雪 164 雪上运动 165 高山滑雪 166 越野滑雪 167 冰壶 168 冰球 169 冬季两项 极限运动（5种）： 类型 说明 180 滑板 181 攀岩 182 蹦极 183 跑酷 184 BMX kr01定制项目： 类型 说明 193 Outdoor Fun（户外玩耍） 194 Other Activity（其他运动） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-24 15:49:37 "},"doc/enum/IDOTransType.html":{"url":"doc/enum/IDOTransType.html","title":"Transfer file type","keywords":"","body":"Transfer file type IDOTransType Type Description fw Firmware upgrade fzbin Image resource upgrade bin bin upgrade lang Language pack upgrade bt BT upgrade iwfLz Dial wallpaperZ wallpaper dial ml Address book file onlineUbx agps online offlineUbx agps offline epo epo upgrade gps gps ton prompt tone watch Si Che wallpaper dial Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOBindStatus.html":{"url":"doc/enum/IDOBindStatus.html","title":"Binding status","keywords":"","body":"Binding status IDOBindStatus Type Description failed Binding failed successful Binding successful binded Already bound needAuth Need authorization code to bind refusedBind Refused to bind wrongDevice Binding wrong device authCodeCheckFailed Authorization code verification failed canceled Cancel binding failedOnGetFunctionTable Binding failed (failed to obtain the function table) failedOnGetDeviceInfo Binding failed (failed to obtain device information) timeout Binding timeout (supports this Function only for devices) agreeDeleteDeviceData New account binding, user confirms deletion of device data (only for devices that support this function) denyDeleteDeviceData New account binding, user does not delete device data, binding fails (supports this function) function only) timeoutOnNewAccount New account binding, the user does not choose, the device times out (dedicated to devices that support this function) needConfirmByApp The device agrees to the pairing (binding) request and waits for the APP to issue the pairing result ( Exclusively for devices that support this function) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOBluetoothStateType.html":{"url":"doc/enum/IDOBluetoothStateType.html","title":"Bluetooth status","keywords":"","body":"Bluetooth state IDOBluetoothStateType Type Description unknown Unknown resetting System service restarting unsupported Not supported unauthorized Unauthorized poweredOff Bluetooth off poweredOn Bluetooth on Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOBluetoothScanType.html":{"url":"doc/enum/IDOBluetoothScanType.html","title":"Bluetooth Scan Status","keywords":"","body":"Bluetooth Scan Status IDOBluetoothScanType Type Description scanning Scanning stop Scanning finished find Find device (android) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOConnectErrorType.html":{"url":"doc/enum/IDOConnectErrorType.html","title":"Connection Error Type","keywords":"","body":"Connection error IDOConnectErrorType Type Description none Stateless abnormalUUIDMacAddress Abnormal UUID or Mac address bluetoothOff Bluetooth off connectCancel Active disconnection fail Connection failed timeOut Connection timeout serviceFail Failed to discover service characteristicsFail Failed to discover characteristics pairFail Pairing exception informationFail Failed to obtain basic information Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDODeviceStateType.html":{"url":"doc/enum/IDODeviceStateType.html","title":"Device Connection Status","keywords":"","body":"Connection Status IDODeviceStateType Type Description disconnected Disconnected connecting Connecting connected connected disconnecting disconnecting Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOGetValueType.html":{"url":"doc/enum/IDOGetValueType.html","title":" Health data type","keywords":"","body":"Health data type IDOGetValueType Type Description pedometer Number of steps for the day calorie Calories for the day heartRate Last measured heart rate for the day spO2 Blood oxygen for the day kilometer Distance for the day (meters) swimmingDistance Indoor swimming distance for the day (meters) sleepScore Sleep score for the day runningCount Number of runs for the day swimmingCount Number of swims for the day dayWorkoutCount Number of exercises for the day weekWorkoutCount Number of exercises for the week bodyBattery Body battery Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/enum/IDOWeek.html":{"url":"doc/enum/IDOWeek.html","title":"Weekday","keywords":"","body":"Week IDOWeek Type Description monday Monday tuesday Tuesday wednesday wednesday thursday Thursday friday friday saturday saturday sunday Sunday Android enum class IDOWeek(val rawValue: Int):Serializable { MONDAY(0), TUESDAY(1), WEDNESDAY(2), THURSDAY(3), FRIDAY(4), SATURDAY(5), SUNDAY(6); } iOS enum IDOWeek: Int { case Monday = 0, tuesday, Wednesday, Thursday, friday, saturday, sunday } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/evtControl/IDODeviceControlIndex.html":{"url":"doc/evtControl/IDODeviceControlIndex.html","title":"Device notification control event","keywords":"","body":"Device notification control events Active notification APP SMS Device notification APP one-click call start Device control APP camera Device notification firmware speaker volume modification (alexa) Device control APP music volume percentage Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:35:36 "},"doc/evtControl/IDODeviceControlFastMsgUpdate.html":{"url":"doc/evtControl/IDODeviceControlFastMsgUpdate.html","title":"Active notification APP SMS","keywords":"","body":"Actively notify APP SMS json field sent by App: Field name Field type Field description is_success int 0app Send message Failed, 1app successfully sent the message msg_ID int Reply ID: Each message corresponds to an ID msg_type int Message type msg_notice int 0 means there is no corresponding SMS reply, corresponding reply list Example: { \"is_success\":0, \"msg_ID\":1, \"msg_type\":1, \"msg_notice\":0 } json fields received by App: Field name Field type Field description msg_type int Reply message type: incoming call SMS (1) QQ, WeChat msg_ID int Reply ID: Each message corresponds to an ID msg_notice int 0 means there is no corresponding SMS reply, corresponding reply list Example: { \"msg_ID\":1, \"msg_type\":1, \"msg_notice\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/evtControl/IDODeviceControlOnekeySOSStart.html":{"url":"doc/evtControl/IDODeviceControlOnekeySOSStart.html","title":"Device notification APP one-click call start","keywords":"","body":"The device notifies the APP that one-click call starts json field received by the App: Field name Field type Field description status int Status: 0: start, 1: end timeout int Timeout unit seconds Example: { \"status\":0, \"timeout\":30, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/evtControl/IDODeviceControlPhotograph.html":{"url":"doc/evtControl/IDODeviceControlPhotograph.html","title":"Device control APP camera","keywords":"","body":"Device control APP camera json field received by App: Field name Field type Field description type int 0: Open the camera1: Click to start taking pictures2: End taking pictures3: Request system pairing Example: { \"type\":0 } json field issued by App: Field name Field type Field description type int 0: Open the camera1: Click to start taking photos2: End of taking photos3: Request system pairing Example: { \"type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/evtControl/IDODeviceControlSpeakerValue.html":{"url":"doc/evtControl/IDODeviceControlSpeakerValue.html","title":"Device notification firmware speaker volume modification (alexa)","keywords":"","body":"Device notification firmware speaker volume modification (alexa) json field received by App: Field name Field type Field description value int Firmware volume value0-100 example ： { \"value\":20 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/evtControl/IDODeviceControlVolumePercentage.html":{"url":"doc/evtControl/IDODeviceControlVolumePercentage.html","title":"Device control APP music volume percentage","keywords":"","body":"Device control APP music volume percentage json field received by App: Field name Field type Field description volume_percentage int Volume percentage 0-100 Example: { \"volume_percentage\":22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "},"doc/IDOLanguageCode.html":{"url":"doc/IDOLanguageCode.html","title":"Language code list","keywords":"","body":"Language code list Code Language Menu -1 Invalid - 1 Chinese languageCh 2 English languageEnglish 3 French languageFrench 4 German languageGerman 5 Italian languageItalian 6 spanish languageSpanish 7 Japanese languageJapanese 8 Polish languagePolish 9 Czech languageCzech 10 Romania languageRomanian 11 Lithuanian languageLithuanian 12 Dutch languageDutch 13 Slovenian languageSlovenian 14 Hungarian languageHungarian 15 Russian languageRussian 16 Ukrainian languageUkrainian 17 Slovak languageSlovak 18 Danish languageDanish 19 Croatian languageCroatian 20 Indonesian languageIndonesian 21 Korean languageKorean 22 Hindi languageHindi 23 Portuguese languagePortuguese 24 Turkish languageTurkish 25 Thai languageThai 26 Vietnamese languageVietnamese 27 Burmese languageBurmese 28 Filipino languageFilipino 29 Traditional Chinese languageTraditionalChinese 30 Greek languageGreek 31 Arabic languageArabic 32 Swedish languageSweden 33 Finnish languageFinland 34 Persian languagePersia 35 Norwegian languageNorwegian 36 Malay languageMalay 37 Brazilian Portuguese languageBrazilianPortuguese 38 Bengali languageBengali 39 Khmer languageKhmer Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-25 17:10:04 "},"doc/IDOErrorCode.html":{"url":"doc/IDOErrorCode.html","title":"Error code","keywords":"","body":"Error code description Function overview errorCode error code is the basis for judging the status of the global command callback. When errorCode is equal to 0, it is successful, and other values ​​​​are failure. Corresponding error code table Error code Description 0 Command executed successfully 1 Missing SVC handler 2 SoftDevice not enabled 3 Internal error 4 Memory required for operation not available 5 Not found 6 Unsupported operation 7 Invalid argument 8 Invalid Status, no operation is allowed in this status 9 Invalid length 10 Invalid flag 11 Invalid data 12 Invalid data size 13 Operation timeout 14 Null pointer 15 Forbidden operation 16 Bad memory address 17 Busy 18 Maximum number of connections exceeded 19 Insufficient resources required for operation 20 Bt Bluetooth upgrade error 21 Insufficient space required for operation 22 Low battery 23 Invalid file name/format 24 Enough space but needs organizing 25 Space arrangement -1 Cancel -2 Failure -3 Command already exists in the queue -4 Device disconnected -5 OTA mode -6 Device not connected -99 JSON parsing failed Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-04-22 17:20:23 "}}