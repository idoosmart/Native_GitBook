{"./":{"url":"./","title":"IDOSDK说明文档","keywords":"","body":"{IDO标准化说明文档} IDO SDK 集成说明 IDO SDK 蓝牙库接口说明 IDO SDK 桥接说明 IDO SDK Alexa说明 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-28 09:37:50 "},"doc/IDOBluetooth.html":{"url":"doc/IDOBluetooth.html","title":"IDOSDK蓝牙库","keywords":"","body":"蓝牙库 功能概述 基于原生平台蓝牙库封装，用于扫描外围设备，获取返回设备集合，在列表中显示，选择需要连接的设备，连接成功后返回设备信息以及设备是否处于OTA模式，连接失败则会有一个错误回调。默认扫描信号过滤参数为80，自动扫描连接超时时间为20秒。 方法 addBleDelegate(api:) 添加蓝牙代理 addDfuDelegate(api:) 添加DFU升级 (nordic) bluetoothRegister(heartPingSecond:outputToConsole:) 注册,程序开始运行调用 delegate 代理 heartPingSecond:心跳包间隔(ios) outputToConsole：控制台输出日志 startScan(macAddress:completion:) 开始搜索 macAddress（Android）:根据Mac地址搜索 返回指定搜索的设备，如未指定返回null scanFilter(deviceName:deviceID:macAddress:uuid:) 搜索筛选条件 deviceName: 只搜索deviceName的设备 deviceID：只搜索deviceID的设备 macAddress：只搜索macAddress的设备 uuid：只搜索uuid的设备 stopScan() 停止搜索 connect(device:) 连接 device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象 autoConnect(device:) 使用这个重连设备 cancelConnect(macAddress:completion:) 取消连接 getBluetoothState(completion:) 获取蓝牙状态 getDeviceState(device:completion:) 获取设备连接状态 writeData(data:device:type:completion:) 发送数据 data:数据 device: 发送数据的设备 type:0 BLE数据, 1 SPP数据 setBtPair(device:) bt配对（android） cancelPair(device:) 取消配对（android） connectSPP(btMacAddress:) 连接SPP disconnectSPP(btMacAddress:) 断开SPP startNordicDFU(config:) 发起dfu升级 示例 注册Bluetooth模块 Swift: // 注册蓝牙库 sdk.ble.addBleDelegate(api: ) sdk.ble.bluetoothRegister(heartPingSecond: 5, outputToConsole: false) sdk.ble.getBluetoothState { [weak self] stateModel in // 状态监听 } Kotlin: //注册蓝牙库 sdk.ble.addBleDelegate(IDOBleDelegate) sdk.ble.bluetoothRegister(false) sdk.ble.getBluetoothState { //状态监听 } 代理实现 Swift: // 实现代理 extension SomeClass: IDOBleDelegate { func scanResult(list: [IDODeviceModel]?) { // 扫描设备列表 print(\"scanResult list count:\\(String(describing: list?.count))\") } func bluetoothState(state: IDOBluetoothStateModel) { // 蓝牙状态 print(\"on bluetoothState callback: \\(String(describing: state.scanType?.rawValue))\") } func deviceState(state: IDODeviceStateModel) { // 设备状态 print(\"on deviceState callback: \\(String(describing: state.state))\") } } Kotlin: // 实现代理 private val bleDelegate = object : IDOBleDelegate { override fun scanResult(list: List?) { //扫描设备列表 } override fun bluetoothState(state: IDOBluetoothStateModel) { //蓝牙状态 } override fun deviceState(state: IDODeviceStateModel) { // 设备状态 } override fun stateSPP(state: IDOSppStateModel) { } override fun writeSPPCompleteState(btMacAddress: String) { } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-28 10:02:26 "},"doc/IDOBridge.html":{"url":"doc/IDOBridge.html","title":"IDOSDK桥接说明","keywords":"","body":"桥接 BridgeInterface 用于桥接蓝牙库和协议库，实现蓝牙数据、状态传输 Methods setupBridge(delegate:logType:) 注册,程序开始运行调用 Parameters: delegate: 代理 logType: log等级 markConnectedDevice(uniqueId:otaType:isBinded:deviceName:completion:) 标记设备已连接 （蓝牙连接时调用） Parameters: uniqueId: Android（当前连接设备的mac地址），iOS（当前连接设备的mac地址或uuid) otaType: 设置ota模式 isBinded: 绑定状态 deviceName: 设备名称 markDisconnectedDevice(macAddress:uuid:completion:) 标记设备已断开（蓝牙断开时调用） receiveDataFromBle(data:macAddress:useSPP:) 蓝牙响应数据总入口 type 数据类型 0:ble 1:SPP writeDataComplete() 发送蓝牙数据完成 示例 注册Brigde模块 Swift: // protocol library sdk.bridge.setupBridge(delegate: , logType: .release) 蓝牙库注册参考 代理实现 Swift: // 实现代理 extension SomeClass: IDOBridgeDelegate { // 监听SDK状态通知 func listenStatusNotification(status: IDOStatusNotification) { print(\"StatusNotification: \\(status)\") NotificationCenter.default.post(name: \"onSdkStatusChanged\", object: status) } // 监听设备主动通知/控制事件 func listenDeviceNotification(model: IDODeviceNotificationModel) { print(\"DeviceNotification: \\(model)\") NotificationCenter.default.post(name: \"onSdkDeviceStateChanged\", object: model) } } Kotlin: class BleData : IDOBridgeDelegate { override fun listenStatusNotification(status: IDOStatusNotification) { println(\"listenStatusNotification $status\"); } override fun listenDeviceNotification(status: IDODeviceNotificationModel) { println(\"listenDeviceNotification $status\"); } } 桥接蓝牙库（内部） 使用SDK提供的蓝牙库 Swift: // 实现代理 extension SomeClass: IDOBleDelegate { func scanResult(list: [IDODeviceModel]?) { // 扫描结果集 } func deviceState(state: IDODeviceStateModel) { // 设备相关状态 } func bluetoothState(state: IDOBluetoothStateModel) { // 蓝牙相关状态 } } Kotlin: class Blelisten : IDOBleDelegate { override fun scanResult(list: List?) { // 扫描结果集 } override fun bluetoothState(state: IDOBluetoothStateModel) { // 蓝牙相关状态 } override fun deviceState(idoDeviceStateModel: IDODeviceStateModel) { // 设备相关状态 } } 桥接蓝牙库（外部） 使用非SDK提供的蓝牙库 Swift: // 外部蓝牙库接入 // 1、蓝牙设备连接与断开时，需要调用SDK相应方法： // 标记设备已连接 let uniqueId = \"蓝牙设备的mac地址 或 uuid\" sdk.bridge.markConnectedDevice(uniqueId: uniqueId, otaType: .none, isBinded: false, deviceName: deviceModel.name) { rs in } // 标记设备已断开 sdk.bridge.markDisconnectedDevice(macAddress: self.deviceModel?.macAddress, uuid: self.deviceModel?.uuid) { rs in } // 2、发送数据： 协议库数据 -> 蓝牙设备 // 在桥接代理IDOBridgeDelegate中，实现将收到的数据通过蓝牙库发送，并在发送完成后调用写完成 extension SomeClass: IDOBridgeDelegate { // 需要将指令数据发到蓝牙设备（!!!重要） func writeDataToBle(bleData: protocol_channel.IDOBleData) { guard let device = currentDeviceModel else { return } guard let characteristic = device.peripheral.writeCharacteristic() else { return } // 此处根据实际情况做相应替换 bleMgr.write(peripheral: characteristic.0, characteristic: characteristic.1, data: bleData.data!) { err in if err != nil { print(\"写失败：\\(err.debugDescription)\") }else { // 写完成 （!!!重要） sdk.bridge.writeDataComplete() } } } // 监听SDK状态通知 func listenStatusNotification(status: IDOStatusNotification) { print(\"StatusNotification: \\(status)\") NotificationCenter.default.post(name: \"onSdkStatusChanged\", object: status) } // 监听设备主动通知/控制事件 func listenDeviceNotification(model: IDODeviceNotificationModel) { print(\"DeviceNotification: \\(model)\") NotificationCenter.default.post(name: \"onSdkDeviceStateChanged\", object: model) } } // 3、接收数据：蓝牙设备 -> 协议库 SomeBleSDK: // 仅供参考 / // 收到蓝牙响应数据 func receiveData(data: SomeDataClass) { if data.data != nil { // 将数据发给协议库 sdk.bridge.receiveDataFromBle(data: data.data!, macAddress: data.macAddress or nil) } else { print(\"receiveData data is null\") } } Kotlin: // 外部蓝牙库接入 // 1、蓝牙设备连接与断开时，需要调用SDK相应方法： // 标记设备已连接 var mac = \"xx:xx:xx:xx:xx:xx\" sdk.bridge.markConnectedDevice(mac: String, type: otaType, isBinded:boolean, deviceName: String) // 标记设备已断开 sdk.bridge.markDisconnectedDevice(mac: String, type: otaType, isBinded:boolean, deviceName: String) // 2、发送数据： 协议库数据 -> 蓝牙设备 // 在桥接代理IDOBridgeDelegate中，实现将收到的数据通过蓝牙库发送，并在发送完成后调用写完成 // sdk.bridge.setupBridge(BleDataBrige(), IDOLogType.RELEASE) 全局注册 val uuid_service:String = \"00000aF0-0000-1000-8000-00805f9b34fb\" val uuid_characteristic_notify:String = \"00000aF7-0000-1000-8000-00805f9b34fb\" val uuid_characteristic_write:String = \"00000aF6-0000-1000-8000-00805f9b34fb\" class BleDataBrige : IDOBridgeDelegate { override fun listenStatusNotification(status: IDOStatusNotification) { Logutil.logMessage(\"bledata\",\"status:$status\") } override fun writeDataToBle(request: IDOBleDataRequest) { Logutil.logMessage(\"bledata\",\"writeDataToBle:${request.data}\") //这个回调是sdk 会把需要发送的指令回调过来 // 通过蓝牙服务，如上面，拿到bluetoothGatt，characteristic，然后写入数据 bluetoothGatt.writeCharacteristic(characteristic) sdk.bridge.writeDataComplete() } override fun listenDeviceNotification(status: IDODeviceNotificationModel) { Logutil.logMessage(\"bledata\",\"listenDeviceNotification:${status}\") } private fun getCharacteristic( gatt: BluetoothGatt?, serviceId: UUID, characteristicId: UUID ): BluetoothGattCharacteristic? { if (gatt == null) { return null } val service = gatt.getService(serviceId) ?: // DebugLog.p(\"service is nullllll\"); return null return service.getCharacteristic(characteristicId) } } } // 3、接收数据：蓝牙设备 -> 协议库 蓝牙接受到数据后，把数据传给sdk,sdk 会解析返回到对应的请求回调结果 sdk.bridge.receiveDataFromBle(data,bleDevice?.mac,false) demo:// 收到蓝牙响应数据 func receiveData(data: ByteArray) { sdk.bridge.receiveDataFromBle(data,bleDevice?.mac,false) } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/IDOAlexa.html":{"url":"doc/IDOAlexa.html","title":"IDOSDK Alexa","keywords":"","body":"Alexa 功能概述 仅限支持Alexa的设备使用，使用前需确保在Alexa官方后台配置了相应的ClientID 和 ProductID 属性 isLogin 是否已登录 方法 onLoginStateChanged(handle:) 监听登录状态变更 setupAlexa(delegate:clientId:) 配置alexa Parameters: delegate : 代理 clientId: Alexa后台生成的ID authorizeRequest(productId:handle:completion:) Alexa CBL授权 Parameters: productId: 在alexa后台注册的产品ID handle: 回调Alexa认证需要打开的verificationUri和pairCode completion: 授权结果 Returns: 可取消实例 logout() 退出登录 示例 配置Alexa模块 Swift: // 配置alexa sdk.alexa.setupAlexa(delegate: , clientId: clientId) // 实现代理 extension SomeClass: IDOAlexaDelegate { /// 获取健康数据 func getHealthValue(valueType: IDOGetValueType) -> Int { return 0 } /// 获取心率 func getHrValue(dataType: Int, timeType: Int) -> Int { return 0 } /// 功能控制 /// /// funType 0 关闭找手机功能 func functionControl(funType: Int) {} } Kotlin: // 配置alexa alexa.setupAlexa(this, \"clientId from alexa developer account\"/*only for test*/) // implement proxy private val delegate = object:IDOAlexaDelegate{ /// 获取健康数据 override fun getHealthValue(valueType: IDOGetValueType): Int { return 0 } /// 获取心率 override fun getHrValue(dataType: Int, timeType: Int): Int { return 0 } // 功能控制 // // funType 0 关闭找手机功能 override fun functionControl(funType: Int) { TODO(\"Not yet implemented\") } } 监听登录状态 Swift: // 监听登录 sdk.alexa.onLoginStateChanged { [weak self] state in switch state { case .logging: // 登录中... case .logined: // 已登录 case .logout: // 未登录 } } Kotlin: // Listen for login alexa.onLoginStateChanged { when(it){ IDOAlexaLoginState.LOGGING -> {// 登录中...} IDOAlexaLoginState.LOGINED -> {// 已登录} IDOAlexaLoginState.LOGOUT -> {// 未登录} } } 登录 (基于CBL) Swift: // 登录 let canceler = sdk.alexa.authorizeRequest(productId: \"ProductId\") { [weak self] verificationUri, pairCode in // pairCode 你的验证码, 在用户登录过程中需要展示给用户，并供验证使用 // verificationUri 需要跳转的登录页（html) } completion: { [weak self] rs in if case .successful = rs { // 登录成功 } else { // 登录失败 } } // 中途取消登录 canceler.cancel() Kotlin: // 登录 val canceler = alexa.authorizeRequest(\"ProductId\", { verificationUri, pairCode -> // pairCode 你的验证码, 在用户登录过程中需要展示给用户，并供验证使用 // verificationUri 需要跳转的登录页（html) //for example val dialog = AlertDialog.Builder(this@AlexaActivity).setTitle(getString(R.string.alexa_dialog_title)) .setMessage(getString(R.string.alexa_dialog_msg).format(pairCode)) .setPositiveButton(R.string.alexa_dialog_copy) { dialog, which -> val cm = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager val mClipData = ClipData.newPlainText(\"Label\", pairCode) cm.setPrimaryClip(mClipData) val intent = Intent(Intent.ACTION_VIEW) intent.data = Uri.parse(verificationUri) startActivity(intent) dialog.dismiss() }.setNegativeButton(R.string.alexa_dialog_cancel, { dialog, which -> dialog.dismiss() }).show() }, { rs -> if (rs == IDOAlexaAuthorizeResult.SUCCESSFUL) { // 登录成功 } else { // 登录失败 } }) //Cancel login midway canceler.cancel() 退出 Swift: // 退出登录 sdk.alexa.logout() Kotlin: // 退出登录 sdk.alexa.logout() Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-01 09:55:18 "},"doc/IDOSDK.html":{"url":"doc/IDOSDK.html","title":"IDOSDK接口","keywords":"","body":"IDO 智能手环 SDK 功能概述 适用于iOS/Android设备并支持IDO公司的手环，实现蓝牙连接控制框架库 快速集成 使用 Cocoapods 集成 在Podfile文件中添加以下内容： source 'https://github.com/idoosmart/IDOSmartSpec.git' platform :ios, '9.0' target 'your_target_name1' do pod 'IDOSDK-full', '~> 4.0.15' end target 'your_target_name2' do pod 'IDOSDK-lite', '~> 4.0.15' end 然后在项目根目录下执行 pod install 命令，集成。 CocoaPods的使用请参考：CocoaPods Guides 初始化 SDK 初始化Flutter import Flutter import FlutterPluginRegistrant class AppDelegate: UIResponder, UIApplicationDelegate { private var flutterEngine: FlutterEngine? func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool { self.initFlutterEngine() ... return true } } extension AppDelegate { private func initFlutterEngine() { self.flutterEngine = FlutterEngine(name: \"io.flutter\", project: nil) self.flutterEngine?.run(withEntrypoint: nil) if let engine = flutterEngine { GeneratedPluginRegistrant.register(with: engine) print(\"flutterEngine finished\") } else { print(\"engine is null\") assert(false, \"engine is null\") } } } 注册SDK SDK分为三个模块：Protocol 协议库、Bluetooth库及Alexa库，使用前需要进行注册 import protocol_channel // Register sdk func registerSDK() { // ble（仅限于使用内置蓝牙） sdk.ble.addBleDelegate(api: self) sdk.ble.bluetoothRegister(heartPingSecond: 5, outputToConsole: false) sdk.ble.getBluetoothState { [weak self] stateModel in self?.bleState = stateModel self?.funcPage?.bleState = stateModel } // protocol library sdk.bridge.setupBridge(delegate: self, logType: .release) // alexa sdk.alexa.setupAlexa(delegate: self, clientId: clientId) } 使用SDK SDK的API，由全局定义常量sdk进行调用即可 import protocol_channel func someMethod() { /// 设备信息 sdk.device.xx /// 功能表 sdk.funcTable.xx /// 指令 sdk.cmd.xx /// 桥接 sdk.bridge.xx /// 蓝牙 （仅限使用内置蓝牙库） sdk.ble.xx /// Alexa sdk.alexa.xx /// 文件传输 sdk.transfer.xx /// 消息图标 sdk.messageIcon.xx /// 数据同步 sdk.syncData.xx /// 数据交换 sdk.dataExchange.xx /// 设备日志 sdk.deviceLog.xx /// 常用工具、缓存 sdk.tool.xx } android sdk 接入 注册SDK SDK分为三个模块：Protocol 协议库、Bluetooth库及Alexa库，使用前需要进行注册,具体参考demo import protocol_channel // Register sdk func registerSDK() { // ble（仅限于使用内置蓝牙） sdk.ble.addBleDelegate(bleDelegate: IDOBleDelegate) sdk.ble.getBluetoothState { } // protocol library sdk.bridge.setupBridge( idoBrigeDelegate : IDOBridgeDelegate, type:logType) // alexa (没有alexa 功能就不需要接入) sdk.alexa.setupAlexa(delegate: IDOAlexaDelegate, clientId: clientId) } 使用SDK SDK的API，由全局定义常量sdk进行调用即可 import protocol_channel fun someMethod() { /// 设备信息 sdk.device.xx /// 功能表 sdk.funcTable.xx /// 指令 sdk.cmd.xx /// 桥接 sdk.bridge.xx /// 蓝牙 （仅限使用内置蓝牙库） sdk.ble.xx /// Alexa sdk.alexa.xx /// 文件传输 sdk.transfer.xx /// 消息图标 sdk.messageIcon.xx /// 数据同步 sdk.syncData.xx /// 数据交换 sdk.dataExchange.xx /// 设备日志 sdk.deviceLog.xx /// 常用工具、缓存 sdk.tool.xx } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 11:39:34 "},"doc/IDODeviceInfo.html":{"url":"doc/IDODeviceInfo.html","title":"设备信息","keywords":"","body":"设备信息 设备信息模型说明 IDODeviceInterface 属性 类型 说明 deviceMode Int 设备模式 0：运动模式，1：睡眠模式 battStatus Int 电量状态 0:正常, 1:正在充电, 2:充满, 3:电量低 battLevel Int 电量级别 0～100 rebootFlag Int 是否重启 0:未重启 1:重启 bindState Int 绑定状态 0:未绑定 1:已绑定 bindType Int 绑定类型 0:默认 1:单击 2:长按 3:屏幕点击 横向确认和取消,确认在左边 4:屏幕点击 横向确认和取消,确认在右边5:屏幕点击 竖向确认和取消,确认在上边 6:屏幕点击 竖向确认和取消,确认在下边 7:点击(右边一个按键) bindTimeout Int 绑定超时 最长为15秒,0表示不超时 platform Int 设备平台 0:nordic, 10:realtek 8762x, 20:cypress psoc6, 30:Apollo3, 40:汇顶, 50:nordic+泰凌微,60:泰凌微+5340+no nand flash, 70:汇顶+富瑞坤, 80:5340 deviceShapeType Int 设备形状类型 0：无效；1：圆形；2：方形的； 3：椭圆 deviceType Int 设备类型 0：无效；1：手环；2：手表 dialMainVersion Int 自定义表盘主版本 从1开始 0:不支持对应的自定义表盘功能 showBindChoiceUi Int 固件绑定时候显示勾ui界面 0:不需要 1:需要 deviceId Int 设备id firmwareVersion Int 设备固件主版本号 macAddress String 当前设备mac地址 - 无冒号 macAddressFull String 当前设备mac地址 - 带冒号 deviceName String 注意：该名称是由调用 markConnectedDevice(...)传入，sdk不会主去刷新该值需要获取最新值可以使用 Cmds.getDeviceName().send(..) 方法 otaMode Bool OTA模式 uuid String UUID ios专用 macAddressBt String BT macAddress - 带冒号 fwVersion1 Int 固件版本version1 fwVersion2 Int 固件版本version2 fwVersion3 Int 固件版本version3 fwBtFlag Int BT版本生效标志位 0：无效 1：说明固件有对应的BT固件 fwBtVersion1 Int BT的版本version1 fwBtVersion2 Int BT的版本version2 fwBtVersion3 Int BT的版本version3 fwBtMatchVersion1 Int BT的所需要匹配的版本version1 fwBtMatchVersion2 Int BT的所需要匹配的版本version2 fwBtMatchVersion3 Int BT的所需要匹配的版本version3 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/IDOFunctionTable.html":{"url":"doc/IDOFunctionTable.html","title":"功能表","keywords":"","body":"功能表 功能表字段说明 IDOFuncTableInterface 属性 类型 说明 reminderAncs Bool 智能通知 reminderSnapchat Bool Snapchat reminderLine Bool Line reminderOutlook Bool Outlook reminderTelegram Bool Telegram reminderViber Bool Viber reminderVkontakte Bool Vkontakte reminderChatwork Bool Chatwork; reminderSlack Bool Slack reminderTumblr Bool Tumblr reminderYahooMail Bool YahooMail reminderYahooPinterest Bool YahooPinterest reminderYoutube Bool Youtube reminderGmail Bool Gmail reminderKakaoTalk Bool KakaoTalk reminderOnlyGoogleGmail Bool Google gmail reminderOnlyOutlookEmail Bool Outlook email reminderOnlyYahooEmail Bool Yahoo email reminderTiktok Bool Tiktok reminderRedbus Bool Redbus reminderDailyhunt Bool Dailyhunt reminderHotstar Bool Hotstar reminderInshorts Bool Inshorts reminderPaytm Bool Paytm reminderAmazon Bool Amazon reminderFlipkart Bool Flipkart reminderNhnEmail Bool Nhn email reminderInstantEmail Bool Instant email reminderZohoEmail Bool Zoho email reminderExchangeEmail Bool Exchange email reminder189Email Bool 189 email reminderVeryFit Bool Very fit reminderGeneral Bool General reminderMattersRemind Bool Matters reminderMicrosoft Bool Microsoft reminderMissedCall Bool MissedCalls reminderGetAllContact Bool 支持同步全部通讯录 reminderWhatsappBusiness Bool WhatsappBusiness reminderEmail Bool Email reminderFacebook Bool Facebook reminderMessage Bool Message reminderQq Bool QQ reminderTwitter Bool Twitter reminderWeixin Bool Weixin reminderCalendar Bool Calendar reminderInstagram Bool Instagram reminderLinkedIn Bool linkedIn reminderMessengre Bool Messengre reminderSkype Bool Skype reminderWhatsapp Bool Whatsapp reminderAlarmClock Bool Alarm clock reminderSinaWeibo Bool 新浪微博 reminderCalling Bool 来电提醒 reminderCallContact Bool 来电联系人 reminderCallNum Bool 来电号码 reminderPrime Bool Prime reminderNetflix Bool Netflix reminderGpay Bool Gpay reminderPhonpe Bool Phonpe reminderSwiggy Bool Swiggy reminderZomato Bool Zomato reminderMakemytrip Bool Makemytrip reminderJioTv Bool JioTv reminderNiosefit Bool Niosefit reminderYtmusic Bool YT music reminderUber Bool Uber reminderOla Bool Ola reminderGoogleMeet Bool Google meet reminderMormaiiSmartwatch Bool Mormaii Smartwatch reminderTechnosConnect Bool Technos connect reminderEnjoei Bool Enjoei reminderAliexpress Bool Aliexpress reminderShopee Bool Shopee reminderTeams Bool Teams reminder99Taxi Bool 99 taxi reminderUberEats Bool Uber eats reminderLfood Bool Lfood reminderRappi Bool Rappi reminderMercadoLivre Bool Mercado livre reminderMagalu Bool Magalu reminderAmericanas Bool Americanas reminderYahoo Bool Yahoo reminderMessageIcon Bool 消息图标和名字更新 sportWalk Bool v2 走路 sportRun Bool v2 跑步 sportByBike Bool v2 骑行 sportOnFoot Bool v2 徒步 sportSwim Bool v2 游泳 sportMountainClimbing Bool v2 爬山 sportBadminton Bool v2 羽毛球 sportOther Bool v2 其他 sportFitness Bool v2 健身 sportSpinning Bool v2 动感单车 sportEllipsoid Bool v2 椭圆球 sportTreadmill Bool v2 跑步机 sportSitUp Bool v2 仰卧起坐 sportPushUp Bool v2 俯卧撑 sportDumbbell Bool v2 哑铃 sportWeightlifting Bool v2 举重 sportYoga Bool v2 瑜伽 sportRopeSkipping Bool v2 跳绳 sportTableTennis Bool v2 乒乓球 sportBasketball Bool v2 篮球 sportFootballl Bool v2 足球 sportVolleyball Bool v2 排球 sportTennis Bool v2 网球 sportGolf Bool v2 高尔夫 sportBaseball Bool v2 棒球 sportSkiing Bool v2 滑雪 sportRollerSkating Bool v2 轮滑 sportDance Bool v2 跳舞 sportStrengthTraining Bool v2 功能性训练 sportCoreTraining Bool v2 核心训练 sportTidyUpRelax Bool v2 整体放松 sportTraditionalStrengthTraining Bool v2 传统的力量训练 sportOutdoorRun Bool v3 户外跑步 sportIndoorRun Bool v3 室内跑步 sportOutdoorCycle Bool v3 户外骑行 sportIndoorCycle Bool v3 室内骑行 sportOutdoorWalk Bool v3 户外走路 sportIndoorWalk Bool v3 室内走路 sportPoolSwim Bool v3 泳池游泳 sportOpenWaterSwim Bool v3 开放水域游泳 sportElliptical Bool v3 椭圆机 sportRower Bool v3 划船机 sportHiit Bool v3 高强度间歇训练法 sportCricket Bool v3 板球运动 sportPilates Bool v3 普拉提 sportOutdoorFun Bool v3 户外玩耍（定制 kr01） sportOtherActivity Bool v3 其他运动（定制 kr01） sportZumba Bool v3 尊巴舞 sportSurfing Bool v3 冲浪 sportFootvolley Bool v3 足排球 sportStandWaterSkiing Bool v3 站立滑水 sportBattlingRope Bool v3 站绳 sportSkateboard Bool v3 滑板 sportNoticeStepper Bool v3 踏步机 sportShowNum Int 运动显示个数 sportAerobicsBodybuildingExercise Bool 有氧健身操 sportPullUp Bool 引体向上 sportHighBar Bool 单杠 sportParallelBars Bool 双杠 sportTrailRunning Bool 越野跑 getRealtimeData Bool 获取实时数据 getLangLibraryV3 Bool 获取v3语言库 getFindPhone Bool 查找手机 getFindDevice Bool 查找设备 getUpHandGestureEx Bool 抬腕亮屏数据获取 getUpHandGesture Bool 抬腕亮屏 getWeather Bool 天气预报 getDownloadLanguage Bool 可下载语言 getFactoryReset Bool 恢复出厂设置 getFlashLog Bool Flash log getMultiActivityNoUseApp Bool 多运动不能使用app getMultiDial Bool 多表盘 getMenuList Bool 获取菜单列表 getDoNotDisturbMain3 Bool 请勿打扰 getVoiceTransmission Bool 语音功能 setDrinkWaterAddNotifyFlag Bool 设置喝水开关通知类型 getDeviceLogState Bool 获取重启日志错误码和标志位 getNewWatchList Bool 支持获取表盘列表的接口 getNotifyIconAdaptive Bool 消息提醒图标自适应 getPressureNotifyFlagMode Bool 压力开关增加通知类型和全天压力模式设置 getScientificSleep Bool 科学睡眠 getSpo2NotifyFlag Bool 血氧开关增加通知类型 getV3Log Bool v3 收集log getWatchID Bool 获取表盘ID getDeviceName Bool 获取设备名称 getBatteryLog Bool 获取电池日志 getBatteryInfo Bool 获取电池信息 getHeatLog Bool 获取过热日志 getWalkReminderV3 Bool 获取走动提醒 v3 getSupportV3BleMusic Bool 获取支持蓝牙音乐 v3 getSupportGetBleBeepV3 Bool 支持获取固件本地提示音文件信息 getVeryFitNotSupportPhotoWallpaperV3 Bool BIT1 k6项目不需要对应的壁纸表盘，veryFit默认的都是支持的，新加一个不支持的功能表，不需要的配置这个 getSupportUpdateGps Bool 支持升级gps固件 getUbloxModel Bool 支持ublox模块 getSupportGetBleMusicInfoVerV3 Bool 支持获取固件歌曲名和文件夹指令下发和固件回复使用协议版本号0x10 getBtVersion Bool 获得固件三级版本和BT的三级版本 getSportsTypeV3 Bool V3的运动类型设置和获取 getActivitySwitch Bool 支持运动模式识别开关获取 getNoticeIconInformation Bool 支持动态消息图标更新 getSetMaxItemsNum Bool 支持获取固件支持app下发的详情的最大数量 getNotifyMsgV3 Bool v3 消息提醒 getScreenBrightnessMain9 Bool 获取屏幕亮度 getNotice128byte Bool 128个字节通知 getNotice250byte Bool 250个字节通知 getDeletableMenuListV2 Bool 支持获取不可删除的快捷应用列表 getSupportPairEachConnect Bool 设置支持系统配对 getSupportGetMainSportGoalV3 Bool 支持获取运动目标 getBtAddrV2 Bool 取bt蓝牙MAC地址 getSupportBpSetOrMeasurementV2 Bool 血压校准与测量 getMenstrualAddNotifyFlagV3 Bool 生理周期开关增加通知类型 getSupportSetGetTimeGoalTypeV2 Bool 设置获取运动三环周目标 getOxygenDataSupportGradeV3 Bool 多运动同步数据支持摄氧量等级数据 getSupportSyncActivityDataAltitudeInfo Bool 多运动数据同步支持海拔高度数据 getBindCodeAuth Bool 绑定授权码 getSpo2OffChangeV3 Bool V3血氧数据 偏移按照分钟偏移 getLevel5HrInterval Bool 5个心率区间 getBleAndBtVersion Bool 获得固件三级版本和BT的3级版本 getSupportSetGetEmergencyContactV3 Bool 紧急联系人 getSupportSetRepeatWeekTypeOnScheduleReminderV3 Bool 重复提醒类型设置星期重复 getSupportSetRepeatTypeOnScheduleReminderV3 Bool 重复提醒类型设置 getSupportSetMenstrualReminderOnOff Bool 经期开关 getVersionInfo Bool 版本信息 getMtu Bool 获取MTU getDeviceUpdateState Bool 获取手环的升级状态 getHeartRateModeV2 Bool v2获取心率监测模式 getStepDataTypeV2 Bool 目标步数类型为周目标 getFastMsgDataV3 Bool 快速消息 getSupportCallingQuickReply Bool 支持快速回复 getSupportDataTranGetNewErrorCodeV3 Bool 新错误码 v3 getSupportSetGetNoReminderOnWalkReminderV2 Bool 支持走动提醒设置/获取免提醒时间段 getSupportGetSnInfo Bool 支持获取sn信息 getScheduleReminderNotDisplayTitle Bool 日程提醒不显示标题 getSupportV3LongCityName Bool 城市名称 getSupportAddNightLevelV2 Bool 亮度设置支持夜间亮度等级设置 getSupportDialFrameEncodeFormatArgb6666 Bool 固件支持使用表盘框架使用argb6666编码格式 getSupportAppSendPhoneSystemInfo Bool 固件支持app下发手机操作系统信息 getDeviceControlFastModeAlone Bool 固件管理切换快/慢速模式，APP不下发设置链接参数(快慢速） getSupportOnekeyDoubleContact Bool 设备支持一键双连，区分配对时APP展示引导页还是直接下发配对指令 getSupportSetVoiceAssistantStatus Bool 语音助手状态 getSupportFlashLogSize Bool 支持获取flash log size setNoticeMessageStateUseVersion0x20 Bool 设置获取消息应用状态使用version0x20版本下发 setScientificSleepSwitch Bool 科学睡眠开关 setTemperatureSwitchHealth Bool 设置夜间体温开关 setHeartRateMonitor Bool 心率监测 setNoReminderOnDrinkReminder Bool 支持喝水提醒设置免提醒时间段 setAgpsOffLine Bool 默认是支持agps off升级 setAgpsOnLine Bool 默认是支持agps online升级 setSetV3HeartInterval Bool 设置v3心率的间隔 setWeatherCity Bool 天气城市 setDoNotDisturb Bool 防打扰 setCalorieGoal Bool 卡路里目标 setMenstruation Bool 女性生理周期 setPressureData Bool 压力数据 setSpo2Data Bool 血氧数据 setSportModeSort Bool 运动模式排序 setActivitySwitch Bool 运动模式开关 setNightAutoBrightness Bool 夜间自动亮度 setScreenBrightness5Level Bool 5级亮度调节 setWalkReminder Bool 走动提醒 setScreenBrightness3Level Bool 3级亮度调节 默认是5级别，手表app显示，手表不显示 setHandWashReminder Bool 洗手提醒 setLocalDial Bool app支持本地表盘改 云端表盘图片下载 setNotSupportHrHighAlarm Bool 固件对应设置心率过高告警的不起作用 setNotSupportPhotoWallpaper Bool 新加一个不支持的功能表，不需要的配置这个 setPressureHighReminder Bool 压力过高提醒 setWallpaperOnlyTimeColor Bool 壁纸表盘颜色设置 setWallpaperDial Bool 壁纸表盘设置 setSupportBreathRate Bool 呼吸训练 setSupportCalorieUnit Bool 设置单位的增加卡路里设置 setSupportSportPlan Bool 运动计划 setSupportSwimPoolUnit Bool 设置单位的增加泳池的单位设置 setSupportV3Bp Bool v3 bp setV3GetSportSortField Bool 添加功能表兼容 setWatchDialSort Bool 表盘排序 setGetCalorieDistanceGoal Bool 运动三环目标获取 setMidHighTimeGoal Bool 设置目标增加中高运动时长 setNewRetainData Bool 固件支持解绑不清除设备上的数据 setScheduleReminder Bool 日程提醒 setSet100SportSort Bool 100种运动数据排序 setSet20SportParamSort Bool 20种基础运动数据子参数排序 setSetMainUiSort Bool 主界面ui控件排列 setSetStressCalibration Bool 压力校准 setSmartHeartRate Bool 支持app设置智能心率 setSpo2AllDayOnOff Bool 支持app设置全天的血氧开关数据 setSupportAppSendVoiceToBle Bool 支持app下发压缩的sbc语言文件给ble setSupportCyclingUnit Bool 设置单位的增加骑行的单位设置 setSupportWalkRunUnit Bool 设置单位的增加步行跑步的单位设置 setWalkReminderTimeGoal Bool 设置走动提醒中的目标时间 setWatchCapacitySizeDisplay Bool 支持显示表盘容量 setWatchPhotoPositionMove Bool 支持壁纸表盘时间位置移动、控件图标颜色修改、控件功能选择 setMenuListMain7 Bool 菜单设置 setHistoryMenstrual Bool v3经期的历史数据下发 setMenstrualAddPregnancy Bool v2经期提醒设置 增加易孕期和结束时间 setNotSurportCalling3SDelay Bool realme wear 定制需求 不支持显示来电\"延时三秒\"开关 setSetFitnessGuidance Bool 支持健身指导开关下发 setSetNotificationStatus Bool 通知设置 setSetUnreadAppReminder Bool 未读提醒 setSetV3Weather Bool 支持V3天气 setSetV3WeatherSunrise Bool 支持天气推送增加日落日出时间 setSetV3WorldTime Bool 支持世界时间设置 setSyncContact Bool 支持联系人同步 setSyncV3ActivityAddParam Bool 同步V3的多运动增加新的参数 setTransferMusicFile Bool 音乐名称设置 setWalkReminderAddNotify Bool 走动提醒增加通知类型 setSupportFahrenheit Bool 设置单位支持华氏度 setGetAlarmSpecify Bool 支持v3闹钟设置获取指定名称闹钟（KR01定制） setAirohaGpsChip Bool 支持airoha芯片采gps数据功能表 setSupportSecondSportIcon Bool 支持第二套运动图标功能表 目前仅idw05支持 setSportMediumIcon Bool 100种运动需要的中图功能表 setWeatherSunTime Bool 支持天气推送增加日落日出时间 setWeatherAirGrade Bool 支持V3天气 下发空气质量等级 setDrinkWaterReminder Bool 支持设置喝水提醒 setRespirationRate Bool 呼吸率开关设置 setMaxBloodOxygen Bool 最大摄氧量 setBleControlMusic Bool ble控制音乐 setMainPressure Bool v3压力功能表 setNoDisturbAllDayOnOff Bool 勿扰模式设置获取新增全天勿扰开关和智能开关 setOnlyNoDisturbAllDayOnOff Bool 支持设置全天勿扰开关 setOnlyNoDisturbSmartOnOff Bool 支持设置智能勿扰开关 setTimeZoneFloat Bool 时区设定值为实际时区值的扩大100倍 setTemperatureSwitchSupport Bool 设定温度开关 setMsgAllSwitch Bool 支持设置获取消息应用总开关字段 setNotSupperCall3Delay Bool 不支持支持来电提醒页面的“延迟三秒”开关设置项显示 setNoticeMissedCallV2 Bool 支持来电已拒 setOverFindPhone Bool 结束查找手机 getHealthSwitchStateSupportV3 Bool 获取所有的健康监测开关 setSedentariness Bool 久坐提醒 setScreenBrightness Bool 设置屏幕亮度 setSetPhoneVoice Bool 设置设备音乐音量 languageCh Bool 中文 languageCzech Bool 捷克文 languageEnglish Bool 英文 languageFrench Bool 法文 languageGerman Bool 德文 languageItalian Bool 意大利文 languageJapanese Bool 日文 languageSpanish Bool 西班牙文 languageArabic Bool 阿拉伯语 languageBurmese Bool 缅甸语 languageFilipino Bool 菲律宾语 languageGreek Bool 希腊语 languageThai Bool 泰国语 languageTraditionalChinese Bool 繁体中文 languageVietnamese Bool 越南语 languageDutch Bool 荷兰文 languageHungarian Bool 匈牙利文 languageLithuanian Bool 立陶宛文 languagePolish Bool 波兰文 languageRomanian Bool 罗马尼亚文 languageRussian Bool 俄罗斯文 languageSlovenian Bool 斯洛文尼亚文 languageUkrainian Bool 乌克兰文 languageCroatian Bool 克罗地亚语 languageDanish Bool 丹麦语 languageHindi Bool 印地语 languageIndonesian Bool 印尼语 languageKorean Bool 韩语 languagePortuguese Bool 葡萄牙语 languageSlovak Bool 斯洛伐克语 languageTurkish Bool 土耳其 languagePersia Bool 波斯语 languageSweden Bool 瑞典语 languageNorwegian Bool 挪威语 languageFinland Bool 芬兰语 syncV3Hr Bool v3 心率 syncV3Swim Bool v3 游泳 syncV3Spo2 Bool v3 血氧 syncV3Pressure Bool v3 压力 syncV3Activity Bool v3 多运动 syncV3Sleep Bool v3 睡眠 syncV3Sports Bool v3 步数 syncV3Gps Bool v3 gps syncV3SyncAlarm Bool v3 闹钟 syncV3BodyPower Bool v3 身体电量 getSupportHrvV3 Bool 同步hrv getSupportPerBpV3 Bool 同步血压 syncV3Noise Bool 同步噪音 syncV3Temperature Bool 同步温度 syncGps Bool gps syncV3ActivityExchangeData Bool v3多运动同步数据交换 syncHeartRate Bool 心率功能 syncHeartRateMonitor Bool 心率监测 syncSleepMonitor Bool 睡眠检测 syncFastSync Bool 快速同步 syncActivityTimeSync Bool 获取时间同步 syncTimeLine Bool v2同步 时间线 syncNeedV2 Bool 需要V2的同步 syncRealTimeV3 Bool v3多运动同步支持实时速度显示 syncExchangeDataReplyAddRealTimeSpeedPaceV3 Bool 数据交换增加实时的配速字段 syncHealthSyncV3ActivityEndTimeUseUtcMode Bool 多运行结束时间使用UTC模式 syncSupportSetFastModeWhenSyncConfig Bool 支持数据同步时开启快速模式 alarmCount Int 闹钟个数 alarmBrushTeeth Bool 刷牙 alarmDating Bool 约会 alarmDinner Bool 吃饭 alarmMedicine Bool 吃药 alarmMeeting Bool 会议 alarmParty Bool 聚会 alarmRest Bool 休息 alarmSleep Bool 睡觉 alarmSport Bool 锻炼 alarmWakeUp Bool 起床 alexaReminderAddSecV3 Bool alexa 语音提醒增加对应的时钟传输字段 alexaSetEasyOperateV3 Bool alexa 简单控制命令 alexaSetGetAlexaAlarmV3 Bool alexa 语音闹钟获取设置命令使用 alexaSetJumpSportUiV3 Bool alexa 设置跳转运动界面 alexaSetJumpUiV3 Bool alexa 设置跳转ui界面 alexaSetSetOnOffTypeV3 Bool alexa app设置开关命令 alexaSetWeatherV3 Bool alexa 语音支持设置天气 alexaTimeNewV3 Bool alexa 支持设置多个定时器 setAlexaControll100brightness Bool alexa 100级亮度控制 alexaGetSupportGetAlexaDefaultLanguage Bool alexa 获取alexa默认语言 alexaGetUIControllSports Bool alexa跳转运动界面支持100种运动类型字段 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-28 10:04:30 "},"doc/IDODeviceLog.html":{"url":"doc/IDODeviceLog.html","title":"设备日志","keywords":"","body":"设备日志功能 功能概述 获取设备flash、电池、过热等日志 DeviceLogInterface 属性 getLogIng 是否正在获取日志中 logDirPath 获取所有日志目录地址 (返回：/xx/../ido_sdk/devices/{macAddress}/device_logs) 方法 startGet(types:timeOut:progress:completion:) 开始获取日志 Parameters: types: 日志类型集合 timeOut: 获取日志超时 progress: 日志获取进度 (0-100) completion: 日志获取完成回调 cancel(completion:) 取消获取日志 Parameters: completion: 完成回调 示例 Swift sdk.deviceLog.startGet(types: [.general], timeOut: 60) { progress in //获取flash日志进度 } completion: { success in //获取完成 if (success) { //成功 通过logDirPath获取日志 }else { //失败 } } Kotlin sdk.deviceLog.startGet(mutableListOf(), 60, { progress -> //获取flash日志进度 }) { success -> //获取完成 if (success) { //成功 通过logDirPath获取日志 } else { //失败 } } Kotlin: Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-01 09:55:18 "},"doc/IDOTools.html":{"url":"doc/IDOTools.html","title":"工具方法","keywords":"","body":"工具方法 ToolsInterface 方法 png2Bmp(inPath:outPath:format:completion:) 图片转换格式 png->bmp Parameters: inPath: 用于转换的png路径(包含文件名及后缀) outPath: 转换完的bmp路径(包含文件名及后缀) format: 转换成bmp的文件格式 compressToPNG(inputFilePath:outputFilePath:completion:) 压缩png图片质量 Parameters: inputFilePath: 输入文件路径 outputFilePath: 输出文件路径 makeEpoFile(dirPath:epoFilePath:completion:) 创建EPO.DAT文件 Parameters: dirPath: 存放要制作epo文件的目录 epoFilePath: 制作的epo文件存放路径 gpsInitType(motionTypeIn:completion:) gps运动后优化轨迹,根据运动类型初始化速度阈值，若输入其他运动类型，会导致无运动轨迹 Parameters: motionTypeIn: 运动类型 1、户外走路 = 52, 走路 = 1, 徒步 = 4, 运动类型设为0 2、户外跑步 = 48, 跑步 = 2, 运动类型设为1 3、户外骑行 = 50, 骑行 = 3, 运动型性设为2 completion: gpsAlgProcessRealtime(json:completion:) gps数据实时处理入口,需要对输出的数据进行判断，若纬度为-180则为错误值，不应该输出 Parameters: json: { lon,经度,数据类型double lat,纬度,数据类型double timestamp,时间戳,数据类型int accuracy,定位精度,数据类型double gpsaccuracystatus,定位等级，0 = 定位未知, 1 = 定位好, 2 = 定位差,数据类型int } completion: gpsSmoothData(json:completion:) 平滑数据 Parameters: json: {lat,纬度数组,长度为len,数据类型double lon,经度数组,长度为len,数据类型double len,数据长度} completion: 结果保存在数组lat和lon中 logPath(completion:) 获取log根路径 currentDevicePath(completion:) 获取当前设备缓存根路径 exportLog(completion:) 导出日志 返回压缩后日志zip文件绝对路径 lastConnectDevice(completion:) 获取最后连接的设备(json) loadDeviceExtListByDisk(sortDesc:completion:) 获取连接过的设备列表(List[json]) 示例 Swift: sdk.tool.compressToPNG(inputFilePath: \"i.png\", outputFilePath: \"o.png\") { rs in // 压缩成功或失败 } Kotlin: sdk.tool.compressToPNG(\"i.png\", \"o.png\") { // 压缩成功或失败 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-28 10:09:20 "},"doc/dataExchange/IDODataExchange.html":{"url":"doc/dataExchange/IDODataExchange.html","title":"数据交换","keywords":"","body":"数据交换功能 功能概述 当在App发起运动时，手环会从App产生的运动数据计算心率和卡路里返回App实现数据交换； 当手环发起运动时，手环产生的运动数据定时发送到App，实时展示运动数据。交换数据是以时间作为唯一参照，交换过程需要通过运动开始时间判断当前活动数据，如果时间对应不了，则无法交换数据。 ExchangeDataInterface 属性 supportV3ActivityExchange 获取是否支持v3运动数据交换 status 交换数据状态 方法 appExec(type:) app执行数据交换 Parameters: type: app执行数据交换实体 IDOAppExecType appReplyExec(type:) ble发起运动 ble执行数据交换 app回复 Parameters: type: app回复数据实体 IDOAppReplyType getLastActivityData(completion: ) 多运动数据最后一次数据获取 Parameters: completion: 命令执行回调 code: 错误码 0为成功，非0不成功 model: 多运动数据实体 IDOAppActivityDataV3ExchangeModel getActivityHrData(completion:) 多运动获取一分钟心率数据 Parameters: completion: 命令执行回调 code: 错误码 0为成功，非0不成功 model: 心率数据实体 IDOAppHrDataExchangeModel appListenBleExec(completion:) ble发起运动 app监听ble Parameters: completion: 命令执行回调 type: 监听ble执行数据实体 IDOBleExecType appListenAppExec(completion:) app执行响应 Parameters: completion: 命令执行回调 type: 监听app执行Ble响应实体 IDOBleReplyType exchangeV2Data(completion:) 交换v2数据 Parameters: completion: 命令执行回调 type: 监听v2数据交换实体 IDOExchangeV2Model exchangeV3Data(completion:) 交换v3数据 Parameters: completion: 命令执行回调 type: 监听v3数据交换实体 IDOExchangeV3Model 示例 Swift： kotlin: Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-01 09:55:18 "},"doc/dataExchange/IDOAppActivityDataV3ExchangeModel.html":{"url":"doc/dataExchange/IDOAppActivityDataV3ExchangeModel.html","title":"多运动小结数据实体","keywords":"","body":"多运动小结数据实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOAppActivityDataV3ExchangeModel 参数 说明 类型 备注 year 年份 int month 月份 int version 协议版本号 int hrInterval 心率间隔 单位分钟 int step 步数 int durations 持续时间 int calories 卡路里 int distance 距离 int burnFatMins 脂肪燃烧的心率持续时间 单位分钟 int aerobicMins 有氧运动的持续时间 单位分钟 int limitMins 极限锻炼的持续时间 单位分钟 int warmUp 热身运动 int fatBurning 脂肪燃烧 int aerobicExercise 有氧训练 int anaerobicExercise 无氧训练 int extremeExercise 极限训练 int warmUpTime 热身运动的累计时长 单位秒 int fatBurningTime 脂肪燃烧的累计时长 单位秒 int aerobicExerciseTime 有氧运动的累计时长 单位秒 int anaerobicExerciseTime 无氧运动的累计时长 单位秒 int extremeExerciseTime 极限锻炼的累计时长 单位秒 int avgSpeed 平均速度 单位km/h int maxSpeed 最快速度 单位km/h int avgStepStride 平均步幅 int maxStepStride 最大步幅 int kmSpeed 平均公里配速 int fastKmSpeed 最快公里配速 int avgStepFrequency 平均步频 int maxStepFrequency 最大步频 int avgHrValue 平均心率 int maxHrValue 最大心率 int recoverTime 恢复时长 单位小时 app收到该数据之后，每过1小时需要自减1 int vo2max 最大摄氧量 单位 ml/kg/min int trainingEffect 训练效果 范围： 1.0 - 5.0 （扩大10倍传输） int grade 摄氧量等级 1：低等 2：业余 3：一般 4：平均 5：良好 6：优秀 7：专业 int stepsFrequencyCount 步频详情个数 int miSpeedCount 英里配速个数 最大100 int realSpeedCount 实时速度个数 int paceSpeedCount 实时配速个数 int kmSpeedCount 公里配速详情个数 最大100 int actionDataCount 本次动作训练个数 int kmSpeeds 每公里耗时秒数 配速集合 array stepsFrequency 步频集合 单位步/分钟 array itemsMiSpeed 英里配速数组 array itemRealSpeed 实时速度数组 单位km/h array paceSpeedItems 实时配速数组 array actionData 动作完成内容 type : 动作类型 1快走；2慢跑; 3中速跑；4快跑 heart_con_value : 每个动作心率控制 time : 动作完成时间 单位秒 goal_time ：动作目标时间 array baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOAppExecType.html":{"url":"doc/dataExchange/IDOAppExecType.html","title":"APP执行数据交换实体","keywords":"","body":"APP执行数据交换实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOAppStartExchangeModel 参数 说明 类型 备注 targetType 目标类型 int targetValue 目标值 int forceStart 是否强制开始 0:不强制,1:强制 int vo2max 最大摄氧量 单位 ml/kg/min int recoverTime 恢复时长：单位小时 int avgWeekActivityTime 上个月平均每周的运动时间 单位分钟 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppEndExchangeModel 参数 说明 类型 备注 duration 持续时长（单位：s） int calories 卡路里，单位大卡 int distance 距离（单位：米） int isSave 0:不保存，1:保存 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppIngExchangeModel 参数 说明 类型 备注 duration 持续时长（单位：s） int calories 卡路里，单位大卡 int distance 距离（单位：米） int status 0: 全部有效、1: 距离无效、 2: GPS信号弱 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppPauseExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppRestoreExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppIngV3ExchangeModel 参数 说明 类型 备注 version 协议版本号 int 默认0 signal 0: 表示信号弱 2: 表示信号强 int distance 距离（单位：米） int speed app计算显示实时配速，单位km/h，100倍 int duration 持续时间 int calories 卡路里 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppOperatePlanExchangeModel 参数 说明 类型 备注 operate 1:开始运动，2：暂停运动, 3:恢复运动 ，4：结束运动, 5: 切换动作 int trainingOffset 训练的课程日期偏移 从0开始 int planType 计划类型 : 1：跑步计划3km，2：跑步计划5km，3：跑步计划10km，4：半程马拉松训练5：马拉松训练（二期） int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOAppHrDataExchangeModel.html":{"url":"doc/dataExchange/IDOAppHrDataExchangeModel.html","title":"多运动心率数据实体","keywords":"","body":"多运动心率数据实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOAppHrDataExchangeModel 参数 说明 类型 备注 version 协议版本号 int heartRateHistoryLen 心率数据数组长度 最大60 int interval 心率间隔 单位秒 int heartRates 心率数据数组 存一分钟的心率数据, 1s存一个 array baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOAppReplyType.html":{"url":"doc/dataExchange/IDOAppReplyType.html","title":"Ble执行数据交换实体","keywords":"","body":"Ble执行数据交换实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOBleStartReplyExchangeModel 参数 说明 类型 备注 operate 1：请求app打开gps 2：发起运动请求 int retCode 0: 成功 非0: 失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleIngReplyExchangeModel 参数 说明 类型 备注 distance 距离 单位：0.01km int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleEndReplyExchangeModel 参数 说明 类型 备注 retCode 0: 成功 非0: 失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBlePauseReplyExchangeModel 参数 说明 类型 备注 retCode 0: 成功 非0: 失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleRestoreReplyExchangeModel 参数 说明 类型 备注 retCode 0: 成功 非0: 失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleOperatePlanReplyExchangeModel 参数 说明 类型 备注 operate 1:开始运动，2：暂停运动, 3:恢复运动 ，4：结束运动, 5: 切换动作 int planType 计划类型 - 1：跑步计划3km，2：跑步计划5km，- 3：跑步计划10km，4：半程马拉松训练 - 5：马拉松训练（二期） int actionType 动作类型 - 1:快走；2:慢跑；3:中速跑；4:快跑 - 5:结束课程运动 （还要等待用户是否有自由运动） - 6:课程结束后自由运动 （此字段当operate为5起作用） int errorCode 0为成功，非0为失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppBlePauseReplyExchangeModel 参数 说明 类型 备注 errCode 0: 成功; 1: 没有进入运动模式失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppBleRestoreReplyExchangeModel 参数 说明 类型 备注 errCode 0: 成功; 1: 没有进入运动模式失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppBleEndReplyExchangeModel 参数 说明 类型 备注 errCode 0: 成功; 1: 没有进入运动模式失败 int duration 持续时长 单位s int calories 卡路里 单位大卡 int distance 距离 单位0.01km int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOBleExecType.html":{"url":"doc/dataExchange/IDOBleExecType.html","title":"App监听Ble数据实体","keywords":"","body":"App监听Ble数据实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOBleStartExchangeModel 参数 说明 类型 备注 operate 1：请求app打开gps 2：发起运动请求 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleIngExchangeModel 参数 说明 类型 备注 distance 距离 单位：0.01km int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleEndExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBlePauseExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOBleRestoreExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppBlePauseExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppBleRestoreExchangeModel 参数 说明 类型 备注 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppBleEndExchangeModel 参数 说明 类型 备注 duration 持续时长 单位s int calories 卡路里 单位大卡 int distance 距离 单位0.01km int avgHr 平均心率 int maxHr 最大心率 int burnFatMins 脂肪燃烧时长 单位分钟 int aerobicMins 心肺锻炼时长 单位分钟 int limitMins 极限锻炼时长 单位分钟 int isSave 0:不保存，1:保存 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOBleReplyType.html":{"url":"doc/dataExchange/IDOBleReplyType.html","title":"App执行Ble响应实体","keywords":"","body":"App执行Ble响应实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOAppStartReplyExchangeModel 参数 说明 类型 备注 retCode 响应状态- 0:成功; 1:设备已经进入运动模式失败; - 2:设备电量低失败;3:手环正在充电 - 4:正在使用Alexa 5:通话中 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppEndReplyExchangeModel 参数 说明 类型 备注 errorCode 0:成功; 1:设备结束失败 int calories 卡路里，单位大卡 int distance 距离（单位：米） int step 步数 (单位:步) int avgHr 平均心率 int maxHr 最大心率 int burnFatMins 脂肪燃烧时长 单位分钟 int aerobicMins 心肺锻炼时长 单位分钟 int limitMins 极限锻炼时长 单位分钟 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppIngReplyExchangeModel 参数 说明 类型 备注 calories 卡路里，单位大卡 int distance 距离（单位：米） int status 0: 全部有效、1: 距离无效、 2: GPS信号弱 int step 步数 (单位:步) int currentHr 当前心率 int interval 心率间隔 单位s int hrSerial 序列号 int hrJson 心率值数据 List baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppPauseReplyExchangeModel 参数 说明 类型 备注 errCode 暂停错误码 0:成功 非0:失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppRestoreReplyExchangeModel 参数 说明 类型 备注 errCode 暂停错误码 0:成功 非0:失败 int baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppIngV3ReplyExchangeModel 参数 说明 类型 备注 version 暂停错误码 0:成功 非0:失败 int heartRate 心率数据 int distance 距离 int 单位根据单位设置的单位显示 duration 持续时间 秒钟 int realTimeCalories 动态卡路里 int realTimeSpeed 实时速度，单位km/h，扩大100倍 int kmSpeed 实时公里配速 单位s/公里 int steps 步数 int swimPosture 主泳姿 int status 状态 int -0：无效 1：开始 2：手动暂停 3：结束 4：自动暂停 5秒使用滑动平均第5秒使用1-5秒数据，第6秒使用2-6秒数据 realTimeSpeedPace 实时的配速，单位秒 int trainingEffect 有氧训练效果等级 int 范围 0-50 扩大10倍传输 anaerobicTrainingEffect 无氧运动训练效果等级 int 范围 0-50 扩大10倍传输 actionType 动作类型1快走 2慢跑 3中速跑 4快跑 5结束课程运动 6课程结束后自由运 int countHour 运动累积时间 时 int 运动累积时间=课程内训练时间+课程结束后计时 需要固件开启功能表action_type = 1~5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增） countMinute 运动累积时间 分 int 同上 countSecond 运动累积时间 秒 int 同上 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel IDOAppOperatePlanReplyExchangeModel 参数 说明 类型 备注 planType 计划类型1：跑步计划3km，2：跑步计划5km，3：跑步计划10km，4：半程马拉松训练，5：马拉松训练（二期） int operate 1: 开始运动2：暂停运动3: 恢复运动 4：结束运动,5: 切换动作 int actionType 动作类型: 1快走 2慢跑 3中速跑 4快跑 5结束课程运动 6课程结束后自由运 int errorCode 0为成功，非0为失败 baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOExchangeStatus.html":{"url":"doc/dataExchange/IDOExchangeStatus.html","title":"交换数据状态","keywords":"","body":"交换数据状态 IDOExchangeStatus enum IDOExchangeStatus: Int { case initial = 0 /// 初始化 case appStart = 1 /// app发起开始 case appStartReply = 2 /// app发起开始 ble回复 case appEnd = 3 /// app发起结束 case appEndReply = 4 /// app发起结束 ble回复 case appPause = 5 /// app发起暂停 case appPauseReply = 6 /// app发起暂停 ble回复 case appRestore = 7 /// app发起恢复 case appRestoreReply = 8 /// app发起恢复 ble回复 case appIng = 9 /// app发起交换 case appIngReply = 10 /// app发起交换 ble回复 case getActivity = 11 /// 获取最后运动数据 case getActivityReply = 12 /// 获取最后运动数据 ble回复 case getHr = 13 /// 获取一分钟心率 case getHrReply = 14 /// 获取一分钟心率 ble回复 case appStartPlan = 15 /// app开始运动计划 case appStartPlanReply = 16 /// app开始运动计划 ble回复 case appPausePlan = 17 /// app暂停运动计划 case appPausePlanReply = 18 /// app暂停运动计划 ble回复 case appRestorePlan = 19 /// app恢复运动计划 case appRestorePlanReply = 20 /// app恢复运动计划 ble回复 case appEndPlan = 21 /// app结束运动计划 case appEndPlanReply = 22 /// app结束运动计划 ble回复 case appSwitchAction = 23 /// app切换动作 case appSwitchActionReply = 24 /// app结束运动计划 ble回复 case appBlePause = 25 /// app发起的运动 ble发起暂停 case appBlePauseReply = 26 /// app发起的运动 ble发起暂停 app回复 case appBleRestore = 27 /// app发起的运动 ble发起恢复 case appBleRestoreReply = 28 /// app发起的运动 ble发起恢复 app回复 case appBleEnd = 29 /// app发起的运动 ble发起结束 case appBleEndReply = 30 /// app发起的运动 ble发起结束 app回复 case bleStart = 31 /// ble发起的运动 ble发起开始 case bleStartReply = 32 /// ble发起的运动 ble发起开始 app回复 case bleEnd = 33 /// ble发起的运动 ble发起结束 case bleEndReply = 34 /// ble发起的运动 ble发起结束 app回复 case blePause = 35 /// ble发起的运动 ble发起暂停 case blePauseReply = 36 /// ble发起的运动 ble发起暂停 app回复 case bleRestore = 37 /// ble发起的运动 ble发起恢复 case bleRestoreReply = 38 /// ble发起的运动 ble发起恢复 app回复 case bleIng = 39 /// ble发起的运动 ble发起交换 case bleIngReply = 40 /// ble发起的运动 ble发起交换 app回复 case bleStartPlan = 41 /// ble开始运动计划 case blePausePlan = 42 /// ble暂停运动计划 case bleRestorePlan = 43 /// ble恢复运动计划 case bleEndPlan = 44 /// ble结束运动计划 case bleSwitchAction = 45 /// ble切换动作 case bleOperatePlanReply = 46 } enum class IDOExchangeStatus(val raw: Int) { INITIAL(0), /// 初始化 APPSTART(1), /// APP发起开始 APPSTARTREPLY(2), /// APP发起开始 BLE回复 APPEND(3), /// APP发起结束 APPENDREPLY(4), /// APP发起结束 BLE回复 APPPAUSE(5), /// APP发起暂停 APPPAUSEREPLY(6), /// APP发起暂停 BLE回复 APPRESTORE(7), /// APP发起恢复 APPRESTOREREPLY(8), /// APP发起恢复 BLE回复 APPING(9), /// APP发起交换 APPINGREPLY(10), /// APP发起交换 BLE回复 GETACTIVITY(11), /// 获取最后运动数据 GETACTIVITYREPLY(12), /// 获取最后运动数据 BLE回复 GETHR(13), /// 获取一分钟心率 GETHRREPLY(14), /// 获取一分钟心率 BLE回复 APPSTARTPLAN(15), /// APP开始运动计划 APPSTARTPLANREPLY(16), /// APP开始运动计划 BLE回复 APPPAUSEPLAN(17), /// APP暂停运动计划 APPPAUSEPLANREPLY(18), /// APP暂停运动计划 BLE回复 APPRESTOREPLAN(19), /// APP恢复运动计划 APPRESTOREPLANREPLY(20), /// APP恢复运动计划 BLE回复 APPENDPLAN(21), /// APP结束运动计划 APPENDPLANREPLY(22), /// APP结束运动计划 BLE回复 APPSWITCHACTION(23), /// APP切换动作 APPSWITCHACTIONREPLY(24), /// APP结束运动计划 BLE回复 APPBLEPAUSE(25), /// APP发起的运动 BLE发起暂停 APPBLEPAUSEREPLY(26), /// APP发起的运动 BLE发起暂停 APP回复 APPBLERESTORE(27), /// APP发起的运动 BLE发起恢复 APPBLERESTOREREPLY(28), /// APP发起的运动 BLE发起恢复 APP回复 APPBLEEND(29), /// APP发起的运动 BLE发起结束 APPBLEENDREPLY(30), /// APP发起的运动 BLE发起结束 APP回复 BLESTART(31), /// BLE发起的运动 BLE发起开始 BLESTARTREPLY(32), /// BLE发起的运动 BLE发起开始 APP回复 BLEEND(33), /// BLE发起的运动 BLE发起结束 BLEENDREPLY(34), /// BLE发起的运动 BLE发起结束 APP回复 BLEPAUSE(35), /// BLE发起的运动 BLE发起暂停 BLEPAUSEREPLY(36), /// BLE发起的运动 BLE发起暂停 APP回复 BLERESTORE(37), /// BLE发起的运动 BLE发起恢复 BLERESTOREREPLY(38), /// BLE发起的运动 BLE发起恢复 APP回复 BLEING(39), /// BLE发起的运动 BLE发起交换 BLEINGREPLY(40), /// BLE发起的运动 BLE发起交换 APP回复 BLESTARTPLAN(41), /// BLE开始运动计划 BLEPAUSEPLAN(42), /// BLE暂停运动计划 BLERESTOREPLAN(43), /// BLE恢复运动计划 BLEENDPLAN(44), /// BLE结束运动计划 BLESWITCHACTION(45), /// BLE切换动作 BLEOPERATEPLANREPLY(46); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOExchangeV2Model.html":{"url":"doc/dataExchange/IDOExchangeV2Model.html","title":"V2数据交换实体","keywords":"","body":"V2数据交换实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOExchangeV2Model 参数 说明 类型 备注 operate 1:请求app打开gps 2：发起运动请求 int targetValue 目标数值 int targetType 运动目标类型0: 无目标，1: 重复次数，单位：次，2: 距离,单位：米, 3: 卡路里, 单位：大卡, 4: 时长,单位：分钟, 5: 步数, 单位：步 int forceStart 是否强制开始 0:不强制,1:强制 retCode 错误码0:成功; 1:设备已经进入运动模式失败;2: 设备电量低失败; 3:手环正在充电 4:正在使用Alexa 5:通话中 int calories 卡路里 (单位:J) int distance 距离 (单位:米) int durations 持续时间 (单位:秒钟) int step 步数 (单位:步) int avgHr 平均心率 int maxHr 最大心率 int curHr 当前心率 int hrSerial 序列号 int burnFatMins 燃烧脂肪时长 (单位：分钟) int aerobicMins 有氧时长 (单位：分钟) int limitMins 极限时长 (单位：分钟) int isSave 是否存储数据 bool status 0:全部有效, 1:距离无效， 2: gps 信号弱 int interval 心率间隔 int hrValues 心率数据集合 array baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/dataExchange/IDOExchangeV3Model.html":{"url":"doc/dataExchange/IDOExchangeV3Model.html","title":"V3数据交换实体","keywords":"","body":"V3数据交换实体 IDOExchangeBaseModel 参数 说明 类型 备注 day 日期 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int IDOExchangeV3Model 参数 说明 类型 备注 year 训练课程年份 int month 训练课程月份 int planType 计划类型： 1：跑步计划3km , 2：跑步计划5km , 3：跑步计划10km , 4：半程马拉松训练（二期）,5：马拉松训练（二期） int actionType 动作类型: 1:快走；2:慢跑；3:中速跑；4快跑；5:结束课程运动 6:课程结束后自由运动 int version 协议版本号 int operate 1:请求app打开gps 2：发起运动请求 int targetValue 目标数值 int targetType 目标类型:0: 无目标，1: 重复次数，单位：次，2: 距离,单位：米,3: 卡路里, 单位：大卡, 4: 时长,单位：分钟, 5: 步数, 单位：步 int forceStart 是否强制开始 0:不强制,1:强制 retCode 错误码 step 步数 int durations 持续时间 int calories 卡路里 int distance 距离 int swimPosture 0: 混合泳; 1: 自由泳; 2: 蛙泳; 3: 仰泳; 4: 蝶泳; int status 手环返回的状态 开始:1,暂停:2, 结束:3,0:无效状态 int signalFlag 信号强弱 0: 表示信号弱， 1: 表示信号强 int isSave 是否存储数据 Bool realTimeSpeed app计算显示实时速度 单位km/h 100倍 15秒一个记录 int realTimePace app计算显示实时配速 单位 s int interval 心率间隔 int hrCount 心率个数 int burnFatMins 燃烧脂肪时长 (单位：分钟) int aerobicMins 有氧时长 (单位：分钟) int limitMins 极限时长 (单位：分钟) int hrValues 心率数据集合 array warmUpSecond 热身锻炼时长(秒钟) int anaeroicSecond 无氧锻炼时长(秒钟) int fatBurnSecond 燃脂锻炼时长(秒钟) int aerobicSecond 有氧锻炼时长(秒钟) int limitSecond 极限锻炼时长(秒钟) int avgHr 平均心率 int maxHr 最大心率 int curHr 当前心率 int warmUpValue 热身运动值 int fatBurnValue 脂肪燃烧运动值 int aerobicValue 有氧运动值 int limitValue 极限运动值 int anaerobicValue 无氧运动值 int avgSpeed 平均速度 km/h int maxSpeed 最大速度 km/h int avgStepFrequency 平均步频 int maxStepFrequency 最大步频 int avgStepStride 平均步幅 int maxStepStride 最大步幅 int kmSpeed 平均公里配速 int fastKmSpeed 最快公里配速 int kmSpeedCount 公里配速个数 int kmSpeeds 公里配速集合 array mileCount 英里配速个数 int mileSpeeds 英里配速集合 array stepsFrequencyCount 步频个数 int stepsFrequencys 步频集合 array trainingEffect 训练效果； 单位：无 范围 1.0 ~ 5.0 （*10倍） int anaerobicTrainingEffect 无氧训练效果； 单位：无 范围 1.0 ~ 5.0 （*10倍） int vo2Max 最大摄氧量； 单位：毫升/公斤/分钟； 范围 0-80 int actionDataCount 本次动作训练个数 int inClassCalories 课程内运动热量 单位千卡 int completionRate 动作完成率 0—100 int hrCompletionRate 心率控制率 0—100 int recoverTime 恢复时长：单位小时 int avgWeekActivityTime 上个月平均每周的运动时间 单位分钟 int grade 摄氧量等级1:低等 2:业余 3:一般 4：平均 5：良好 6：优秀 7：专业 int actionData 动作完成内容type : 动作类型 1快走；2慢跑; 3中速跑；4快跑 heart_con_value : 每个动作心率控制 time : 动作完成时间 单位秒 goal_time ：动作目标时间 int trainingOffset 训练的课程日期偏移 从0开始 int countHour 运动倒计时 int countMinute 运动倒计时分 int countSecond 运动倒计时秒 int time 动作目标时间 单位秒 int lowHeart 心率范围低值 int heightHeart 心率范围高值 int paceSpeedCount 实时配速个数 int paceSpeeds 实时配速数组 传过来的是s 每5s算一次 array realSpeedCount 实时速度个数 int realSpeeds 实时速度数组 传过来的是s 每5s算一次 array baseModel 基础数据 日期、时间、运动类型 IDOExchangeBaseModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/messageIcon/IDOMessageIcon.html":{"url":"doc/messageIcon/IDOMessageIcon.html","title":"消息图标","keywords":"","body":"消息图标 功能概述 iOS 和 Android 实现消息图标动态更新接口。iOS当监听到消息通知，固件返回应用包名再从后台获取APP信息，下载对应的图标经过裁剪后下发到固件中，应用名称也下发到固件；Android启动时获取系统中所有的应用信息，当Android app 接收消息通知时，根据消息类型裁剪对应的应用图标，并下发给固件。 MessageIconInterface 属性 updating 是否更新中 iconDirPath 获取icon图片存放目录地 方法 getDefaultAppInfo(completion:) 设备支持默认APP信息集合 Parameters: completion: 返回APP信息结果 items: IDOAppIconItemModel 集合 firstGetAppInfo(force:completion:) android 已安装所有app信息集合 Parameters: force： Android强制更新 消息图标和名字 completion: 返回APP信息结果 items: IDOAppIconItemModel 集合 getCacheAppInfo(completion:) 获取缓存APP信息 Parameters: completion: 返回APP信息结果 model: IDOAppIconInfoModel resetIconInfoData(macAddress:deleteIcon:completion:) 重置APP图标信息（删除本地沙盒缓存的图片） Parameters: macAddress: 需要清除数据的MAC地址 deleteIcon: 是否删除icon 图片文件，默认删除 completion: 删除状态 iOSConfig(countryCode:baseUrlPath:appKey:language:) iOS 配置信息 Parameters: countryCode: 国家编码 （如：CN、US） baseUrlPath: 缓存服务器地址 appKey：后台请求分配 appKey language：语言单位 androidSendMessageIconToDevice(eventType:completion:) Android 当有收到通知时下发消息图标到设备 Parameters: eventType: 事件类型 completion: 下发状态 示例 Swift /// ios 配置信息 /// 参数只供参考，根据实际情况赋值 sdk.messageIcon.iOSConfig(countryCode: \"US\",seUrlPath: \"https://cn-user.idoocloud.com/api/ios/lookup/get\", appKey: \"800a6444f9c0433c8e88741b6ddf1443\", language: 2) /// 进入开关控制页面获取APP名字和图标 sdk.messageIcon.firstGetAllAppInfo(force: false) { items in } /// 获取默认开启通知APP sdk.messageIcon.getDefaultAppInfo { items in } /// 解绑设备删除数据 sdk.messageIcon.resetIconInfoData(macAddress: \"\", deleteIcon: true) { success in } Kotlin: Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-01 09:55:18 "},"doc/messageIcon/IDOMessageIconModel.html":{"url":"doc/messageIcon/IDOMessageIconModel.html","title":"消息图标实体","keywords":"","body":"消息图标实体 IDOAppIconInfoModel 参数 说明 类型 备注 version 版本号 Int iconWidth icon宽度 Int iconHeight icon高度 Int colorFormat 颜色格式 Int blockSize 压缩块大小 Int totalNum 总个数 Int items 包名详情集合 list IDOAppIconItemModel集合 IDOAppIconItemModel 参数 说明 类型 备注 evtType 事件类型 Int packName 应用包名 String appName 应用名称 String iconLocalPath icon 沙盒小图标地址 String (固件使用) itemId 每个包名给一个id Int msgCount 消息收到次数 Int 废弃 iconCloudPath icon 云端地址 String state 消息图标更新状态 Int 0：不需要更新 1：需要更新icon ，2：需要更新app名，3：icon和app都需要更新 iconLocalPathBig icon 沙盒大图标地址 String (app使用) countryCode 国家编码 String appVersion 应用版本号 String isDownloadAppInfo 是否已经下载APP信息 Bool isUpdateAppName 是否已经更新应用名称 Bool isUpdateAppIcon 是否已经更新应用图标 Bool isDefault 是否为默认应用 Bool IDOAppIconInfoModel 参数 说明 类型 备注 version 版本号 Int iconWidth icon宽度 Int iconHeightasdfasdf icon高度 Int colorFormat 颜色格式 Int blockSize 压缩块大小 Int totalNum 总个数 Int items 包名详情集合 list IDOAppIconItem集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 17:08:03 "},"doc/get/IDOCommandIndex.html":{"url":"doc/get/IDOCommandIndex.html","title":"获取指令","keywords":"","body":"获取指令 获取bt蓝牙名称 - getBtName 获得实时数据 - getLiveData 获取错误记录 - getErrorRecord 获取HID信息 - getHidInfo 获取gps信息 - getGpsInfo 获取版本信息 - getVersionInfo 获取mtu信息 - getMtuInfo 获取所有的健康监测开关 - getAllHealthSwitchState 获取gps状态 - getGpsStatus 获取固件不可删除的快捷应用列表 - getUnerasableMeunList 运动模式自动识别开关获取 - getActivitySwitch 获取红点提醒开关 - getUnreadAppReminder 获取字库信息 - getFlashBinInfo 查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备) - getBtNotice 获取抬腕数据 - getUpHandGesture 获取表盘id - getWatchDialId 获取勿扰模式状态 - getNotDisturbStatus 获取设置的卡路里/距离/中高运动时长 主界面 - getMainSportGoal 获取血压算法三级版本号信息事件号 - getBpAlgVersion 获取屏幕亮度 - getScreenBrightness 获取热启动参数 - getHotStartParam 获取固件支持的详情最大设置数量 - getSupportMaxSetItemsNum 获取走动提醒 - getWalkRemind 获取全天步数目标 - getStepGoal 获取手表名字 - getDeviceName 获取固件本地保存联系人文件修改时间 - getContactReviseTime 获取设备升级状态 - getUpdateStatus 获取压力值 - getStressVal 获取心率监测模式 - getHeartRateMode 获取电池信息 - getBatteryInfo 获取设备的日志状态 - getDeviceLogState 获取下载语言支持 - getDownloadLanguage 获取设备支持的列表 - getMenuList 获取通知中心开关 - getNoticeStatus app获取ble的闹钟 - getAlarm 获取用户习惯信息 - getHabitInfo 获取固件的歌曲名和文件夹 - getBleMusicInfo 获取屏幕信息 - getWatchDialInfo 获取表盘列表 v3 - getWatchListV3 获取表盘列表 v2 - getWatchListV2 获取语言库列表 - getLanguageLibrary 获取固件本地提示音文件信息 - getBleBeep Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 15:08:47 "},"doc/get/IDOGetBtName.html":{"url":"doc/get/IDOGetBtName.html","title":"获取bt蓝牙名称","keywords":"","body":"获取bt蓝牙名称 String 示例 Swift Cmds.getBtName().send { rs in if case .success(let obj) = rs { // 成功 // obj is String }else { // 失败 } } Kotlin Cmds.getBtName().send { if (it.res != null) { // 成功 // it.res is String }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetLiveData.html":{"url":"doc/get/IDOGetLiveData.html","title":"获得实时数据","keywords":"","body":"获得实时数据 IDOLiveDataModel 功能表:getRealtimeData 示例 Swift Cmds.getLiveData().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOLiveDataModel }else { // 失败 } } Kotlin Cmds.getLiveData().send { if (it.res != null) { // 成功 // it.res is IDOLiveDataModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:08:44 "},"doc/get/IDOGetErrorRecord.html":{"url":"doc/get/IDOGetErrorRecord.html","title":"获取错误记录","keywords":"","body":"获取错误记录 IDOErrorRecordModel 功能表:getFlashLog 示例 Swift Cmds.getErrorRecord().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOErrorRecordModel }else { // 失败 } } Kotlin Cmds.getErrorRecord().send { if (it.res != null) { // 成功 // it.res is IDOErrorRecordModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:10:36 "},"doc/get/IDOGetHidInfo.html":{"url":"doc/get/IDOGetHidInfo.html","title":"获取HID信息","keywords":"","body":"获取HID信息 Bool 示例 Swift Cmds.getHidInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is Bool }else { // 失败 } } Kotlin Cmds.getHidInfo().send { if (it.res != null) { // 成功 // it.res is Bool }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetGpsInfo.html":{"url":"doc/get/IDOGetGpsInfo.html","title":"获取gps信息","keywords":"","body":"获取gps信息 IDOGpsInfoModel 功能表:getSupportUpdateGps 示例 Swift Cmds.getGpsInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOGpsInfoModel }else { // 失败 } } Kotlin Cmds.getGpsInfo().send { if (it.res != null) { // 成功 // it.res is IDOGpsInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:12:21 "},"doc/get/IDOGetVersionInfo.html":{"url":"doc/get/IDOGetVersionInfo.html","title":"获取版本信息","keywords":"","body":"获取版本信息 IDOVersionInfoModel 功能表:getVersionInfo 示例 Swift Cmds.getVersionInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOVersionInfoModel }else { // 失败 } } Kotlin Cmds.getVersionInfo().send { if (it.res != null) { // 成功 // it.res is IDOVersionInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:13:41 "},"doc/get/IDOGetMtuInfo.html":{"url":"doc/get/IDOGetMtuInfo.html","title":"获取mtu信息","keywords":"","body":"获取mtu信息 IDOMtuInfoModel 示例 Swift Cmds.getMtuInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOMtuInfoModel }else { // 失败 } } Kotlin Cmds.getMtuInfo().send { if (it.res != null) { // 成功 // it.res is IDOMtuInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetAllHealthSwitchState.html":{"url":"doc/get/IDOGetAllHealthSwitchState.html","title":"获取所有的健康监测开关","keywords":"","body":"获取所有的健康监测开关 IDOAllHealthSwitchStateModel 示例 Swift Cmds.getAllHealthSwitchState().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOAllHealthSwitchStateModel }else { // 失败 } } Kotlin Cmds.getAllHealthSwitchState().send { if (it.res != null) { // 成功 // it.res is IDOAllHealthSwitchStateModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetGpsStatus.html":{"url":"doc/get/IDOGetGpsStatus.html","title":"获取gps状态","keywords":"","body":"获取gps状态 IDOGpsStatusModel 功能表:getSupportUpdateGps 示例 Swift Cmds.getGpsStatus().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOGpsStatusModel }else { // 失败 } } Kotlin Cmds.getGpsStatus().send { if (it.res != null) { // 成功 // it.res is IDOGpsStatusModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:14:58 "},"doc/get/IDOGetUnerasableMeunList.html":{"url":"doc/get/IDOGetUnerasableMeunList.html","title":"获取固件不可删除的快捷应用列表","keywords":"","body":"获取固件不可删除的快捷应用列表 IDOUnerasableMeunListModel 功能表:getDeletableMenuListV2 示例 Swift Cmds.getUnerasableMeunList().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOUnerasableMeunListModel }else { // 失败 } } Kotlin Cmds.getUnerasableMeunList().send { if (it.res != null) { // 成功 // it.res is IDOUnerasableMeunListModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:16:05 "},"doc/get/IDOGetActivitySwitch.html":{"url":"doc/get/IDOGetActivitySwitch.html","title":"运动模式自动识别开关获取","keywords":"","body":"运动模式自动识别开关获取 IDOActivitySwitchModel 示例 Swift Cmds.getActivitySwitch().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOActivitySwitchModel }else { // 失败 } } Kotlin Cmds.getActivitySwitch().send { if (it.res != null) { // 成功 // it.res is IDOActivitySwitchModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetUnreadAppReminder.html":{"url":"doc/get/IDOGetUnreadAppReminder.html","title":"获取红点提醒开关","keywords":"","body":"获取红点提醒开关 IDOCmdGetResponseModel 示例 Swift Cmds.getUnreadAppReminder().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdGetResponseModel }else { // 失败 } } Kotlin Cmds.getUnreadAppReminder().send { if (it.res != null) { // 成功 // it.res is IDOCmdGetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetFlashBinInfo.html":{"url":"doc/get/IDOGetFlashBinInfo.html","title":"获取字库信息","keywords":"","body":"获取字库信息 IDOFlashBinInfoModel 示例 Swift Cmds.getFlashBinInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOFlashBinInfoModel }else { // 失败 } } Kotlin Cmds.getFlashBinInfo().send { if (it.res != null) { // 成功 // it.res is IDOFlashBinInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetBtNotice.html":{"url":"doc/get/IDOGetBtNotice.html","title":"查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备)","keywords":"","body":"查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备) IDOBtNoticeModel 示例 Swift Cmds.getBtNotice().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBtNoticeModel }else { // 失败 } } Kotlin Cmds.getBtNotice().send { if (it.res != null) { // 成功 // it.res is IDOBtNoticeModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetUpHandGesture.html":{"url":"doc/get/IDOGetUpHandGesture.html","title":"获取抬腕数据","keywords":"","body":"获取抬腕数据 IDOUpHandGestureModel 示例 Swift Cmds.getUpHandGesture().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOUpHandGestureModel }else { // 失败 } } Kotlin Cmds.getUpHandGesture().send { if (it.res != null) { // 成功 // it.res is IDOUpHandGestureModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetWatchDialId.html":{"url":"doc/get/IDOGetWatchDialId.html","title":"获取表盘id","keywords":"","body":"获取表盘id IDOWatchDialIdModel 示例 Swift Cmds.getWatchDialId().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWatchDialIdModel }else { // 失败 } } Kotlin Cmds.getWatchDialId().send { if (it.res != null) { // 成功 // it.res is IDOWatchDialIdModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetNotDisturbStatus.html":{"url":"doc/get/IDOGetNotDisturbStatus.html","title":"获取勿扰模式状态","keywords":"","body":"获取勿扰模式状态 IDONotDisturbStatusModel 示例 Swift Cmds.getNotDisturbStatus().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDONotDisturbStatusModel }else { // 失败 } } Kotlin Cmds.getNotDisturbStatus().send { if (it.res != null) { // 成功 // it.res is IDONotDisturbStatusModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetMainSportGoal.html":{"url":"doc/get/IDOGetMainSportGoal.html","title":"获取设置的卡路里/距离/中高运动时长 主界面","keywords":"","body":"获取设置的卡路里/距离/中高运动时长 主界面 IDOMainSportGoalModel 示例 Swift Cmds.getMainSportGoal().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOMainSportGoalModel }else { // 失败 } } Kotlin Cmds.getMainSportGoal().send { if (it.res != null) { // 成功 // it.res is IDOMainSportGoalModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetBpAlgVersion.html":{"url":"doc/get/IDOGetBpAlgVersion.html","title":"获取血压算法三级版本号信息事件号","keywords":"","body":"获取血压算法三级版本号信息事件号 IDOBpAlgVersionModel 功能表:setSupportV3Bp 示例 Swift Cmds.getBpAlgVersion().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBpAlgVersionModel }else { // 失败 } } Kotlin Cmds.getBpAlgVersion().send { if (it.res != null) { // 成功 // it.res is IDOBpAlgVersionModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:17:40 "},"doc/get/IDOGetScreenBrightness.html":{"url":"doc/get/IDOGetScreenBrightness.html","title":"获取屏幕亮度","keywords":"","body":"获取屏幕亮度 IDOScreenBrightnessModel 示例 Swift Cmds.getScreenBrightness().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOScreenBrightnessModel }else { // 失败 } } Kotlin Cmds.getScreenBrightness().send { if (it.res != null) { // 成功 // it.res is IDOScreenBrightnessModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetHotStartParam.html":{"url":"doc/get/IDOGetHotStartParam.html","title":"获取热启动参数","keywords":"","body":"获取热启动参数 IDOHotStartParamModel 示例 Swift Cmds.getHotStartParam().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOHotStartParamModel }else { // 失败 } } Kotlin Cmds.getHotStartParam().send { if (it.res != null) { // 成功 // it.res is IDOHotStartParamModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetSupportMaxSetItemsNum.html":{"url":"doc/get/IDOGetSupportMaxSetItemsNum.html","title":"获取固件支持的详情最大设置数量","keywords":"","body":"获取固件支持的详情最大设置数量 IDOSupportMaxSetItemsNumModel 示例 Swift Cmds.getSupportMaxSetItemsNum().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSupportMaxSetItemsNumModel }else { // 失败 } } Kotlin Cmds.getSupportMaxSetItemsNum().send { if (it.res != null) { // 成功 // it.res is IDOSupportMaxSetItemsNumModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetWalkRemind.html":{"url":"doc/get/IDOGetWalkRemind.html","title":"获取走动提醒","keywords":"","body":"获取走动提醒 IDOWalkRemindModel 示例 Swift Cmds.getWalkRemind().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWalkRemindModel }else { // 失败 } } Kotlin Cmds.getWalkRemind().send { if (it.res != null) { // 成功 // it.res is IDOWalkRemindModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetStepGoal.html":{"url":"doc/get/IDOGetStepGoal.html","title":"获取全天步数目标","keywords":"","body":"获取全天步数目标 IDOStepGoalModel 示例 Swift Cmds.getStepGoal().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOStepGoalModel }else { // 失败 } } Kotlin Cmds.getStepGoal().send { if (it.res != null) { // 成功 // it.res is IDOStepGoalModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetDeviceName.html":{"url":"doc/get/IDOGetDeviceName.html","title":"获取手表名字","keywords":"","body":"获取手表名字 String 示例 Swift Cmds.getDeviceName().send { rs in if case .success(let obj) = rs { // 成功 // obj is String }else { // 失败 } } Kotlin Cmds.getDeviceName().send { if (it.res != null) { // 成功 // it.res is String }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetContactReviseTime.html":{"url":"doc/get/IDOGetContactReviseTime.html","title":"获取固件本地保存联系人文件修改时间","keywords":"","body":"获取固件本地保存联系人文件修改时间 IDOContactReviseTimeModel 示例 Swift Cmds.getContactReviseTime().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOContactReviseTimeModel }else { // 失败 } } Kotlin Cmds.getContactReviseTime().send { if (it.res != null) { // 成功 // it.res is IDOContactReviseTimeModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetUpdateStatus.html":{"url":"doc/get/IDOGetUpdateStatus.html","title":"获取设备升级状态","keywords":"","body":"获取设备升级状态 IDOUpdateStatusModel 功能表:getDeviceUpdateState 示例 Swift Cmds.getUpdateStatus().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOUpdateStatusModel }else { // 失败 } } Kotlin Cmds.getUpdateStatus().send { if (it.res != null) { // 成功 // it.res is IDOUpdateStatusModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:18:56 "},"doc/get/IDOGetStressVal.html":{"url":"doc/get/IDOGetStressVal.html","title":"获取压力值","keywords":"","body":"获取压力值 IDOStressValModel 示例 Swift Cmds.getStressVal().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOStressValModel }else { // 失败 } } Kotlin Cmds.getStressVal().send { if (it.res != null) { // 成功 // it.res is IDOStressValModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetHeartRateMode.html":{"url":"doc/get/IDOGetHeartRateMode.html","title":"获取心率监测模式","keywords":"","body":"获取心率监测模式 IDOHeartRateModeModel 示例 Swift Cmds.getHeartRateMode().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOHeartRateModeModel }else { // 失败 } } Kotlin Cmds.getHeartRateMode().send { if (it.res != null) { // 成功 // it.res is IDOHeartRateModeModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetBatteryInfo.html":{"url":"doc/get/IDOGetBatteryInfo.html","title":"获取电池信息","keywords":"","body":"获取电池信息 IDOBatteryInfoModel 示例 Swift Cmds.getBatteryInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBatteryInfoModel }else { // 失败 } } Kotlin Cmds.getBatteryInfo().send { if (it.res != null) { // 成功 // it.res is IDOBatteryInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetDeviceLogState.html":{"url":"doc/get/IDOGetDeviceLogState.html","title":"获取设备的日志状态","keywords":"","body":"获取设备的日志状态 IDODeviceLogStateModel 示例 Swift Cmds.getDeviceLogState().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDODeviceLogStateModel }else { // 失败 } } Kotlin Cmds.getDeviceLogState().send { if (it.res != null) { // 成功 // it.res is IDODeviceLogStateModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetDownloadLanguage.html":{"url":"doc/get/IDOGetDownloadLanguage.html","title":"获取下载语言支持","keywords":"","body":"获取下载语言支持 IDODownloadLanguageModel 功能表:getDownloadLanguage 示例 Swift Cmds.getDownloadLanguage().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDODownloadLanguageModel }else { // 失败 } } Kotlin Cmds.getDownloadLanguage().send { if (it.res != null) { // 成功 // it.res is IDODownloadLanguageModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:20:09 "},"doc/get/IDOGetMenuList.html":{"url":"doc/get/IDOGetMenuList.html","title":"获取设备支持的列表","keywords":"","body":"获取设备支持的列表 IDOMenuListModel 示例 Swift Cmds.getMenuList().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOMenuListModel }else { // 失败 } } Kotlin Cmds.getMenuList().send { if (it.res != null) { // 成功 // it.res is IDOMenuListModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetNoticeStatus.html":{"url":"doc/get/IDOGetNoticeStatus.html","title":"获取通知中心开关","keywords":"","body":"获取通知中心开关 IDOSetNoticeStatusModel 示例 Swift Cmds.getNoticeStatus().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSetNoticeStatusModel }else { // 失败 } } Kotlin Cmds.getNoticeStatus().send { if (it.res != null) { // 成功 // it.res is IDOSetNoticeStatusModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetAlarm.html":{"url":"doc/get/IDOGetAlarm.html","title":"app获取ble的闹钟","keywords":"","body":"app获取ble的闹钟 IDOAlarmModel 示例 Swift Cmds.getAlarm().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOAlarmModel }else { // 失败 } } Kotlin Cmds.getAlarm().send { if (it.res != null) { // 成功 // it.res is IDOAlarmModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetHabitInfo.html":{"url":"doc/get/IDOGetHabitInfo.html","title":"获取用户习惯信息","keywords":"","body":"获取用户习惯信息 IDOHabitInfoModel 示例 Swift Cmds.getHabitInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOHabitInfoModel }else { // 失败 } } Kotlin Cmds.getHabitInfo().send { if (it.res != null) { // 成功 // it.res is IDOHabitInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetBleMusicInfo.html":{"url":"doc/get/IDOGetBleMusicInfo.html","title":"获取固件的歌曲名和文件夹","keywords":"","body":"获取固件的歌曲名和文件夹 IDOMusicInfoModel 功能表:getSupportGetBleMusicInfoVerV3 示例 Swift Cmds.getBleMusicInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOMusicInfoModel }else { // 失败 } } Kotlin Cmds.getBleMusicInfo().send { if (it.res != null) { // 成功 // it.res is IDOMusicInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:21:50 "},"doc/get/IDOGetWatchDialInfo.html":{"url":"doc/get/IDOGetWatchDialInfo.html","title":"获取屏幕信息","keywords":"","body":"获取屏幕信息 IDOWatchDialInfoModel 示例 Swift Cmds.getWatchDialInfo().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWatchDialInfoModel }else { // 失败 } } Kotlin Cmds.getWatchDialInfo().send { if (it.res != null) { // 成功 // it.res is IDOWatchDialInfoModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/get/IDOGetWatchListV3.html":{"url":"doc/get/IDOGetWatchListV3.html","title":"获取表盘列表 v3","keywords":"","body":"获取表盘列表 v3 IDOWatchListModel 功能表：getNewWatchList == true 使用该接口，否则使用获取表盘列表 v2 示例 Swift Cmds.getWatchListV3().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWatchListModel }else { // 失败 } } Kotlin Cmds.getWatchListV3().send { if (it.res != null) { // 成功 // it.res is IDOWatchListModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-03 17:16:59 "},"doc/get/IDOGetWatchListV2.html":{"url":"doc/get/IDOGetWatchListV2.html","title":"获取表盘列表 v2","keywords":"","body":"获取表盘列表 v2 IDOWatchListV2Model 功能表：getNewWatchList == false 使用该接口，否则使用获取表盘列表 v3 示例 Swift Cmds.getWatchListV2().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWatchListV2Model }else { // 失败 } } Kotlin Cmds.getWatchListV2().send { if (it.res != null) { // 成功 // it.res is IDOWatchListV2Model }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-03 17:17:30 "},"doc/get/IDOGetLanguageLibrary.html":{"url":"doc/get/IDOGetLanguageLibrary.html","title":"获取语言库列表","keywords":"","body":"获取语言库列表 IDOLanguageLibraryModel 功能表:getLangLibraryV3 示例 Swift Cmds.getLanguageLibrary().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOLanguageLibraryModel }else { // 失败 } } Kotlin Cmds.getLanguageLibrary().send { if (it.res != null) { // 成功 // it.res is IDOLanguageLibraryModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:22:56 "},"doc/get/IDOGetBleBeep.html":{"url":"doc/get/IDOGetBleBeep.html","title":"获取固件本地提示音文件信息","keywords":"","body":"获取固件本地提示音文件信息 IDOBleBeepModel 功能表:getSupportGetBleBeepV3 示例 Swift Cmds.getBleBeep().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBleBeepModel }else { // 失败 } } Kotlin Cmds.getBleBeep().send { if (it.res != null) { // 成功 // it.res is IDOBleBeepModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-04 12:23:43 "},"doc/set/IDOCommandIndex.html":{"url":"doc/set/IDOCommandIndex.html","title":"设置指令","keywords":"","body":"获取指令 手机音量下发给ble - setBleVoice 设置控制gps - setGpsControl 智能心率模式设置 - setHeartRateModeSmart 设置压力校准 - setStressCalibration 设置洗手提醒 - setHandWashingReminder 设置运动目标 - setSportGoal 设置天气数据 - setWeatherData 未读信息红点提示开关 - setUnreadAppReminder 手机app通过这个命令开关，实现通知应用状态设置 - setNotificationStatus 设置科学睡眠开关 - setScientificSleepSwitch 血压校准 - setBpCalibration 设置防丢 - setLostFind 设置表盘 - setWatchDial 设置天气开关 - setWeatherSwitch 设置单位 - setUnit 设置寻找手机 - setFindPhone 设置停止寻找手机 - setOverFindPhone 设置一键呼叫 - setOnekeySOS 设置运动模式选择 - setSportModeSelect 设置运动模式排序 - setSportModeSort 设置久坐 - setLongSit 设置心率模式 - setHeartRateMode 设置身体电量开关 - setBodyPowerTurn 设置呼吸率开关 - setRRespiRateTurn 环境音量的开关和阀值 - setV3Noise 设置日出日落时间 - setWeatherSunTime 设置快捷方式 - setShortcut 设置通知中心 - setNoticeStatus 设置夜间体温开关 - setTemperatureSwitch 设置睡眠时间段 - setSleepPeriod 设置抬手亮屏 - setUpHandGesture 设置吃药提醒 - setTakingMedicineReminder 设置血氧开关 - setSpo2Switch 设置天气城市名称 - setWeatherCityName app设置ble的闹钟 - setAlarm 健身指导 - setFitnessGuidance 显示模式 - setDisplayMode 血压测量 - setBpMeasurement 音乐开关 - setMusicOnOff app下发跑步计划(运动计划) - setSendRunPlan v3 下发v3天气协议 - setWeatherV3 控制音乐 - musicControl 操作歌曲或者文件夹 - setMusicOperate 通知消息提醒 - noticeMessageV3 设置消息通知状态 - setNoticeMessageState 动态消息通知 - setNoticeAppName 下发v3世界时间 - setWorldTimeV3 设置日程提醒 - setSchedulerReminder 血压校准控制 - setBpCalControlV3 设置表盘 - setWatchFaceData 同步常用联系人 - setSyncContact 设置运动子项数据排列 - setSportParamSort 新的100种运动排序 - setSport100Sort 设置主界面控件排序 - setMainUISortV3 经期的历史数据下发 - setHistoricalMenstruation 设置运动城市名称 - setLongCityNameV3 V3设置心率模式 - setHeartMode 语音回复文本 - setVoiceReplyText 设置表盘顺序 - setWatchDialSort 设置多个走动提醒的时间点 - setWalkRemindTimes 设置壁纸表盘列表 - setWallpaperDialReply 设置时间 - setDateTime 设置用户信息 - setUserInfo 重启设备 - reboot 恢复出厂设置 - factoryReset 控制寻找设备开始 - findDeviceStart 控制寻找设备结束 - findDeviceStop 开始拍照 (app -> ble) - photoStart 结束拍照 (app -> ble) - photoStop 设置左右手 - setHand 设置屏幕亮度 - setScreenBrightness 进入升级模式 - otaStart 设置心率区间 - setHeartRateInterval 设置卡路里和距离目标(设置日常三环) - setCalorieDistanceGoal 设置走动提醒 - setWalkRemind 设置经期 - setMenstruation Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 15:08:26 "},"doc/set/IDOSetBleVoice.html":{"url":"doc/set/IDOSetBleVoice.html","title":"手机音量下发给ble","keywords":"","body":"手机音量下发给ble IDOBleVoiceParamModel IDOCmdSetResponseModel 功能表：setSetPhoneVoice 示例 Swift let param = IDOBleVoiceParamModel(...) Cmds.setBleVoice(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOBleVoiceParamModel(...) Cmds.setBleVoice(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 16:14:33 "},"doc/set/IDOSetGpsControl.html":{"url":"doc/set/IDOSetGpsControl.html","title":"设置控制gps","keywords":"","body":"设置控制gps IDOGpsControlParamModel IDOGpsControlModel 示例 Swift let param = IDOGpsControlParamModel(...) Cmds.setGpsControl(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOGpsControlModel }else { // 失败 } } Kotlin val param = IDOGpsControlParamModel(...) Cmds.setGpsControl(param).send { if (it.res != null) { // 成功 // it.res is IDOGpsControlModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetHeartRateModeSmart.html":{"url":"doc/set/IDOSetHeartRateModeSmart.html","title":"智能心率模式设置","keywords":"","body":"智能心率模式设置 IDOHeartRateModeSmartParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOHeartRateModeSmartParamModel(...) Cmds.setHeartRateModeSmart(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOHeartRateModeSmartParamModel(...) Cmds.setHeartRateModeSmart(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetStressCalibration.html":{"url":"doc/set/IDOSetStressCalibration.html","title":"设置压力校准","keywords":"","body":"设置压力校准 IDOStressCalibrationParamModel IDOStressCalibrationModel 示例 Swift let param = IDOStressCalibrationParamModel(...) Cmds.setStressCalibration(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOStressCalibrationModel }else { // 失败 } } Kotlin val param = IDOStressCalibrationParamModel(...) Cmds.setStressCalibration(param).send { if (it.res != null) { // 成功 // it.res is IDOStressCalibrationModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetHandWashingReminder.html":{"url":"doc/set/IDOSetHandWashingReminder.html","title":"设置洗手提醒","keywords":"","body":"设置洗手提醒 IDOHandWashingReminderParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOHandWashingReminderParamModel(...) Cmds.setHandWashingReminder(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOHandWashingReminderParamModel(...) Cmds.setHandWashingReminder(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSportGoal.html":{"url":"doc/set/IDOSetSportGoal.html","title":"设置运动目标","keywords":"","body":"设置运动目标 IDOSportGoalParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOSportGoalParamModel(...) Cmds.setSportGoal(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOSportGoalParamModel(...) Cmds.setSportGoal(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWeatherData.html":{"url":"doc/set/IDOSetWeatherData.html","title":"设置天气数据","keywords":"","body":"设置天气数据 IDOWeatherDataParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOWeatherDataParamModel(...) Cmds.setWeatherData(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWeatherDataParamModel(...) Cmds.setWeatherData(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetUnreadAppReminder.html":{"url":"doc/set/IDOSetUnreadAppReminder.html","title":"未读信息红点提示开关","keywords":"","body":"未读信息红点提示开关 IDOCmdSetResponseModel 示例 Swift Cmds.setUnreadAppReminder().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setUnreadAppReminder().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetNotificationStatus.html":{"url":"doc/set/IDOSetNotificationStatus.html","title":"手机app通过这个命令开关，实现通知应用状态设置","keywords":"","body":"手机app通过这个命令开关，实现通知应用状态设置 IDONotificationStatusParamModel IDOCmdSetResponseModel 示例 Swift let param = IDONotificationStatusParamModel(...) Cmds.setNotificationStatus(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDONotificationStatusParamModel(...) Cmds.setNotificationStatus(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetScientificSleepSwitch.html":{"url":"doc/set/IDOSetScientificSleepSwitch.html","title":"设置科学睡眠开关","keywords":"","body":"设置科学睡眠开关 IDOScientificSleepSwitchParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOScientificSleepSwitchParamModel(...) Cmds.setScientificSleepSwitch(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOScientificSleepSwitchParamModel(...) Cmds.setScientificSleepSwitch(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetBpCalibration.html":{"url":"doc/set/IDOSetBpCalibration.html","title":"血压校准","keywords":"","body":"血压校准 IDOBpCalibrationParamModel IDOBpCalibrationModel 示例 Swift let param = IDOBpCalibrationParamModel(...) Cmds.setBpCalibration(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBpCalibrationModel }else { // 失败 } } Kotlin val param = IDOBpCalibrationParamModel(...) Cmds.setBpCalibration(param).send { if (it.res != null) { // 成功 // it.res is IDOBpCalibrationModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetLostFind.html":{"url":"doc/set/IDOSetLostFind.html","title":"设置防丢","keywords":"","body":"设置防丢 IDOLostFindParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOLostFindParamModel(...) Cmds.setLostFind(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOLostFindParamModel(...) Cmds.setLostFind(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWatchDial.html":{"url":"doc/set/IDOSetWatchDial.html","title":"设置表盘","keywords":"","body":"设置表盘 IDOWatchDialParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOWatchDialParamModel(...) Cmds.setWatchDial(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWatchDialParamModel(...) Cmds.setWatchDial(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWeatherSwitch.html":{"url":"doc/set/IDOSetWeatherSwitch.html","title":"设置天气开关","keywords":"","body":"设置天气开关 IDOCmdSetResponseModel 示例 Swift Cmds.setWeatherSwitch().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setWeatherSwitch().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetUnit.html":{"url":"doc/set/IDOSetUnit.html","title":"设置单位","keywords":"","body":"设置单位 IDOUnitParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOUnitParamModel(...) Cmds.setUnit(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOUnitParamModel(...) Cmds.setUnit(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetFindPhone.html":{"url":"doc/set/IDOSetFindPhone.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 IDOCmdSetResponseModel 示例 Swift Cmds.setFindPhone().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setFindPhone().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetOverFindPhone.html":{"url":"doc/set/IDOSetOverFindPhone.html","title":"设置停止寻找手机","keywords":"","body":"设置停止寻找手机 IDOCmdSetResponseModel 示例 Swift Cmds.setOverFindPhone().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setOverFindPhone().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetOnekeySOS.html":{"url":"doc/set/IDOSetOnekeySOS.html","title":"设置一键呼叫","keywords":"","body":"设置一键呼叫 IDOCmdSetResponseModel 示例 Swift Cmds.setOnekeySOS().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setOnekeySOS().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSportModeSelect.html":{"url":"doc/set/IDOSetSportModeSelect.html","title":"设置运动模式选择","keywords":"","body":"设置运动模式选择 IDOSportModeSelectParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOSportModeSelectParamModel(...) Cmds.setSportModeSelect(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOSportModeSelectParamModel(...) Cmds.setSportModeSelect(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSportModeSort.html":{"url":"doc/set/IDOSetSportModeSort.html","title":"设置运动模式排序","keywords":"","body":"设置运动模式排序 IDOCmdSetResponseModel 示例 Swift Cmds.setSportModeSort().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setSportModeSort().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetLongSit.html":{"url":"doc/set/IDOSetLongSit.html","title":"设置久坐","keywords":"","body":"设置久坐 IDOLongSitParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOLongSitParamModel(...) Cmds.setLongSit(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOLongSitParamModel(...) Cmds.setLongSit(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetHeartRateMode.html":{"url":"doc/set/IDOSetHeartRateMode.html","title":"设置心率模式","keywords":"","body":"设置心率模式 IDOHeartRateModeParamModel IDOHeartRateModeModel 示例 Swift let param = IDOHeartRateModeParamModel(...) Cmds.setHeartRateMode(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOHeartRateModeModel }else { // 失败 } } Kotlin val param = IDOHeartRateModeParamModel(...) Cmds.setHeartRateMode(param).send { if (it.res != null) { // 成功 // it.res is IDOHeartRateModeModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetBodyPowerTurn.html":{"url":"doc/set/IDOSetBodyPowerTurn.html","title":"设置身体电量开关","keywords":"","body":"设置身体电量开关 IDOCmdSetResponseModel 示例 Swift Cmds.setBodyPowerTurn().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setBodyPowerTurn().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetRRespiRateTurn.html":{"url":"doc/set/IDOSetRRespiRateTurn.html","title":"设置呼吸率开关","keywords":"","body":"设置呼吸率开关 IDOCmdSetResponseModel 示例 Swift Cmds.setRRespiRateTurn().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setRRespiRateTurn().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetV3Noise.html":{"url":"doc/set/IDOSetV3Noise.html","title":"环境音量的开关和阀值","keywords":"","body":"环境音量的开关和阀值 IDOV3NoiseParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOV3NoiseParamModel(...) Cmds.setV3Noise(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOV3NoiseParamModel(...) Cmds.setV3Noise(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWeatherSunTime.html":{"url":"doc/set/IDOSetWeatherSunTime.html","title":"设置日出日落时间","keywords":"","body":"设置日出日落时间 IDOWeatherSunTimeParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOWeatherSunTimeParamModel(...) Cmds.setWeatherSunTime(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWeatherSunTimeParamModel(...) Cmds.setWeatherSunTime(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetShortcut.html":{"url":"doc/set/IDOSetShortcut.html","title":"设置快捷方式","keywords":"","body":"设置快捷方式 IDOShortcutParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOShortcutParamModel(...) Cmds.setShortcut(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOShortcutParamModel(...) Cmds.setShortcut(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetNoticeStatus.html":{"url":"doc/set/IDOSetNoticeStatus.html","title":"设置通知中心","keywords":"","body":"设置通知中心 IDOSetNoticeStatusModel IDONotificationCenterModel 示例 Swift let param = IDOSetNoticeStatusModel(...) Cmds.setNoticeStatus(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDONotificationCenterModel }else { // 失败 } } Kotlin val param = IDOSetNoticeStatusModel(...) Cmds.setNoticeStatus(param).send { if (it.res != null) { // 成功 // it.res is IDONotificationCenterModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetTemperatureSwitch.html":{"url":"doc/set/IDOSetTemperatureSwitch.html","title":"设置夜间体温开关","keywords":"","body":"设置夜间体温开关 IDOTemperatureSwitchParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOTemperatureSwitchParamModel(...) Cmds.setTemperatureSwitch(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOTemperatureSwitchParamModel(...) Cmds.setTemperatureSwitch(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSleepPeriod.html":{"url":"doc/set/IDOSetSleepPeriod.html","title":"设置睡眠时间段","keywords":"","body":"设置睡眠时间段 IDOSleepPeriodParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOSleepPeriodParamModel(...) Cmds.setSleepPeriod(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOSleepPeriodParamModel(...) Cmds.setSleepPeriod(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetUpHandGesture.html":{"url":"doc/set/IDOSetUpHandGesture.html","title":"设置抬手亮屏","keywords":"","body":"设置抬手亮屏 IDOUpHandGestureParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOUpHandGestureParamModel(...) Cmds.setUpHandGesture(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOUpHandGestureParamModel(...) Cmds.setUpHandGesture(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetTakingMedicineReminder.html":{"url":"doc/set/IDOSetTakingMedicineReminder.html","title":"设置吃药提醒","keywords":"","body":"设置吃药提醒 IDOTakingMedicineReminderParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOTakingMedicineReminderParamModel(...) Cmds.setTakingMedicineReminder(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOTakingMedicineReminderParamModel(...) Cmds.setTakingMedicineReminder(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSpo2Switch.html":{"url":"doc/set/IDOSetSpo2Switch.html","title":"设置血氧开关","keywords":"","body":"设置血氧开关 IDOSpo2SwitchParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOSpo2SwitchParamModel(...) Cmds.setSpo2Switch(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOSpo2SwitchParamModel(...) Cmds.setSpo2Switch(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWeatherCityName.html":{"url":"doc/set/IDOSetWeatherCityName.html","title":"设置天气城市名称","keywords":"","body":"设置天气城市名称 IDOCmdSetResponseModel 示例 Swift Cmds.setWeatherCityName().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setWeatherCityName().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetAlarm.html":{"url":"doc/set/IDOSetAlarm.html","title":"app设置ble的闹钟","keywords":"","body":"app设置ble的闹钟 IDOAlarmModel IDOCmdSetResponseModel 示例 Swift let param = IDOAlarmModel(...) Cmds.setAlarm(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOAlarmModel(...) Cmds.setAlarm(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetFitnessGuidance.html":{"url":"doc/set/IDOSetFitnessGuidance.html","title":"健身指导","keywords":"","body":"健身指导 IDOFitnessGuidanceParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOFitnessGuidanceParamModel(...) Cmds.setFitnessGuidance(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOFitnessGuidanceParamModel(...) Cmds.setFitnessGuidance(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetDisplayMode.html":{"url":"doc/set/IDOSetDisplayMode.html","title":"显示模式","keywords":"","body":"显示模式 IDODisplayModeParamModel IDOCmdSetResponseModel 示例 Swift let param = IDODisplayModeParamModel(...) Cmds.setDisplayMode(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDODisplayModeParamModel(...) Cmds.setDisplayMode(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetBpMeasurement.html":{"url":"doc/set/IDOSetBpMeasurement.html","title":"血压测量","keywords":"","body":"血压测量 IDOBpMeasurementParamModel IDOBpMeasurementModel 示例 Swift let param = IDOBpMeasurementParamModel(...) Cmds.setBpMeasurement(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBpMeasurementModel }else { // 失败 } } Kotlin val param = IDOBpMeasurementParamModel(...) Cmds.setBpMeasurement(param).send { if (it.res != null) { // 成功 // it.res is IDOBpMeasurementModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetMusicOnOff.html":{"url":"doc/set/IDOSetMusicOnOff.html","title":"音乐开关","keywords":"","body":"音乐开关 IDOMusicOnOffParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOMusicOnOffParamModel(...) Cmds.setMusicOnOff(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOMusicOnOffParamModel(...) Cmds.setMusicOnOff(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSendRunPlan.html":{"url":"doc/set/IDOSetSendRunPlan.html","title":"app下发跑步计划(运动计划)","keywords":"","body":"app下发跑步计划(运动计划) IDORunPlanParamModel IDOSendRunPlanModel 示例 Swift let param = IDORunPlanParamModel(...) Cmds.setSendRunPlan(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSendRunPlanModel }else { // 失败 } } Kotlin val param = IDORunPlanParamModel(...) Cmds.setSendRunPlan(param).send { if (it.res != null) { // 成功 // it.res is IDOSendRunPlanModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWeatherV3.html":{"url":"doc/set/IDOSetWeatherV3.html","title":"v3 下发v3天气协议","keywords":"","body":"v3 下发v3天气协议 IDOWeatherV3ParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOWeatherV3ParamModel(...) Cmds.setWeatherV3(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWeatherV3ParamModel(...) Cmds.setWeatherV3(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOMusicControl.html":{"url":"doc/set/IDOMusicControl.html","title":"控制音乐","keywords":"","body":"控制音乐 IDOMusicControlParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOMusicControlParamModel(...) Cmds.musicControl(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOMusicControlParamModel(...) Cmds.musicControl(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetMusicOperate.html":{"url":"doc/set/IDOSetMusicOperate.html","title":"操作歌曲或者文件夹","keywords":"","body":"操作歌曲或者文件夹 IDOMusicOpearteParamModel IDOMusicOperateModel 示例 Swift let param = IDOMusicOpearteParamModel(...) Cmds.setMusicOperate(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOMusicOperateModel }else { // 失败 } } Kotlin val param = IDOMusicOpearteParamModel(...) Cmds.setMusicOperate(param).send { if (it.res != null) { // 成功 // it.res is IDOMusicOperateModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDONoticeMessageV3.html":{"url":"doc/set/IDONoticeMessageV3.html","title":"通知消息提醒","keywords":"","body":"通知消息提醒 IDONoticeMessageParamModel IDOCmdSetResponseModel 示例 Swift let param = IDONoticeMessageParamModel(...) Cmds.noticeMessageV3(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDONoticeMessageParamModel(...) Cmds.noticeMessageV3(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetNoticeMessageState.html":{"url":"doc/set/IDOSetNoticeMessageState.html","title":"设置消息通知状态","keywords":"","body":"设置消息通知状态 IDONoticeMessageStateParamModel IDONoticeMessageStateModel 示例 Swift let param = IDONoticeMessageStateParamModel(...) Cmds.setNoticeMessageState(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDONoticeMessageStateModel }else { // 失败 } } Kotlin val param = IDONoticeMessageStateParamModel(...) Cmds.setNoticeMessageState(param).send { if (it.res != null) { // 成功 // it.res is IDONoticeMessageStateModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetNoticeAppName.html":{"url":"doc/set/IDOSetNoticeAppName.html","title":"动态消息通知","keywords":"","body":"动态消息通知 IDONoticeMesaageParamModel IDOCmdSetResponseModel 示例 Swift let param = IDONoticeMesaageParamModel(...) Cmds.setNoticeAppName(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDONoticeMesaageParamModel(...) Cmds.setNoticeAppName(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWorldTimeV3.html":{"url":"doc/set/IDOSetWorldTimeV3.html","title":"下发v3世界时间","keywords":"","body":"下发v3世界时间 IDOCmdSetResponseModel 示例 Swift Cmds.setWorldTimeV3().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setWorldTimeV3().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSchedulerReminder.html":{"url":"doc/set/IDOSetSchedulerReminder.html","title":"设置日程提醒","keywords":"","body":"设置日程提醒 IDOSchedulerReminderParamModel IDOSchedulerReminderModel 示例 Swift let param = IDOSchedulerReminderParamModel(...) Cmds.setSchedulerReminder(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSchedulerReminderModel }else { // 失败 } } Kotlin val param = IDOSchedulerReminderParamModel(...) Cmds.setSchedulerReminder(param).send { if (it.res != null) { // 成功 // it.res is IDOSchedulerReminderModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetBpCalControlV3.html":{"url":"doc/set/IDOSetBpCalControlV3.html","title":"血压校准控制","keywords":"","body":"血压校准控制 IDOBpCalControlModel 示例 Swift Cmds.setBpCalControlV3().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOBpCalControlModel }else { // 失败 } } Kotlin Cmds.setBpCalControlV3().send { if (it.res != null) { // 成功 // it.res is IDOBpCalControlModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWatchFaceData.html":{"url":"doc/set/IDOSetWatchFaceData.html","title":"设置表盘","keywords":"","body":"设置表盘 IDOWatchFaceParamModel IDOWatchFaceModel 示例 Swift let param = IDOWatchFaceParamModel(...) Cmds.setWatchFaceData(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWatchFaceModel }else { // 失败 } } Kotlin val param = IDOWatchFaceParamModel(...) Cmds.setWatchFaceData(param).send { if (it.res != null) { // 成功 // it.res is IDOWatchFaceModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSyncContact.html":{"url":"doc/set/IDOSetSyncContact.html","title":"同步常用联系人","keywords":"","body":"同步常用联系人 IDOSyncContactParamModel IDOSyncContactModel 示例 Swift let param = IDOSyncContactParamModel(...) Cmds.setSyncContact(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSyncContactModel }else { // 失败 } } Kotlin val param = IDOSyncContactParamModel(...) Cmds.setSyncContact(param).send { if (it.res != null) { // 成功 // it.res is IDOSyncContactModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSportParamSort.html":{"url":"doc/set/IDOSetSportParamSort.html","title":"设置运动子项数据排列","keywords":"","body":"设置运动子项数据排列 IDOSportSortParamModel IDOSportSortModel 示例 Swift let param = IDOSportSortParamModel(...) Cmds.setSportParamSort(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSportSortModel }else { // 失败 } } Kotlin val param = IDOSportSortParamModel(...) Cmds.setSportParamSort(param).send { if (it.res != null) { // 成功 // it.res is IDOSportSortModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetSport100Sort.html":{"url":"doc/set/IDOSetSport100Sort.html","title":"新的100种运动排序","keywords":"","body":"新的100种运动排序 IDOSport100SortParamModel IDOSport100SortModel 示例 Swift let param = IDOSport100SortParamModel(...) Cmds.setSport100Sort(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOSport100SortModel }else { // 失败 } } Kotlin val param = IDOSport100SortParamModel(...) Cmds.setSport100Sort(param).send { if (it.res != null) { // 成功 // it.res is IDOSport100SortModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetMainUISortV3.html":{"url":"doc/set/IDOSetMainUISortV3.html","title":"设置主界面控件排序","keywords":"","body":"设置主界面控件排序 IDOMainUISortParamModel IDOMainUISortModel 示例 Swift let param = IDOMainUISortParamModel(...) Cmds.setMainUISortV3(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOMainUISortModel }else { // 失败 } } Kotlin val param = IDOMainUISortParamModel(...) Cmds.setMainUISortV3(param).send { if (it.res != null) { // 成功 // it.res is IDOMainUISortModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetHistoricalMenstruation.html":{"url":"doc/set/IDOSetHistoricalMenstruation.html","title":"经期的历史数据下发","keywords":"","body":"经期的历史数据下发 IDOHistoricalMenstruationParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOHistoricalMenstruationParamModel(...) Cmds.setHistoricalMenstruation(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOHistoricalMenstruationParamModel(...) Cmds.setHistoricalMenstruation(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetLongCityNameV3.html":{"url":"doc/set/IDOSetLongCityNameV3.html","title":"设置运动城市名称","keywords":"","body":"设置运动城市名称 IDOCmdSetResponseModel 示例 Swift Cmds.setLongCityNameV3().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setLongCityNameV3().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetHeartMode.html":{"url":"doc/set/IDOSetHeartMode.html","title":"V3设置心率模式","keywords":"","body":"V3设置心率模式 IDOHeartModeParamModel IDOHeartModeModel 示例 Swift let param = IDOHeartModeParamModel(...) Cmds.setHeartMode(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOHeartModeModel }else { // 失败 } } Kotlin val param = IDOHeartModeParamModel(...) Cmds.setHeartMode(param).send { if (it.res != null) { // 成功 // it.res is IDOHeartModeModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetVoiceReplyText.html":{"url":"doc/set/IDOSetVoiceReplyText.html","title":"语音回复文本","keywords":"","body":"语音回复文本 IDOVoiceReplyParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOVoiceReplyParamModel(...) Cmds.setVoiceReplyText(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOVoiceReplyParamModel(...) Cmds.setVoiceReplyText(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWatchDialSort.html":{"url":"doc/set/IDOSetWatchDialSort.html","title":"设置表盘顺序","keywords":"","body":"设置表盘顺序 IDOWatchDialSortParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOWatchDialSortParamModel(...) Cmds.setWatchDialSort(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWatchDialSortParamModel(...) Cmds.setWatchDialSort(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWalkRemindTimes.html":{"url":"doc/set/IDOSetWalkRemindTimes.html","title":"设置多个走动提醒的时间点","keywords":"","body":"设置多个走动提醒的时间点 IDOWalkRemindTimesParamModel IDOCmdSetResponseModel 示例 Swift let param = IDOWalkRemindTimesParamModel(...) Cmds.setWalkRemindTimes(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWalkRemindTimesParamModel(...) Cmds.setWalkRemindTimes(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetWallpaperDialReply.html":{"url":"doc/set/IDOSetWallpaperDialReply.html","title":"设置壁纸表盘列表","keywords":"","body":"设置壁纸表盘列表 IDOWallpaperDialReplyV3ParamModel IDOWallpaperDialReplyV3Model 示例 Swift let param = IDOWallpaperDialReplyV3ParamModel(...) Cmds.setWallpaperDialReply(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOWallpaperDialReplyV3Model }else { // 失败 } } Kotlin val param = IDOWallpaperDialReplyV3ParamModel(...) Cmds.setWallpaperDialReply(param).send { if (it.res != null) { // 成功 // it.res is IDOWallpaperDialReplyV3Model }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetDateTime.html":{"url":"doc/set/IDOSetDateTime.html","title":"设置时间","keywords":"","body":"设置时间 IDODateTimeParamModel IDOCmdSetResponseModel 示例 Swift let param = IDODateTimeParamModel(...) Cmds.setDateTime(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDODateTimeParamModel(...) Cmds.setDateTime(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 11:43:19 "},"doc/set/IDOSetUserInfo.html":{"url":"doc/set/IDOSetUserInfo.html","title":"设置用户信息","keywords":"","body":"设置用户信息 IDOCmdSetResponseModel IDOUserInfoPramModel 示例 Swift let param = IDOUserInfoPramModel(...) Cmds.setUserInfo(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setWorldTimeV3().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 12:22:38 "},"doc/set/IDOReboot.html":{"url":"doc/set/IDOReboot.html","title":"重启设备","keywords":"","body":"重启设备 IDOCmdSetResponseModel 示例 Swift Cmds.reboot().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.reboot().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOFactoryReset.html":{"url":"doc/set/IDOFactoryReset.html","title":"恢复出厂设置","keywords":"","body":"恢复出厂设置 IDOCmdSetResponseModel 示例 Swift Cmds.factoryReset().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.factoryReset().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOFindDeviceStart.html":{"url":"doc/set/IDOFindDeviceStart.html","title":"控制寻找设备开始","keywords":"","body":"控制寻找设备开始 IDOCmdSetResponseModel 示例 Swift Cmds.findDeviceStart().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.findDeviceStart().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOFindDeviceStop.html":{"url":"doc/set/IDOFindDeviceStop.html","title":"控制寻找设备结束","keywords":"","body":"控制寻找设备结束 IDOCmdSetResponseModel 示例 Swift Cmds.findDeviceStop().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.findDeviceStop().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOPhotoStart.html":{"url":"doc/set/IDOPhotoStart.html","title":"开始拍照 (app -> ble)","keywords":"","body":"开始拍照 (app -> ble) IDOCmdSetResponseModel 示例 Swift Cmds.photoStart().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.photoStart().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOPhotoStop.html":{"url":"doc/set/IDOPhotoStop.html","title":"结束拍照 (app -> ble)","keywords":"","body":"结束拍照 (app -> ble) IDOCmdSetResponseModel 示例 Swift Cmds.photoStop().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.photoStop().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOSetHand.html":{"url":"doc/set/IDOSetHand.html","title":"设置左右手","keywords":"","body":"设置左右手 IDOCmdSetResponseModel 示例 Swift Cmds.setHand().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin Cmds.setHand().send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOSetScreenBrightness.html":{"url":"doc/set/IDOSetScreenBrightness.html","title":"设置屏幕亮度","keywords":"","body":"设置屏幕亮度 IDOScreenBrightnessModel IDOCmdSetResponseModel 示例 Swift let param = IDOScreenBrightnessModel(...) Cmds.setScreenBrightness(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOScreenBrightnessModel(...) Cmds.setScreenBrightness(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOOtaStart.html":{"url":"doc/set/IDOOtaStart.html","title":"进入升级模式","keywords":"","body":"进入升级模式 IDOCmdOTAResponseModel 示例 Swift Cmds.otaStart().send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdOTAResponseModel }else { // 失败 } } Kotlin Cmds.otaStart().send { if (it.res != null) { // 成功 // it.res is IDOCmdOTAResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOSetHeartRateInterval.html":{"url":"doc/set/IDOSetHeartRateInterval.html","title":"设置心率区间","keywords":"","body":"设置心率区间 IDOHeartRateIntervalModel IDOCmdSetResponseModel 示例 Swift let param = IDOHeartRateIntervalModel(...) Cmds.setHeartRateInterval(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOHeartRateIntervalModel(...) Cmds.setHeartRateInterval(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOSetCalorieDistanceGoal.html":{"url":"doc/set/IDOSetCalorieDistanceGoal.html","title":"设置卡路里和距离目标(设置日常三环)","keywords":"","body":"设置卡路里和距离目标(设置日常三环) IDOMainSportGoalModel IDOCmdSetResponseModel 示例 Swift let param = IDOMainSportGoalModel(...) Cmds.setCalorieDistanceGoal(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOMainSportGoalModel(...) Cmds.setCalorieDistanceGoal(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOSetWalkRemind.html":{"url":"doc/set/IDOSetWalkRemind.html","title":"设置走动提醒","keywords":"","body":"设置走动提醒 IDOWalkRemindModel IDOCmdSetResponseModel 示例 Swift let param = IDOWalkRemindModel(...) Cmds.setWalkRemind(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOWalkRemindModel(...) Cmds.setWalkRemind(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/set/IDOSetMenstruation.html":{"url":"doc/set/IDOSetMenstruation.html","title":"设置经期","keywords":"","body":"设置经期 IDOMenstruationModel IDOCmdSetResponseModel 示例 Swift let param = IDOMenstruationModel(...) Cmds.setMenstruation(param).send { rs in if case .success(let obj) = rs { // 成功 // obj is IDOCmdSetResponseModel }else { // 失败 } } Kotlin val param = IDOMenstruationModel(...) Cmds.setMenstruation(param).send { if (it.res != null) { // 成功 // it.res is IDOCmdSetResponseModel }else { // 失败 } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 15:10:59 "},"doc/syncData/IDOSyncData.html":{"url":"doc/syncData/IDOSyncData.html","title":"数据同步","keywords":"","body":"数据同步功能 功能概述 同步设备数据是一个非常重要的功能。同步过程建议不要执行其他命令， 在同步过程中会返回进度，并且在每个项同步后返回完成状态。根据同步状态判断同步是否完成，同步过程中会记录同步日志。 SyncDataInterface 属性 status 同步状态 方法 startSync(funcProgress:funcData:funcCompleted:) 开始同步所有数据 Parameters: funcProgress: 同步数据进度回调 funcData: 同步数据回调 funcCompleted: 同步完成回调 stopSync() 停止同步所有数据 数据类型 运动数据 心率数据 睡眠数据 血压数据 血氧数据 压力数据 噪音数据 皮温数据 呼吸率数据 HRV数据 多运动数据 GPS数据 游泳数据 示例 Swift /// 开始同步 sdk.syncData.startSync { progress in print(\"sync data progress:\\(progress)\") } funcData: { type, jsonStr, errorCode in print(\"sync data type:\\(type) jsonStr:\\(jsonStr) errCode:\\(errorCode)\") } funcCompleted: { errorCode in print(\"sync data done errCode:\\(errorCode)\") } /// 结束同步 sdk.syncData.stopSync() Kotlin: /// 开始同步 sdk.syncData.startSync({ progress -> print(\"sync data progress:$progress\") }, { type, jsonStr, errorCode -> print(\"sync data type:$type, jsonStr:$jsonStr, errCode:$errorCode\") }, { errorCode -> print(\"sync data done errCode:$errorCode\") }) /// 结束同步 sdk.syncData.stopSync() Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-01 09:55:18 "},"doc/syncData/IDOSyncActivityData.html":{"url":"doc/syncData/IDOSyncActivityData.html","title":"同步多运动数据","keywords":"","body":"同步多运动数据 HRV iOS ：IDOSyncDataType.activity Android : IDOSyncDataType.ACTIVITY App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号该条报文的版本号默认0 setSupportSportPlan功能表开启version=16,syncRealTimeV3功能表开启version=32 data_length int 数据长度固件开启功能表setSupportSportPlan(version=16)或syncRealTimeV3(version=32)的情况下该值为0 packet_count int 包个数 固件开启功能表setSupportSportPlan(version=16)或syncRealTimeV3(version=32)的情况下该值为0 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 type int 运动枚举 connect_app int 手环是否连接app，用app评产生何种报告1是连接，0是未连接 sport_start_type int 0:无效， 1 : app发起的运动， 2：手表发起的运动 hr_data_interval_minute int 心率数据间隔 单位分钟 step int 步数 durations int 运动时长 单位:秒结束时间说明：功能表syncHealthSyncV3ActivityEndTimeUseUtcMode没有开启的情况下，运动结束时间=开始时间+运动时长功能表syncHealthSyncV3ActivityEndTimeUseUtcMode开启后，运动结束时间通过字段end_month & end_day &end_hour & end_minute & end_year & end_sec calories int 卡路里 单位:千卡 distance int 距离 单位:米 avg_hr_value int 平均心率值单位:BPM max_hr_value int 最大心率值单位:BPM min_hr_value Int 最小心率值setSupportSportPlan or getOxygenDataSupportGradeV3 功能表未开启的时候返回0 avg_step_frequency int 平均步频 单位:步/分钟 max_step_frequency int 最大步频 单位:步/分钟 avg_step_stride int 平均步幅单位:厘米 max_step_stride int 最大步幅单位:厘米 avg_speed int 平均速度 km/h 固件是 扩大100倍 max_speed int 最快速度 km/h 固件是 扩大100倍 avg_pace_speed int 平均配速 传过来的是秒钟 比如361 361/60=6分 余数是1s 6''1' , 公里和英里是按照 英里= 公里*1609/1000fsetSupportSportPlan or getOxygenDataSupportGradeV3 功能表未开启的时候返回0 max_pace_speed int 最快配速setSupportSportPlan or getOxygenDataSupportGradeV3 功能表未开启的时候返回0 avg_km_speed int 平均公里配速 传过来的是秒钟 比如361 361/60=6分 余数是1s 6''1' , 公里和英里是按照 英里= 公里*1609/1000f max_km_speed int 最快公里配速每公里需要的时间(秒) warm_up_mins int 热身运动的累计时长 分钟部分 fat_burning_mins int 脂肪燃烧的累计时长 分钟部分 aerobic_exercise_mins int 有氧运动的累计时长 分钟部分 anaerobic_exercise_mins int 无氧运动的累计时长 分钟部分 extreme_exercise_mins int 极限锻炼的累计时长 分钟部分 warm_up_sec int 热身运动的累计时长 秒钟部分 fat_burning_sec int 脂肪燃烧的累计时长 秒钟部分 aerobic_exercise_sec int 有氧运动的累计时长 秒钟部分 anaerobic_exercise_sec int 无氧运动的累计时长 秒钟部分 extreme_exercise_sec Int 极限锻炼的累计时长 秒钟部分 vo2max Int 最大摄氧量 单位：毫升/公斤/分钟范围 0-80 不放大100倍 （该字段在前） grade Int 摄氧量等级 1：低等 2：业余 3：一般 4：平均 5：良好 6：优秀 7：专业 setSupportSportPlan or getOxygenDataSupportGradeV3 固件开启则有效否则为0，为0则不支持摄氧量等级 recovery_time_year int 恢复时间点年setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_mon int 恢复时间点月setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_day int 恢复时间点日setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_hour int 恢复时间点时setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_min int 恢复时间点分setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_s int 恢复时间点秒setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 training_effect int 训练效果 单位：无 范围： 1.0 - 5.0 （扩大10倍传输）setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 mi_speed_count int 英里配速个数 hr_item_count int 心率个数 activity_data_item_count int 洪堡定制数据字段详情个数，一分钟存一个 km_speed_count int 公里配速的个数 最大100 mi_speed_count int 英里配速个数 pace_count int 实时配速个数setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 frequency_count int 步频个数 paddle_number_count int 桨次个数 setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 paddle_frequency_count int 桨频个数 setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 tread_frequency_count int 踏频个数 V3_sync_v3_activity_add_param或v3_support_activity_sync_real_time功能表未开启的时候返回0 real_speed_count int 实时速度个数syncRealTimeV3功能表未开启的时候返回0 end_month int 运动结束时间 月考虑到运动后用户暂停运动，导致运动结束后运动结束时间与app的运动结束时间有差异，此时的运动结束时间由固件返回，不支持该协议的返回0即可app判断月份是否为0判断是否采用以下字段作为运动结束时间setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 end_day int 运动结束时间 日setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 end_hour int 运动结束时间 时setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 end_minute int 运动结束时间 分V3_sync_v3_activity_add_param或v3_support_activity_sync_real_time功能表未开启的时候返回0 training_offset int 训练的课程日期偏移 从零开始setSupportSportPlan功能表未开启的时候返回0 act_type int 计划类型：1:跑步计划3km2:跑步计划5km3:跑步计划10km4:半程马拉松训练（二期）5:马拉松训练（二期） 64:6分钟轻松跑65:10分钟轻松跑66:15分钟轻松跑67:走跑结合初级68:走跑结合进阶69:走跑结合强化70:跑后拉伸setSupportSportPlan功能表未开启的时候返回0 in_class_calories int 课程内运动热量 单位千卡 completion_rate int 动作完成率 0—100 hr_completion_rate int 心率控制率 0—100 smart_competitor int 0:无效 1:非智能陪跑运动 2:智能陪跑运动功能表supportSmartCompetitor开启有效 ai_image_id int ai形象ID功能表supportSmartCompetitor开启有效 user_image_id int 用户形象ID功能表supportSmartCompetitor开启有效 bg_image_id int 背景形象ID功能表supportSmartCompetitor开启有效 smart_competitor_pace int 智能陪跑对手配速功能表supportSmartCompetitor开启有效 warm_up_performance int 热身表现 0-100 setSupportSportPlan and supportWarmUpBeforeRunning开启有效 gps_status int GPS状态 0:无效 1:开启 2:未开启(未开启时展示距离开启则展示3D距离)setSupportSportPlan & version=0x30时有效 distance3d int 3d距离 单位米supportSyncActivityData3dDistanceSpeed, setSupportSportPlan & version=0x30时有效 avg_3d_speed int 平均3d速度 单位km/h app收到需要/100 扩大100倍传supportSyncActivityData3dDistanceSpeed, setSupportSportPlan & version=0x30时有效 avg_vertical_speed int 平均垂直速度 单位m/h app收到需要/10 扩大10倍传supportSyncActivityDataAvgSlope, setSupportSportPlan & version=0x30时有效 avg_slope int 平均坡度 单位度 -90 ~ 90supportSyncActivityDataAvgSlope, setSupportSportPlan & version=0x30时有效 max_altitude int 最高海拔高度 单位米-500 ~ 9000getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 mix_altitude int 最低海拔高度 单位米-500 ~ 9000getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 cumulative_altitude_rise int 累计海拔上升 单位米getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 cumulative_altitude_loss int 累计海拔下降 单位米getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 altitude_count int 海拔高度详情个数getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 avg_altitude int 平均海拔高度 单位米 -500 ~ 9000getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 act_count int 动作详情个数 hr_data_vlaue int [] 心率数据详情 frequency_items int [] 步频数据详情 items_mi_speed int [] 英里配速详情 pace_speed_items int [] 实时配速详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 paddle_number_items int [] 桨次详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 paddle_frequency_items int [] 桨频详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 tread_frequency_items int [] 踏频详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 act_items int [] 动作详情setSupportSportPlan功能表未开启的时候返回0 item_real_speed_temp int [] 实时速度详情setSupportSportPlan功能表开启时返回0syncRealTimeV3功能表未开启的时候返回0 altitude_item int [] 海拔高度数据 单位米 范围-500~9000getSupportSyncActivityDataAltitudeInfo&setSupportSportPlan & version=0x30时有效 items 集合 洪堡定制字段数据详情，steps & calories & distance的集合 items_km_speed 集合 公里配速数据详情，second的集合 字段名 字段类型 字段说明 steps int 步频 calories int 卡路里 distance int 距离单位:米 字段名 字段类型 字段说明 second int 公里配速单位:秒 示例 { \"act_type\" : 0, \"action_temp\" : null, \"activity_data_item_count\" : 0, \"aerobic_exercise_mins\" : 0, \"aerobic_exercise_sec\" : 0, \"anaerobic_exercise_mins\" : 0, \"anaerobic_exercise_sec\" : 0, \"avg_hr_value\" : 0, \"avg_km_speed\" : 0, \"avg_pace_speed\" : 0, \"avg_speed\" : 0, \"avg_step_frequency\" : 0, \"avg_step_stride\" : 0, \"calories\" : 0, \"completion_rate\" : 0, \"connect_app\" : 0, \"data_length\" : 0, \"day\" : 0, \"distance\" : 0, \"durations\" : 0, \"end_day\" : 0, \"end_hour\" : 0, \"end_minute\" : 0, \"end_month\" : 0, \"extreme_exercise_mins\" : 0, \"extreme_exercise_sec\" : 0, \"fat_burning_mins\" : 0, \"fat_burning_sec\" : 0, \"frequency_count\" : 0, \"frequency_items\" : [], \"grade\" : 0, \"hour\" : 0, \"hr_completion_rate\" : 0, \"hr_data_interval_minute\" : 0, \"hr_data_vlaue\" : [0], \"hr_item_count\" : 0, \"in_class_calories\" : 0, \"item_real_speed_temp\" : [], \"items\" : [{\"steps\":0,\"calories\":0,\"distance\":0}], \"items_km_speed\" : [{\"second\":0}], \"items_mi_speed\" : [], \"km_speed_count\" : 0, \"max_hr_value\" : 0, \"max_km_speed\" : 0, \"max_pace_speed\" : 0, \"max_speed\" : 0, \"max_step_frequency\" : 0, \"max_step_stride\" : 0, \"mi_speed_count\" : 0, \"min_hr_value\" : 0, \"minute\" : 0, \"month\" : 0, \"pace_count\" : 0, \"pace_speed_items\" : [], \"packet_count\" : 0, \"paddle_frequency_count\" : 0, \"paddle_frequency_items\" : [], \"paddle_number_count\" : 0, \"paddle_number_items\" : [], \"real_speed_count\" : 0, \"recovery_time_day\" : 0, \"recovery_time_hour\" : 0, \"recovery_time_min\" : 0, \"recovery_time_mon\" : 0, \"recovery_time_s\" : 0, \"recovery_time_year\" : 0, \"second\" : 0, \"sport_start_type\" : 0, \"step\" : 0, \"training_effect\" : 0, \"training_offset\" : 0, \"tread_frequency_count\" : 0, \"tread_frequency_items\" : [], \"type\" : 0, \"vO2max\" : 0, \"version\" : 0, \"warm_up_mins\" : 0, \"warm_up_sec\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-28 11:09:36 "},"doc/syncData/IDOSyncBpData.html":{"url":"doc/syncData/IDOSyncBpData.html","title":"同步血压数据","keywords":"","body":"同步血压数据 血压 iOS ：IDOSyncDataType.bloodPressure Android : IDOSyncDataType.BLOODPRESSURE App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 sleep_avg_bp int 睡眠平均血压值 max_bp int 血压最大值 item_count int 血压详情个数 items 集合 血压详情，offset&sys_blood&dias_blood的集合 字段名 字段类型 字段说明 offset int 数据偏移 单位：分钟 （血压数据间隔按分钟偏移） sys_blood int 较大收缩压 dias_blood int 较小收缩压 示例 { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"sleep_avg_bp\":0, \"max_bp\":0, \"item_count\":3, \"items\":[ { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 }, { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 }, { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncGpsData.html":{"url":"doc/syncData/IDOSyncGpsData.html","title":"同步GPS数据","keywords":"","body":"同步GPS数据 GPS iOS ：IDOSyncDataType.gPS Android : IDOSyncDataType.GPS App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 data_interval int 数据偏移 string_items char [] GPS数组详情 示例 { \"year\":2022, \"month\":12, \"day\":26, \"hour\":10, \"minute\":10, \"second\":10, \"data_interval\":0, \"stringItems\" : [ \"11359.217000E,2240.776500N\", \"11359.217700E,2240.775900N\", \"11359.218200E,2240.775600N\", \"11359.218300E,2240.775700N\", \"11359.218400E,2240.776200N\", \"11359.218600E,2240.776800N\", \"11359.218600E,2240.777000N\", \"11359.218700E,2240.777300N\", \"11359.218800E,2240.777300N\", \"11359.218900E,2240.777200N\", \"11359.218800E,2240.777500N\" ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncHrData.html":{"url":"doc/syncData/IDOSyncHrData.html","title":"同步心率数据","keywords":"","body":"同步心率数据 心率 iOS ：IDOSyncDataType.heartRate Android : IDOSyncDataType.HEARTRATE App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 0为无效,1为一个值,2为最大和最小值 (预留字段) silent_hr int 静息心率 five_min_max_data int 五分钟心率最大值 five_min_min_data int 五分钟心率最小值 five_min_avg_data int 五分钟心率平均值 five_min_data int [] 五分钟心率全部心率值 hr_data_count int 过高过低时的心率数据个数 v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 hr_interval 集合 5个心率区间:热身心率区间 极限心率区间 燃脂心率区间 有氧耐力心率区间 无氧耐力心率区间threshold & minute的集合 items 集合 心率数据 offset & heart_rateVal的集合 hr_data 集合 心率过高过低数据 hour & minute & type & heart_rate 的集合v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 字段名 字段类型 字段说明 offset int 偏移 单位秒 heart_rateVal int 心率值 字段名 字段类型 字段说明 threshold int 阀值 minute int 分钟 字段名 字段类型 字段说明 hour int 过高过低时的心率数据时间 时v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 minute int 过高过低时的心率数据时间 分v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 type int 心率值类型 0：心率过低时的心率值 1：心率过高时的心率值v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 heart_rate int 心率值 单位：次/分v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 示例 { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":0, \"silent_hr\":85, \"five_min_max_data\":0, \"five_min_min_data\":0, \"five_min_avg_data\":0, \"hr_data_count\":2, \"five_min_data\":[ 85, 90, 80, 83 ], \"hr_interval\":[ { \"threshold\": 80, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 } ], \"items\":[ { \"offset\":80, \"heart_rateVal\":5 }, { \"offset\":83, \"heart_rateVal\":5 } ], \"hr_data\":[ { \"hour\":11, \"minute\":25, \"type\":1, \"heart_rate\":120 }, { \"hour\":11, \"minute\":25, \"type\":0, \"heart_rate\":70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncHrvData.html":{"url":"doc/syncData/IDOSyncHrvData.html","title":"同步HRV数据","keywords":"","body":"同步HRV数据 HRV iOS ：IDOSyncDataType.hRV Android : IDOSyncDataType.HRV App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 items 集合 HRV数据详情，min_offset&hrv_value的集合 字段名 字段类型 字段说明 min_offset int 默认偏移 单位分钟 hrv_value int HRV数据 示例 { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"items\":[ { \"min_offset\":5, \"hrv_value\":0 }, { \"min_offset\":5, \"hrv_value\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncNoiseData.html":{"url":"doc/syncData/IDOSyncNoiseData.html","title":"同步环境音量数据","keywords":"","body":"同步环境音量数据 环境音量 iOS ：IDOSyncDataType.noise Android : IDOSyncDataType.NOISE App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 version int 协议版本号 0 start_time int 开始的同步时间 单位秒 interval_mode int 2个数据的间隔 单位秒 avg_noise int 平均的噪音 max_noise int 最大噪音 min_noise int 最小噪音 noise_count int 噪声详情个数 items 集合 噪声详情，offset&value的集合 字段名 字段类型 字段说明 offset int 数据的偏移 value int 噪声值 示例 { \"year\":2022, \"month\":12, \"day\":26, \"hour\":11, \"minute\":58, \"second\":30, \"version\":0, \"start_time\":0, \"interval_mode\":30, \"avg_noise\":50, \"max_noise\":60, \"min_noise\":40, \"noise_count\":2, \"items\":[ { \"offset\":30, \"value\":50 }, { \"offset\":30, \"value\":50 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncPivenData.html":{"url":"doc/syncData/IDOSyncPivenData.html","title":"同步皮温数据","keywords":"","body":"同步皮温数据 皮温 iOS ：IDOSyncDataType.piven Android : IDOSyncDataType.PIVEN App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 start_time int 开始的同步时间 单位秒 interval_mode int 自动体温数据保存的间隔单位秒预留 avg_temperature int 平均的温度 保留一位小数 扩大十倍传输 max_temperature int 最大的温度 保留一位小数 扩大十倍传输 min_temperature int 最少的温度 保留一位小数 扩大十倍传输 temperature_count int 体温详情个数 items 集合 体温详情，offset&value的集合 字段名 字段类型 字段说明 offset int 数据的偏移 value int 示例 { \"avg_temperature\" : 0, \"day\" : 0, \"hour\" : 0, \"interval_mode\" : 0, \"items\" : [{\"offset\":0,\"value\":0}], \"max_temperature\" : 0, \"min_temperature\" : 0, \"minute\" : 0, \"month\" : 0, \"start_time\" : 0, \"temperature_count\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncPressure.html":{"url":"doc/syncData/IDOSyncPressure.html","title":"同步压力数据","keywords":"","body":"同步压力数据 压力 iOS ：IDOSyncDataType.pressure Android : IDOSyncDataType.PRESSURE App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 0为无效,1为一个值,2为最大和最小值 (预留字节) items 集合 offset & value的集合 字段名 字段类型 字段说明 offset int 偏移 单位分钟 value int 压力值 示例 { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30, }, { \"offset\":30, \"value\":30, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncRespirRateData.html":{"url":"doc/syncData/IDOSyncRespirRateData.html","title":"同步呼吸率数据","keywords":"","body":"同步呼吸率数据 呼吸率 iOS ：IDOSyncDataType.respirationRate Android : IDOSyncDataType.RESPIRATIONRATE App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 item_count int 呼吸率详情个数 items 集合 呼吸率详情，start_time&respid的集合 字段名 字段类型 字段说明 start_time int 开始时间,单位秒,距离0点的偏移 respid int 呼吸率值 示例 { \"year\":2022, \"month\":12, \"day\":26, \"item_count\":3, \"items\":[ { \"start_time\":0, \"respid\":80 }, { \"start_time\":100, \"respid\":80 }, { \"start_time\":100, \"respid\":80 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncSleepData.html":{"url":"doc/syncData/IDOSyncSleepData.html","title":"同步睡眠数据","keywords":"","body":"同步睡眠数据 睡眠 iOS ：IDOSyncDataType.sleep Android : IDOSyncDataType.SLEEP App收到的json字段： 字段名 字段类型 字段说明 data_type int 1:科学睡眠（有REM、呼吸得分）2:午睡 4:普通睡眠6:午睡且不支持科学睡眠 fall_asleep_year int 入睡时间 年 fall_asleep_month int 入睡时间 月 fall_asleep_day int 入睡时间 日 fall_asleep_hour int 入睡时间 时 fall_asleep_minte int 入睡时间 分 get_up_year int 起床时间 年 get_up_month int 起床时间 月 get_up_day int 起床时间 日 get_up_hour int 起床时间 时 get_up_minte int 起床时间分 total_sleep_time_mins int 睡眠总时长 单位：分 wake_mins int 总清醒时长 单位：分 light_mins int 总浅眠时长 单位：分 rem_mins int 总眼动时长 单位：分 deep_mins int 总深眠时长 单位：分 wake_count int 清醒次数 light_count int 浅眠次数 rem_count int 眼动次数 deep_count int 深眠次数 awrr_status int 呼吸状况 sleep_score int 睡眠得分 breath_quality int 呼吸质量 （0 - 100） 无单位 sleep_avg_hr_value int 睡眠阶段的心率平均值 sleep_avg_spo2_value int 睡眠阶段的血氧平均值 sleep_avg_respir_rate_value int 睡眠阶段的呼吸率平均值 item_count int 睡眠详情个数 items 集合 睡眠详情，stage & duration的集合 字段名 字段类型 字段说明 stage int 阶段 1:醒着2:浅睡3:深睡 4:眼动 duration int 时长 单位秒 示例 { \"awrr_status\" : 0, \"breath_quality\" : 0, \"data_type\" : 1, \"deep_count\" : 0, \"deep_mins\" : 0, \"fall_asleep_day\" : 0, \"fall_asleep_hour\" : 0, \"fall_asleep_minte\" : 0, \"fall_asleep_month\" : 0, \"fall_asleep_year\" : 0, \"get_up_day\" : 0, \"get_up_hour\" : 0, \"get_up_minte\" : 0, \"get_up_month\" : 0, \"get_up_year\" : 0, \"item_count\" : 0, \"items\" : [{stage:1,duration:500}], \"light_count\" : 0, \"light_mins\" : 0, \"rem_count\" : 0, \"rem_mins\" : 0, \"sleep_score\" : 0, \"total_sleep_time_mins\" : 0, \"wake_count\" : 0, \"wake_mins\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncSpo2Data.html":{"url":"doc/syncData/IDOSyncSpo2Data.html","title":"同步血氧数据","keywords":"","body":"同步血氧数据 血氧 iOS ：IDOSyncDataType.bloodOxygen Android : IDOSyncDataType.BLOODOXYGEN App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 0为无效,1为一个值,2为最大和最小值预留 items 集合 offset&value的集合 字段名 字段类型 字段说明 offset int 默认偏移 单位秒 如果配置了功能表 getSpo2OffChangeV3 数据偏移就是按照分钟 value int 血氧平均值 示例 { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30, }, { \"offset\":30, \"value\":30, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncStepCount.html":{"url":"doc/syncData/IDOSyncStepCount.html","title":"同步运动数据","keywords":"","body":"同步运动数据 步数 iOS ：IDOSyncDataType.stepCount Android : IDOSyncDataType.STEPCOUNT App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 0：没有佩戴标识数据16：有佩戴标识数据,需要固件配置v3SupportWearFlag功能表 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位分钟,距离0点的偏移 per_minute int 每条数据产生的间隔 分钟 （15分钟默认） 206定制新增：时长间隔 1分钟产生间隔若为一分钟 需要app判断 supportPerMinuteOne 来判断固件是否支持一分钟同步类型 total_step int 总步数 total_rest_activity_calories int 总活动+静息卡路里 total_distances int 总距离 英里数据 = 固件距离（米）乘以0.00062 total_active_time int 当天的活动时间 单位分钟 total_activity_calories int 总活动卡路里 walk_goal_time int 固件实际走动时长 需要配置 单位小时 item_count int 运动数据详情个数 wear_flag_array int [] 24小时的每个小时的佩戴分钟数，最大24个字节v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 items 集合 运动数据详情(参考下面表格)，mode&step_count&active_time&activity_calories&distance&rest_activity_calories的集合 字段名 字段类型 字段说明 mode int 模式 00：安静， 01：轻微，10：中等活跃， 11：激烈 step_count int 步数个数 active_time int 活跃时长 单位分钟， 最大per_minute参数决定 目前是15分钟 activity_calories int 活动卡路里 distance int 距离，单位米 rest_activity_calories int 活动+静息卡路里 示例 { \"day\" : 26, \"item_count\" : 47, \"items\" : [ { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 } ], \"month\" : 12, \"per_minute\" : 15, \"start_time\" : 0, \"total_active_time\" : 0, \"total_activity_calories\" : 0, \"total_distances\" : 0, \"total_rest_activity_calories\" : 0, \"total_step\" : 0, \"version\" : 0, \"walk_goal_time\" : 0, \"wear_flag_array\" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"year\" : 2022 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/syncData/IDOSyncSwimData.html":{"url":"doc/syncData/IDOSyncSwimData.html","title":"同步游泳数据","keywords":"","body":"同步游泳数据 游泳 iOS ：IDOSyncDataType.swim Android : IDOSyncDataType.SWIM App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 version int 协议版本号 type int 类型 0 无效,1 为室内游泳,2 为开阔水域游泳 calories int 卡路里单位:Kcal distance int 距离单位:米 confirm_distance int 用户确认距离单位:米 duration int 时长单位:秒 trips int 游泳趟数 average_swolf int 平均划水效率 total_strokes_number int 总划水次数 swimming_posture int 主泳姿 0 : 混合泳 1 : 自由泳 2 : 蛙泳 3 : 仰泳4 : 蝶泳 pool_distance int 泳池距离单位:米 avg_speed int 平均配速秒/百米 一百米用了多少秒 单位:秒version=1有效,否则字段是0 avg_frequency Int 平均划水频率单位:次/分version=1有效,否则字段是0 items 集合 游泳数据详情，swolf & strokesNumber & duration & swimmingPosture & distance & frequency& speed & stop_time & difference_time的集合 字段名 字段类型 字段说明 swolf int 划水效率 swimming_posture int 泳姿0 : 混合泳 1 : 自由泳 2 : 蛙泳 3 : 仰泳4 : 蝶泳 strokes_number int 划水次数 duration int 时间单位:秒 distance int 距离单位:米 frequency int 频率单位:次/分version=1有效,否则字段是0 speed int 配速秒/百米 一百米用了多少秒 单位:秒version=1有效,否则字段是0 stop_time int 结束时间单位:秒version=1有效,否则字段是0 difference_time int 两趟之间的休息时间单位:秒version=1有效,否则字段是0 示例 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/transfer/IDOFileTransfer.html":{"url":"doc/transfer/IDOFileTransfer.html","title":"文件传输","keywords":"","body":"文件传输 FileTransfernterface 属性 isTransmitting 是否在执行传输 transFileType 当前传输中的文件类型 方法 transferFiles(fileItems:cancelPrevTranTask:transProgress:transStatus:completion:) 执行文件传输 Parameters: fileItems: 待传文件 cancelPrevTranTask: 是否取消执行中的传输任务（如果有） transProgress: 文件传输进度 transStatus: 文件传输状态 completion: 传输结果，形如：[true, true, ...] 和传入的 fileItems 一一对应 iwfFileSize(filePath:type:completion:) 获取压缩前.iwf文件大小 Parameters: filePath: 表盘文件绝对路径 type: 表盘类型 1 云表盘 ，2 壁纸表盘 completion: 文件大小（单位 字节） 示例 实体类： IDOTransSportModel IDOTransMusicModel IDOTransNormalModel 枚举： IDOTransType Swift: var items = [IDOTransBaseModel]() // 音乐 items.append(IDOTransMusicModel(filePath: \"\\(mp3Path)/1.mp3\", fileName: \"mp3_1\", musicId: 1)) items.append(IDOTransMusicModel(filePath: \"\\(mp3Path)/2.mp3\", fileName: \"mp3_2\", musicId: 2)) items.append(IDOTransMusicModel(filePath: \"\\(mp3Path)/3.mp3\", fileName: \"mp3_3\", musicId: 3)) // 运动图标 - 图片 items.append(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport1\", sportType: 2, iconType: 1, isSports: false)) items.append(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport2\", sportType: 2, iconType: 1, isSports: false)) // 运动图标 - 动画 items.append(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports1\", sportType: 2, iconType: 3, isSports: true)) items.append(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports2\", sportType: 2, iconType: 3, isSports: true)) // 壁纸表盘 items.append(IDOTransNormalModel(fileType: .wallpaperZ, filePath: \"x.png\", fileName: \"wallpaper.z\")) // 云表盘 items.append(IDOTransNormalModel(fileType: .iwfLz, filePath: \"noise_w96.zip\", fileName: \"noise_w96\")) // 固件 items.append(IDOTransNormalModel(fileType: .fw, filePath: \"xx.fw\", fileName: \"xx\")) // 调用传输 let canceler = sdk.transfer.transferFiles(fileItems: items, cancelPrevTranTask: true) { currentIndex, totalCount, _, totalProgress in print(\"传输中(\\(currentIndex + 1)/\\(totalCount)...\") } transStatus: { _, status, errorCode, _ in if status != .finished || errorCode != 0 { print(\"传输失败:\\(errorCode)\") } } completion: { rs in print(\"传输结束: \\(rs)\") if rs.last! { // 传输成功 } else { // 传输失败 } } // 取消传输 canceler?.cancel() Kotlin: var items = mutableListOf() // 音乐 items.add(IDOTransNormalModel(filePath: \"\\(mp3Path)/1.mp3\", fileName: \"mp3_1\", musicId: 1)) items.add(IDOTransNormalModel(filePath: \"\\(mp3Path)/2.mp3\", fileName: \"mp3_2\", musicId: 2)) items.add(IDOTransNormalModel(filePath: \"\\(mp3Path)/3.mp3\", fileName: \"mp3_3\", musicId: 3)) // 运动图标 - 图片 items.add(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport1\", sportType: 2, iconType: 1, isSports: false)) items.add(IDOTransSportModel(filePath: \"x.png\", fileName: \"icon_sport2\", sportType: 2, iconType: 1, isSports: false)) // 运动图标 - 动画 items.add(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports1\", sportType: 2, iconType: 3, isSports: true)) items.add(IDOTransSportModel(filePath: \"x.bmp\", fileName: \"icon_sports2\", sportType: 2, iconType: 3, isSports: true)) // 壁纸表盘 items.add(IDOTransNormalModel(fileType = IDOTransType.WALLPAPERZ,filePath = \"xx/xx.png\",fileName = \"wallpaper.z\",fileSize = xx)) // 云表盘 items.add(IDOTransNormalModel(fileType: .iwfLz, filePath: \"noise_w96.zip\", fileName: \"noise_w96\")) // 固件 items.add(IDOTransNormalModel(fileType: .fw, filePath: \"xx.fw\", fileName: \"xx\")) // 调用传输 val cancellable = sdk.transfer.transferFiles( items, cancelPre, { currentIndex, totalCount, currentProgress, totalProgress -> print(\"传输中${currentIndex + 1}/$totalCount...\") }, { currentIndex: Int, status: IDOTransStatus, errorCode: Int?, finishingTime: Int? -> if (status != IDOTransStatus.FINISHED || errorCode != 0) { print(\"传输失败:$errorCode\") } }, {resultList-> resultList.forEach { if (it){ //传输成功 }else{ //传输失败 } }}) // Cancel transfer canceler?.cancel() Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-01 09:55:18 "},"doc/transfer/IDOTransMessageModel.html":{"url":"doc/transfer/IDOTransMessageModel.html","title":"消息图标","keywords":"","body":"CLASS IDOTransMessageModel 消息图标 属性 类型 说明 fileType IDOTransType 文件类型 filePath String 文件绝对地址 fileName String 文件名 fileSize Int 文件大小 evtType Int 事件类型参考 通消息通知0x01：短信0x02：邮件0x03：微信0x04：QQ0x05：新浪微博0x06：facebook0x07：twitter0x08：WhatsApp0x09：Messenger0x0A：Instagram0x0B：Linked in0x0C：日历0x0D：skype；0x0E：闹钟0x0F：pokeman0x10：VKontakte0x11：Line0x12：Viber0x13：KakaoTalk0x14：Gmail0x15：Outlook,0x16：Snapchat0x17：TELEGRAM0x18：other0x20：chatwork0x21：slack0x22：Yahoo Mail0x23：Tumblr,0x24：Youtube0x25：Yahoo Pinterest0x26：TikTok0x27：Redbus0x28：Dailyhunt0x29：Hotstar0x2A：Inshorts0x2B：Paytm0x2C：Amazon0x2D：Flipkart0x2E：Prime0x2F：Netflix0x30：Gpay0x31：Phonpe0x32：Swiggy0x33：Zomato0x34：Make My trip0x35：Jio Tv0x36：keep0x37：Microsoft0x38：WhatsApp Business0x39：niosefit0x3A：missed_calls未接来电0x3B：Gpap0x3C：YTmusic0x3D：Uber0x3E：Ola0x3F：事项提醒0x40：Google meet packName String 应用包名 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/transfer/IDOTransMusicModel.html":{"url":"doc/transfer/IDOTransMusicModel.html","title":"音乐","keywords":"","body":"CLASS IDOTransMusicModel 音乐 属性 类型 说明 fileType IDOTransType 文件类型 filePath String 文件绝对地址 fileName String 文件名 fileSize Int 文件大小 musicId Int 音乐id singerName String 歌手名 useSpp Bool 使用SPP传输 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/transfer/IDOTransSportModel.html":{"url":"doc/transfer/IDOTransSportModel.html","title":"运动图标","keywords":"","body":"CLASS IDOTransSportModel 运动图标 属性 类型 说明 fileType IDOTransType 文件类型 filePath String 文件绝对地址 fileName String 文件名 fileSize Int 文件大小 sportType Int 运动模式以前运动类型: 0:无，1:走路，2:跑步，3:骑行，4:徒步，5:游泳，6:爬山，7:羽毛球，8:其他， 9:健身，10:动感单车，11:椭圆机，12:跑步机，13:仰卧起坐，14:俯卧撑，15:哑铃，16:举重， 17:健身操，18:瑜伽，19:跳绳，20:乒乓球，21:篮球，22:足球 ，23:排球，24:网球， 25:高尔夫球，26:棒球，27:滑雪，28:轮滑，29:跳舞，31：室内划船/roller machine， 32：普拉提/pilates， 33:交叉训练/cross train, 34:有氧运动/cardio，35：尊巴舞/Zumba, 36:广场舞/square dance, 37:平板支撑/Plank, 38:健身房/gym 48:户外跑步，49:室内跑步， 50:户外骑行，51:室内骑行，52:户外走路，53:室内走路，54:泳池游泳，55:开放水域游泳，56:椭圆机，57:划船机，58:高强度间歇训练法，75:板球运动 基础运动： 101：功能性力量训练，102：核心训练，103：踏步机，104：整理放松 健身（25种） 110：传统力量训练，112：引体向上，114：开合跳，115：深蹲，116：高抬腿，117：拳击，118：杠铃，119：武术， 120：太极，121：跆拳道，122：空手道，123：自由搏击，124：击剑，125：射箭，126：体操，127:单杠，128:双杠,129:漫步机, 130:登山机 球类: 131:保龄球,132:台球,133:曲棍球,134:橄榄球,135:壁球,136:垒球,137:手球,138:毽球,139:沙滩足球, 140:藤球,141:躲避球 休闲运动 152:街舞,153:芭蕾,154:社交舞,155:飞盘,156:飞镖,157:骑马,158:爬楼,159:放风筝, 160:钓鱼 冰雪运动 161:雪橇,162:雪车,163:单板滑雪,164:雪上运动,165:高山滑雪,166:越野滑雪,167:冰壶,168:冰球,169:冬季两项 水上运动（10种） 170:冲浪,171:帆船,172:帆板,173:皮艇,174:摩托艇,175:划艇,176:赛艇,177:龙舟,178:水球,179:漂流, 极限运动（5种） 180:滑板,181:攀岩,182:蹦极,183:跑酷,184:BMX, kr01定制项目 193:Outdoor Fun（户外玩耍）, 194:Other Activity（其他运动） iconType Int 图标类型 1:单张小运动图片 2:单张大运动图片 3:多运动动画图片 4:单张中运动图片 5:运动最小图标 isSports Bool 运动图标 - 动画 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/transfer/IDOTransNormalModel.html":{"url":"doc/transfer/IDOTransNormalModel.html","title":"其它文件","keywords":"","body":"CLASS IDOTransNormalModel 普通文件 根据FileTransType区分 注：以下类型需使用相应的分类： 消息图标 - 使用 IDOTransMessageModel类 音乐 - 使用 IDOTransMusicModel 运动图标 - 使用 IDOTransSportModel 属性 类型 说明 fileType IDOTransType 文件类型 filePath String 文件绝对地址 fileName String 文件名 fileSize Int 文件大小 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOModelIndex.html":{"url":"doc/model/IDOModelIndex.html","title":"模型","keywords":"","body":"Model IDOActivitySwitchModel IDOAlarmItem IDOAllHealthSwitchStateModel IDOBatteryInfoModel IDOBleBeepModel IDOBleVoiceParamModel IDOBpAlgVersionModel IDOBpCalControlModel IDOBpCalibrationModel IDOBpCalibrationParamModel IDOBpMeasurementModel IDOBpMeasurementParamModel IDOBtNoticeModel IDOCmdGetResponseModel IDOCmdSetResponseModel IDOContactItem IDOContactReviseTimeModel IDODataTranConfigModel IDODateTimeParamModel IDODeviceLogStateModel IDODeviceNotificationModel IDODisplayModeParamModel IDODownloadLanguageModel IDODownloadLanguageType IDOErrorRecordModel IDOFitnessGuidanceParamModel IDOFlashBinInfoModel IDOFuncSimpleFileOptModel IDOFuncSimpleFileOptParamModel IDOGpsControlModel IDOGpsControlParamModel IDOGpsInfoModel IDOGpsInfoModelItem IDOGpsStatusModel IDOHandWashingReminderParamModel IDOHeartModeModel IDOHeartModeParamModel IDOHeartRateModeModel IDOHeartRateModeParamModel IDOHeartRateModeSmartParamModel IDOHistoricalMenstruationParamItem IDOHistoricalMenstruationParamModel IDOHotStartParamModel IDOItemItem IDOLanguageLibraryItem IDOLanguageLibraryModel IDOLiveDataModel IDOLongSitParamModel IDOLostFindParamModel IDOMainSportGoalModel IDOMainUISortItem IDOMainUISortModel IDOMainUISortParamModel IDOMainUISortSupportItem IDOMtuInfoModel IDOMusicControlParamModel IDOMusicFolderItem IDOMusicInfoModel IDOMusicItem IDOMusicOnOffParamModel IDOMusicOpearteParamModel IDOMusicOperateModel IDONotDisturbStatusModel IDONoticeMesaageParamItem IDONoticeMesaageParamModel IDONoticeMessageParamModel IDONoticeMessageStateItemItem IDONoticeMessageStateModel IDONoticeMessageStateParamModel IDONotificationCenterModel IDONotificationStatusParamModel IDORunPlanParamModel IDOSchedulerReminderItem IDOSchedulerReminderModel IDOScientificSleepSwitchParamModel IDOScreenBrightnessModel IDOSendRunPlanModel IDOSetNoticeStatusModel IDOShortcutParamModel IDOSleepPeriodParamModel IDOSpo2SwitchParamModel IDOSport100SortItem IDOSport100SortModel IDOSport100SortParamModel IDOSportGoalParamModel IDOSportModeSelectParamModel IDOSportModeSortParamModel IDOSportSortModel IDOSportSortParamModel IDOStepGoalModel IDOStressCalibrationModel IDOStressCalibrationParamModel IDOStressValModel IDOSupportMaxSetItemsNumModel IDOSyncContactModel IDOSyncContactParamModel IDOTakingMedicineReminderParamModel IDOTemperatureSwitchParamModel IDOUnitParamModel IDOUpdateStatusModel IDOUpHandGestureModel IDOUpHandGestureParamModel IDOV3NoiseParamModel IDOVersionInfoModel IDOVoiceReplyParamModel IDOWalkRemindModel IDOWalkRemindTimesItem IDOWalkRemindTimesParamModel IDOWallpaperDialReplyV3Model IDOWallpaperDialReplyV3ParamModel IDOWatchDialIdModel IDOWatchDialInfoModel IDOWatchDialParamModel IDOWatchDialSortItem IDOWatchDialSortParamModel IDOWatchFaceModel IDOWatchFaceParamModel IDOWatchItem IDOWatchListModel IDOWatchListV2Model IDOWeatherDataFuture IDOWeatherDataParamModel IDOWeatherSunTimeParamModel IDOWeatherV3ParamModel IDOWorldTimeParamModel Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 17:07:23 "},"doc/model/IDOActivitySwitchModel.html":{"url":"doc/model/IDOActivitySwitchModel.html","title":"IDOActivitySwitchModel","keywords":"","body":"IDOActivitySwitchModel 属性 类型 说明 errCode Int 0 表示成功非零表示错误 autoIdentifySportWalk Int 自动识别行走开关：0为关闭，1为开启，-1为不支持 autoIdentifySportRun Int 自动识别运行开关：0为关闭，1为开启，-1为不支持 autoIdentifySportBicycle Int 自动识别循环开关：0为关闭，1为打开，-1为不支持 autoPauseOnOff Int 自动暂停开关：0为关闭，1为打开，-1为不支持 autoEndRemindOnOffOnOff Int 结束提醒开关：0为关闭，1为开启，-1为不支持 autoIdentifySportElliptical Int 自动识别椭圆开关：0为关闭，1为打开，-1为不支持 autoIdentifySportRowing Int 自动识别划船开关：0为关闭，1为打开，-1为不支持 autoIdentifySportSwim Int 自动识别游泳开关：0为关闭，1为开启，-1为不支持 autoIdentifySportSmartRope Int 自动识别智能拉绳开关：0为关闭，1为开启，-1为不支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOAlarmItem.html":{"url":"doc/model/IDOAlarmItem.html","title":"IDOAlarmItem","keywords":"","body":"IDOAlarmModel 属性 类型 说明 items List [IDOAlarmItem] IDOAlarmItem 集合 num 个数 IDOAlarmItem 个数 （不需要赋值） version 版本 协议版本（不需要赋值） IDOAlarmItem 属性 类型 说明 alarmID Int 报警ID，从1开始，1~支持的最大报警数 delayMin Int 延迟几分钟 hour Int 闹钟 时钟 minute Int 闹钟 分钟 name String 报警名称，最大23字节 isOpenRepeat Bool Repeatpublic var Repeats = Set()重复开关 repeats HashSetSet() IDOWeek 哈希集合 repeatTimes Int 闹钟重复次数闹钟重复的次数，延时开关，设置为0则关闭，设置为某个数字则重复该次数 status IDOAlarmStatus 0：隐藏（删除） 1：显示 -1：无效 type IDOAlarmType 报警类型 IDOWeek Android enum class IDOWeek(val rawValue: Int):Serializable { MONDAY(0), TUESDAY(1), WEDNESDAY(2), THURSDAY(3), FRIDAY(4), SATURDAY(5), SUNDAY(6); } iOS enum IDOWeek: Int { case monday = 0, tuesday, wednesday, thursday, friday, saturday, sunday } IDOAlarmStatus Android enum class IDOAlarmStatus(val rawValue: Int) { INVALID(-1), HIDDEN(0), DISPLAYED(1); } iOS public enum IDOAlarmStatus: Int { case invalid = -1 case hidden = 0 case displayed = 1 } IDOAlarmType Android enum class IDOAlarmType(val rawValue: Int) { WAKEUP(0x00), SLEEP(0x01), EXERCISE(0x02), MEDICATION(0x03), DATE(0x04), GATHERING(0x05), MEETING(0x06), OTHER(0x07); } iOS public enum IDOAlarmType: Int { case wakeUp = 0x00 case sleep = 0x01 case exercise = 0x02 case medication = 0x03 case date = 0x04 case gathering = 0x05 case meeting = 0x06 case other = 0x07 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOAllHealthSwitchStateModel.html":{"url":"doc/model/IDOAllHealthSwitchStateModel.html","title":"IDOAllHealthSwitchStateModel","keywords":"","body":"IDOAllHealthSwitchStateModel 属性 类型 说明 heartMode Int 连续心率测量开关：1：开0：关-1：不支持 pressureMode Int 自动血压测量开关1：开0：关-1：不支持 spo2Mode Int 自动血氧测量开关1：开0：关-1：不支持 scienceMode Int 科学睡眠开关2：科学睡眠模式1：正常睡眠模式-1：不支持 temperatureMode Int 夜间温度开关1：开0：关-1：不支持 noiseMode Int 噪音开关1：开0：关-1：不支持 menstrualMode Int 月经周期开关1：开0：关-1：不支持 walkMode Int 步行提醒开关1：开0：关-1：不支持 handwashingMode Int 洗手提醒开关1：开0：关-1：不支持 respirRateState Int 呼吸频率开关1：开0：关-1：不支持 bodyPowerState Int 机身电池开关1：开0：关-1：不支持 drinkwaterMode Int 喝水提醒开关1：开0：关-1：不支持 heartmodeNotifyFlag Int 心率通知状态：0 无效1 允许通知2 静音通知3 禁用通知 pressureNotifyFlag Int 血压通知状态：0 无效1 允许通知2 静默通知3 禁用通知 spo2NotifyFlag Int 血氧通知状态：0为无效1为允许通知2为静默通知3为禁用通知 menstrualNotifyFlag Int 月经周期通知状态：0 无效1 允许通知2 静音通知3 禁用通知 guidanceNotifyFlag Int 健身指导通知状态：0 无效1 允许通知2 静默通知3 禁用通知 reminderNotifyFlag Int 提醒通知状态：0 无效1 允许通知2 静默通知3 禁用通知 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBatteryInfoModel.html":{"url":"doc/model/IDOBatteryInfoModel.html","title":"IDOBatteryInfoModel","keywords":"","body":"IDOBatteryInfoModel 属性 类型 说明 type Int 电池类型：0：可充电锂电池，1：纽扣电池 voltage Int 电压 status Int 电池状态0：正常1：充电中2：充电完成3：电量低 level Int 等级 lastChargingYear Int 最后一次充电时间，年份 lastChargingMonth Int 最后一次充电时间、月份 lastChargingDay Int 最后充电时间，天 lastChargingHour Int 最后充电时间，小时 lastChargingMinute Int 最后充电时间，分钟 lastChargingSecond Int 最后一次充电时间，秒 mode Int 0：无效1：普通模式（非省电模式）2：省电模式 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBleBeepModel.html":{"url":"doc/model/IDOBleBeepModel.html","title":"IDOBleBeepModel","keywords":"","body":"IDOBleBeepModel 属性 类型 说明 errCode Int 错误码，0表示成功，非0表示失败 items List[IDOBleBeepItem] IDOBleBeepItem 属性 类型 说明 name String 名字 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOBleVoiceParamModel.html":{"url":"doc/model/IDOBleVoiceParamModel.html","title":"IDOBleVoiceParamModel","keywords":"","body":"IDOBleVoiceParamModel 属性 类型 说明 totalVolume Int 总容积 currentVolume Int 当前音量 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBpAlgVersionModel.html":{"url":"doc/model/IDOBpAlgVersionModel.html","title":"IDOBpAlgVersionModel","keywords":"","body":"IDOBpAlgVersionModel 属性 类型 说明 bpVersion1 Int 固件血压算法版本1 bpVersion2 Int 固件血压算法版本2 bpVersion3 Int 固件血压算法版本3 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBpCalControlModel.html":{"url":"doc/model/IDOBpCalControlModel.html","title":"IDOBpCalControlModel","keywords":"","body":"IDOBpCalControlModel 属性 类型 说明 errorCode Int 错误代码：0 表示成功，非 0 表示失败 operate Int 操作0：无效1：开始血压校准2：停止血压校准3：获取特征向量 sbpPpgFeatureNum Int 高血压PPG特征向量个数operate=3时有效 dbpPpgFeatureNum Int 低血压PPG特征向量个数operate=3时有效 sbpPpgFeatureItems List 高血压PPG特征向量集合 dbpPpgFeatureItems List 低血压PPG特征向量集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOBpCalibrationModel.html":{"url":"doc/model/IDOBpCalibrationModel.html","title":"IDOBpCalibrationModel","keywords":"","body":"IDOBpCalibrationModel 属性 类型 说明 retCode Int 0：成功1：成功进入校准模式，正在进行校准2：处于锻炼模式3：设备忙4：无效状态 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBpCalibrationParamModel.html":{"url":"doc/model/IDOBpCalibrationParamModel.html","title":"IDOBpCalibrationParamModel","keywords":"","body":"IDOBpCalibrationParamModel 属性 类型 说明 flag Int 1：血压校准设置2：血压校准查询结果 diastolic Int 收缩压 systolic Int 舒张压 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBpMeasurementModel.html":{"url":"doc/model/IDOBpMeasurementModel.html","title":"IDOBpMeasurementModel","keywords":"","body":"IDOBpMeasurementModel 属性 类型 说明 status Int 0：不支持1：测量中2：测量成功3：测量失败4：设备处于运动模式 systolicBp Int 收缩压 diastolicBp Int 舒张压 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBpMeasurementParamModel.html":{"url":"doc/model/IDOBpMeasurementParamModel.html","title":"IDOBpMeasurementParamModel","keywords":"","body":"IDOBpMeasurementParamModel 属性 类型 说明 flag Int 1：开始测量2：结束测量3：获取血压数据 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOBtNoticeModel.html":{"url":"doc/model/IDOBtNoticeModel.html","title":"IDOBtNoticeModel","keywords":"","body":"IDOBtNoticeModel 属性 类型 说明 btConnectStates Int 1：BT连接状态开启0：BT连接状态关闭-1：无效 btPairStates Int 1：BT 配对状态开启0：BT 配对状态关闭-1：无效 a2dpConnectStates Int 1：A2DP 连接状态开启0：A2DP 连接状态关闭-1：无效 hfpConnectStates Int 1：HFP 连接状态开启0：HFP 连接状态关闭-1：无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOCmdGetResponseModel.html":{"url":"doc/model/IDOCmdGetResponseModel.html","title":"IDOCmdGetResponseModel","keywords":"","body":"IDOCmdGetResponseModel 属性 类型 说明 onOff Int 开关状态1：开0：关-1：不支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOCmdSetResponseModel.html":{"url":"doc/model/IDOCmdSetResponseModel.html","title":"IDOCmdSetResponseModel","keywords":"","body":"IDOCmdSetResponseModel 属性 类型 说明 isSuccess Int 0：失败1：成功 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOContactItem.html":{"url":"doc/model/IDOContactItem.html","title":"IDOContactItem","keywords":"","body":"IDOContactItem 属性 类型 说明 phone String 联系电话内容，最大14字节+'\\0'换行符 name String 联系人姓名内容，最大31字节+'\\0'换行符 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOContactReviseTimeModel.html":{"url":"doc/model/IDOContactReviseTimeModel.html","title":"IDOContactReviseTimeModel","keywords":"","body":"IDOContactReviseTimeModel 属性 类型 说明 result Int 0：不需要发送联系方式文件1：需要发送联系方式数据 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDODataTranConfigModel.html":{"url":"doc/model/IDODataTranConfigModel.html","title":"IDODataTranConfigModel","keywords":"","body":"IDODataTranConfigModel 属性 类型 说明 errCode Int 错误代码0：正常非零：错误 type Int 活动类型对应的图标类型0：无效1：活动小图标2：活动大图标3：活动动画图标4：中等大小的活动图标 evtType Int 事件类型0：无效例如1：短信、2：邮件、3：微信等。 sportType Int 活动类型0：无效活动模式类型，1：步行，2：跑步等。 iconWidth Int 固件图标所需的宽度（由type和evt_type/sport_type决定） iconHeight Int 固件图标所需的高度（由 type 和 evt_type/sport_type 决定） format Int 颜色格式 blockSize Int 压缩块大小 bigSportsNum Int 大型体育图标的数量 msgNum Int 消息图标数量 smallSportsAndAnimationNum Int 体育、动画小图标数量 mediumNum Int 中等大小图标的数量 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDODateTimeParamModel.html":{"url":"doc/model/IDODateTimeParamModel.html","title":"IDODateTimeParamModel","keywords":"","body":"IDODateTimeParamModel 属性 类型 说明 year Int 年 monuth Int 月 day Int 日 hour Int 小时 minute Int 分钟 second Int 秒 week Int 周：周一至周日 0-6 timeZone Int 24 小时格式的时区：0-12 为东，13-24 为西 (未启用，赋值0) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDODeviceLogStateModel.html":{"url":"doc/model/IDODeviceLogStateModel.html","title":"IDODeviceLogStateModel","keywords":"","body":"IDODeviceLogStateModel 属性 类型 说明 type Int 0：无对应日志1：固件重启日志2：固件异常 errCode Int 固件重启日志错误码，0正常 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDODeviceNotificationModel.html":{"url":"doc/model/IDODeviceNotificationModel.html","title":"IDODeviceNotificationModel","keywords":"","body":"IDODeviceNotificationModel 属性 类型 说明 type Int 监听设备状态 0 无效 1 手环已经解绑 2 心率模式改变 3 血氧产生数据，发生改变 4 压力产生数据，发生改变 5 Alexa识别过程中退出 6 固件发起恢复出厂设置，通知app弹框提醒 7 app需要进入相机界面（TIT01定制） 8 sos事件通知（205土耳其定制） 9 alexa设置的闹钟，固件修改，需要发送对应的通知位给app，app收到后发送获取V3的闹钟命令 10 固件有删除日程提醒，app这边( cmd = 0x33 , cmd_id = 0x36 )查询列表，要更新对应的列表数据 11 固件端有修改对应的表盘子样式，通知app获取（command_id为0x33， key为 0x5000） 12 固件通知ios更新通知图标和名字 13 固件通知app图标已经更新，通知app获取已经更新的图标状态 14 固件请求重新设置天气，app收到收，下发天气数据 15 固件步数每次增加2000步，设备请求app同步数据，app调用同步接口 16 固件探测到睡眠结束，请求app同步睡眠数据，app调用同步接口同步 17 固件三环数据修改，通知app更新三环数据 18 固件充满电完成发送提醒，app收到后通知栏显示设备充电完成 19 结束运动后，手动测量心率后，手动测量血氧后，手动测量压力后，设备自动请求同步，先检查链接状态，未连接本次同步不执行，满足下个自动同步条件后再次判断发起同步请求 20 固件修改 心率通知状态类型、压力通知状态类型、血氧通知状态类型、生理周期通知状态类型、健康指导通知状态类型、提醒事项通知状态类型通知app更新心率、压力、血氧、生理周期、健康指导、提醒事项通知状态类型 21 固件压力值计算完成，通知app获取压力值 22 固件通知app，固件压力校准失败(固件退出测量界面/检测失败/检测超时/未佩戴) 23 固件产生心率过高或者过低提醒时，通知app获取心率数据 24 固件通知app bt蓝牙已连接 25 固件通知app bt蓝牙断开连接 26 固件蓝牙通话开始 27 固件蓝牙通话结束 28 新版本固件每隔4分30秒发送一个通知命令，用于修复ios 会显示离线的问题 29 通知app运动开始 30 通知app运动结束 31 固件重启发送通知给app （app收到通知需要获取固件版本信息） 32 设备空闲时（没有使用aleax），需要上报通知给app（时间间隔为1小时） 33 固件整理空间完成通知app继续下传表盘文件 34 固件通知app结束寻找手环指令 （对应6.3寻找手环） 35 固件进入省电模式通知app 36 固件退出省电模式通知app 37 固件通知请求app下发设置gps热启动参数 38 固件传输原始数据完成，通知app获取特性向量信息 39 固件通知app，固件血压校准失败(固件退出测量界面/检测失败/检测超时/未佩戴) 40 固件传输原始数据完成，没有特性向量信息，通知app数据采集结束 41 v3健康数据同步单项数据完成通知 (android 内部使用） 42 固件整理gps数据空间完成通知app下发gps文件 43 固件升级EPO.dat文件失败，通知app再次下发EPO.dat文件（最多一次） 44 固件升级EPO.dat文件成功 45 固件升级GPS失败，通知app重新传输 46 固件升级GPS成功 notifyType Int 1 闹钟已经修改 2 固件过热异常告警 4 亮屏参数有修改 8 抬腕参数有修改16 勿擾模式获取 32 手机音量的下发 msgId Int 每个消息对应一个ID msgNotice Int 0 无效 1 自定义短信1（正在开会，稍后联系）2 自定义短信2 errorIndex Int 01 ACC 加速度 02 PPG 心率 03 TP 触摸 04 FLASH05 过热（PPG）06 气压 07 GPS 08 地磁 controlEvt Int 551 设备控制app音乐开始 552 设备控制app音乐暂停 553 设备控制app音乐停止 554 设备控制app音乐上一首 555 设备控制app音乐下一首 556 设备控制app拍照单拍 557 设备控制app拍照连拍 558 设备控制app音量加 559 设备控制app音量减 560 设备控制app打开相机 561 设备控制app关闭相机 562 设备控制app接听电话 563 设备控制app拒接电话 565 设备控制app音乐音量百分比 570 设备控制app寻找手机开始 571 设备控制app寻找手机结束 572 设备通知app防丢启动 574 设备通知app一键呼叫开始 575 设备通知传感器数据 576 设备通知app操作类型 577 设备通知app数据更新 578 设备请求版本检查 579 设备请求ota 580 设备通知app短信信息 581 设备控制app相机 591 设备通知固件喇叭音量修改 controlJson String 控制事件返回值（部分事件才有） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDODisplayModeParamModel.html":{"url":"doc/model/IDODisplayModeParamModel.html","title":"IDODisplayModeParamModel","keywords":"","body":"IDODisplayModeParamModel 属性 类型 说明 mode Int 模式0：默认1：横向2：纵向3：翻转（180度） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDODownloadLanguageModel.html":{"url":"doc/model/IDODownloadLanguageModel.html","title":"IDODownloadLanguageModel","keywords":"","body":"IDODownloadLanguageModel 属性 类型 说明 useLang Int 当前使用的语言 defaultLang Int 默认语言 fixedLang Int 固定存储语言数量 maxStorageLang Int 最多存储语言 langArray List IDODownloadLanguageType 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDODownloadLanguageType.html":{"url":"doc/model/IDODownloadLanguageType.html","title":"IDODownloadLanguageType","keywords":"","body":"IDODownloadLanguageType 属性 类型 说明 type Int 无效:0,中文:1,英文:2,法语:3,德语:4,意大利语:5,西班牙语:6,日语:7, 波兰语:8,捷克语:9,罗马尼亚:10,立陶宛语:11,荷兰语:12,斯洛文尼亚:13, 匈牙利语:14,俄罗斯语:15,乌克兰语:16,斯洛伐克语:17,丹麦语:18,克罗地亚:19,印尼语:20, 韩语:21,印地语:22,葡萄牙语:23,土耳其:24,泰国语:25,越南语:26,缅甸语:27, 菲律宾语:28,繁体中文:29,希腊语:30,阿拉伯语:31,瑞典语:32,芬兰语:33,波斯语:34,挪威语:35 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOErrorRecordModel.html":{"url":"doc/model/IDOErrorRecordModel.html","title":"IDOErrorRecordModel","keywords":"","body":"IDOErrorRecordModel 属性 类型 说明 type Int 0 查询1 清除日志 resetFlag Int 0 正常1 硬故障2 看门狗服务3 断言重置4 断电服务5 其他异常 hwError Int 硬件错误代码0 正常1 加速度计错误2 心率错误3 TP 错误4 闪存错误 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOFitnessGuidanceParamModel.html":{"url":"doc/model/IDOFitnessGuidanceParamModel.html","title":"IDOFitnessGuidanceParamModel","keywords":"","body":"IDOFitnessGuidanceParamModel 属性 类型 说明 mode Int 健身指导模式开关1：开0：关 startHour Int 开始时间 startMinute Int 开始分钟 endHour Int 结束时间 endMinute Int 结束分钟 notifyFlag Int 通知类型0：无效1：允许2：静默3：禁用 goMode Int 移动开关提醒1：开0：关 repeats HashSet Set 重复 IDOWeek 集合 isOpenRepeat Bool 重复开关 targetSteps Int 目标步数 IDOWeek Android enum class IDOWeek(val rawValue: Int):Serializable { MONDAY(0), TUESDAY(1), WEDNESDAY(2), THURSDAY(3), FRIDAY(4), SATURDAY(5), SUNDAY(6); } iOS enum IDOWeek: Int { case monday = 0, tuesday, wednesday, thursday, friday, saturday, sunday } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOFlashBinInfoModel.html":{"url":"doc/model/IDOFlashBinInfoModel.html","title":"IDOFlashBinInfoModel","keywords":"","body":"IDOFlashBinInfoModel 属性 类型 说明 status Int 状态：0 - 正常，1 - 字体无效，校验和错误，2 - 版本不匹配 version Int 协议版本 （不需要赋值） matchVersion Int 字库版本private let version: Int固件需要的匹配版本 checkCode Int 字体库校验码 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOFuncSimpleFileOptModel.html":{"url":"doc/model/IDOFuncSimpleFileOptModel.html","title":"IDOFuncSimpleFileOptModel","keywords":"","body":"IDOFuncSimpleFileOptModel 属性 类型 说明 error Int 错误代码0表示成功，其他表示错误 operate Int 操作类型0：获取1：覆盖2：删除 index Int 索引号 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOFuncSimpleFileOptParamModel.html":{"url":"doc/model/IDOFuncSimpleFileOptParamModel.html","title":"IDOFuncSimpleFileOptParamModel","keywords":"","body":"IDOFuncSimpleFileOptParamModel 属性 类型 说明 operate Int 操作类型0：获取1：覆盖2：删除3：复制 index Int 索引号 destIndex Int 目的索引，仅用于复制，其他情况无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOGpsControlModel.html":{"url":"doc/model/IDOGpsControlModel.html","title":"IDOGpsControlModel","keywords":"","body":"IDOGpsControlModel 属性 类型 说明 type Int 1：启用日志2：禁用日志3：写入AGPS数据4：擦除AGPS数据5：写入GPS固件 status Int 0：无效1：命令正在进行2：已完成 errorCode Int 0 表示成功，非 0 表示失败 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOGpsControlParamModel.html":{"url":"doc/model/IDOGpsControlParamModel.html","title":"IDOGpsControlParamModel","keywords":"","body":"IDOGpsControlParamModel 属性 类型 说明 operate Int 1：控制2：查询 type Int 1：启用日志2：禁用日志3：写入AGPS数据4：擦除AGPS数据5：写入GPS固件 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOGpsInfoModel.html":{"url":"doc/model/IDOGpsInfoModel.html","title":"IDOGpsInfoModel","keywords":"","body":"IDOGpsInfoModel 属性 类型 说明 errCode Int GPS 错误代码0 - 正常，非零 - 异常 fwVersion Int GPS固件版本 agpsInfo Int AGPS（辅助GPS）的有效期 agpsErrCode Int AGPS 错误代码 utcYear Int 世界标准时间年份 utcMonth Int 世界标准时间月份 utcDay Int 世界标准时间 utcHour Int 世界标准时间 utcMinute Int UTC 分钟 startMode Int 启动模式1 - 冷启动2 - 热启动 gns Int 定位卫星选择1 - GPS2 - GLONASS3 - GPS + GLONASS fixStartBit Int 固定起始位默认0，用于调试 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOGpsInfoModelItem.html":{"url":"doc/model/IDOGpsInfoModelItem.html","title":"IDOGpsInfoModelItem","keywords":"","body":"IDOGpsInfoModelItem 属性 类型 说明 type Int 训练类型186：休息计划187：户外跑步计划188：室内跑步计划189：室内健身计划 num Int 动作次数注意：休息时动作次数为零，其他动作时动作次数非零 items List[IDOItemItem] IDOItemItem集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOGpsStatusModel.html":{"url":"doc/model/IDOGpsStatusModel.html","title":"IDOGpsStatusModel","keywords":"","body":"IDOGpsStatusModel 属性 类型 说明 gpsRunStatus Int GPS运行状态0 - 未运行1 - 搜索卫星2 - 跟踪 agpsIsValid Int AGPS（辅助 GPS）的有效性（以小时为单位）非零值表示有效性 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOHandWashingReminderParamModel.html":{"url":"doc/model/IDOHandWashingReminderParamModel.html","title":"IDOHandWashingReminderParamModel","keywords":"","body":"IDOHandWashingReminderParamModel 属性 类型 说明 onOff Int 0：关闭1：打开默认关闭 startHour Int 提醒的开始时间 startMinute Int 提醒的开始分钟 endHour Int 提醒结束时间 endMinute Int 提醒结束分钟 repeats HashSetSet() IDOWeek 哈希集合 isOpenRepeat Bool 重复开关 interval Int 提醒间隔（分钟）默认为 60 分钟 IDOWeek Android enum class IDOWeek(val rawValue: Int):Serializable { MONDAY(0), TUESDAY(1), WEDNESDAY(2), THURSDAY(3), FRIDAY(4), SATURDAY(5), SUNDAY(6); } iOS enum IDOWeek: Int { case monday = 0, tuesday, wednesday, thursday, friday, saturday, sunday } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOHeartModeModel.html":{"url":"doc/model/IDOHeartModeModel.html","title":"IDOHeartModeModel","keywords":"","body":"IDOHeartModeModel 属性 类型 说明 updateTime Int 更新时间为 Unix 时间戳（以秒为单位）。如果等于0，表示获取当前UTC时间戳。 mode Int 模式0：关闭1：自动（5 分钟）2：连续监控（5 秒）3：手动模式（禁用自动）4：默认类型，设置后固件自动设置为默认模式5：设置相应的测量间隔6：智能心率模式（ID206）注意：1.如果配置了setSetV3HeartInterval函数，则模式0、模式1、模式2无效。2．使用快速设置进行配置时，设置 setSetV3HeartInterval 将激活模式 53。设置连续心率时，如果配置了setSetV3HeartInterval函数，则对应的模式为模式5。 hasTimeRange Int 是否有时间范围。 0：否，1：是 measurementInterval Int 测量间隔（以秒为单位） getSECMode Int 手表当前支持的心率类型全部为0个无效值Bit0：5s模式注意：如果固件中未启用setSetV3HeartInterval则返回0 getMinMode Int 目前手表支持的心率类型，全0：无效值Bit0：1分钟bit1：3分钟bit2：5分钟bit3：10分钟bit4：30分钟bit5：285模式，bit6：15分钟模式注意：如果固件中未启用setSetV3HeartInterval，则返回0 startHour Int 开始时间，时 startMinute Int 开始时间，分 endHour Int 结束时间，时 endMinute Int 结束时间，分 notifyFlag Int 通知类型：0：无效1：允许通知2：静默通知3：关闭通知注意：如果固件未启用v3HeartSetRateModeCustom，则此功能无效 highHeartMode Int 1：开启智能高心率提醒0：关闭注：如果固件没有开启v3HeartSetRateModeCustom则此功能无效 lowHeartMode Int 1：开启智能低心率提醒0：关闭注：如果固件没有开启v3HeartSetRateModeCustom则此功能无效 highHeartValue Int 智能高心率提醒阈值注意：如果固件没有启用v3HeartSetRateModeCustom，则此功能无效 lowHeartValue Int 智能低心率提醒阈值注意：如果固件没有启用v3HeartSetRateModeCustom，则此功能无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOHeartModeParamModel.html":{"url":"doc/model/IDOHeartModeParamModel.html","title":"IDOHeartModeParamModel","keywords":"","body":"IDOHeartModeParamModel 属性 类型 说明 updateTime Int 更新时间为 Unix 时间戳（以秒为单位）。如果等于0，表示获取当前UTC时间戳。 mode Int 模式0：关闭1：自动（5 分钟）2：连续监控（5 秒）3：手动模式（禁用自动）4：默认类型，设置后固件自动设置为默认模式5：设置相应的测量间隔6：智能心率模式（ID206）注意：1.如果配置了setSetV3HeartInterval函数，则模式0、模式1、模式2无效。2．使用快速设置进行配置时，设置 setSetV3HeartInterval 将激活模式 53。设置连续心率时，如果配置了setSetV3HeartInterval函数，则对应的模式为模式5。 hasTimeRange Int 是否有时间范围。 0：否，1：是 measurementInterval Int 测量间隔（以秒为单位） startHour Int 开始时间，时 startMinute Int 开始时间，分 endHour Int 结束时间，时 endMinute Int 结束时间，分 notifyFlag Int 通知类型：0：无效1：允许通知2：静默通知3：关闭通知注意：如果固件未启用v3HeartSetRateModeCustom，则此功能无效 highHeartMode Int 1：开启智能高心率提醒0：关闭注：如果固件没有开启v3HeartSetRateModeCustom则此功能无效 lowHeartMode Int 1：开启智能低心率提醒0：关闭注：如果固件没有开启v3HeartSetRateModeCustom则此功能无效 highHeartValue Int 智能高心率提醒阈值注意：如果固件没有启用v3HeartSetRateModeCustom，则此功能无效 lowHeartValue Int 智能低心率提醒阈值注意：如果固件没有启用v3HeartSetRateModeCustom，则此功能无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOHeartRateModeModel.html":{"url":"doc/model/IDOHeartRateModeModel.html","title":"IDOHeartRateModeModel","keywords":"","body":"IDOHeartRateModeModel 属性 类型 说明 mode Int 0：关闭1：手动模式2：自动3：连续监控-1：无效 hasTimeRange Int 是否有时间范围 0：无 1：有 measurementInterval Int 测量间隔（分钟） startHour Int 开始时间，时 startMinute Int 开始时间，分 endHour Int 结束时间，时 endMinute Int 结束时间，分 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOHeartRateModeParamModel.html":{"url":"doc/model/IDOHeartRateModeParamModel.html","title":"IDOHeartRateModeParamModel","keywords":"","body":"IDOHeartRateModeParamModel 属性 类型 说明 mode Int 0：关闭1：自动（5分钟）2：连续监控（5秒）3：手动模式 hasTimeRange Int 时间范围0：否1：是 startHour Int 开始时间（24 小时制，0-23） startMinute Int 开始分钟 (0-59) endHour Int 结束时间 endMinute Int 结束分钟 measurementInterval Int 测量间隔单位：分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOHeartRateModeSmartParamModel.html":{"url":"doc/model/IDOHeartRateModeSmartParamModel.html","title":"IDOHeartRateModeSmartParamModel","keywords":"","body":"IDOHeartRateModeSmartParamModel 属性 类型 说明 mode Int 开关0：关1：开 notifyFlag Int 通知类型0：无效1：允许通知2：静默通知3：禁用通知 highHeartMode Int 1：启用智能高心率警报0：禁用 lowHeartMode Int 1：启用智能低心率警报0：禁用 highHeartValue Int 智能高心率警报阈值 lowHeartValue Int 智能低心率警报阈值 startHour Int 心率监测开始时间（小时） startMinute Int 心率监测开始时间（分钟） endHour Int 心率监测结束时间（小时） endMinute Int 心率监测结束时间（分钟） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOHistoricalMenstruationParamItem.html":{"url":"doc/model/IDOHistoricalMenstruationParamItem.html","title":"IDOHistoricalMenstruationParamItem","keywords":"","body":"IDOHistoricalMenstruationParamItem 属性 类型 说明 year Int 经期开始的年 mon Int 经期开始的月 day Int 经期开始的天 menstrualDay Int 月经长度（天） cycleDay Int 周期长度(天) ovulationIntervalDay Int 从下次月经开始到排卵日的间隔通常为14天。 ovulationBeforeDay Int 排卵日之前的受孕天数通常为5天，此时 ovulationAfterDay Int 排卵日后的受孕天数通常为5天，此时 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOHistoricalMenstruationParamModel.html":{"url":"doc/model/IDOHistoricalMenstruationParamModel.html","title":"IDOHistoricalMenstruationParamModel","keywords":"","body":"IDOHistoricalMenstruationParamModel 属性 类型 说明 avgMenstrualDay Int 平均月经周期长度 单位：天 avgCycleDay Int 平均月经周期长度 单位：天 items List [IDOHistoricalMenstruationParamItem] IDOHistoricalMenstruationParamItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOHotStartParamModel.html":{"url":"doc/model/IDOHotStartParamModel.html","title":"IDOHotStartParamModel","keywords":"","body":"IDOHotStartParamModel 属性 类型 说明 tcxoOffset Int TCXO 偏移 longitude Int 经度（乘以 10^6） latitude Int 纬度（乘以 10^6） altitude Int 海拔高度（乘以 10） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOItemItem.html":{"url":"doc/model/IDOItemItem.html","title":"IDOItemItem","keywords":"","body":"IDOItemItem 属性 类型 说明 type Int 动作类型1：快走2：慢跑3：中速跑4：快跑 time Int 目标时间 单位：秒 heightHeart Int 低心率范围 lowHeart Int 高心率范围 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOLanguageLibraryItem.html":{"url":"doc/model/IDOLanguageLibraryItem.html","title":"IDOLanguageLibraryItem","keywords":"","body":"IDOLanguageLibraryItem 属性 类型 说明 languageType IDOLanguageType 语言类型 languageVersion Int 语言版本号 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 17:16:21 "},"doc/model/IDOLanguageLibraryModel.html":{"url":"doc/model/IDOLanguageLibraryModel.html","title":"IDOLanguageLibraryModel","keywords":"","body":"IDOLanguageLibraryModel 属性 类型 说明 useLang Int 当前使用的语言 defaultLang Int 默认语言 fixedLang Int 固定存储语言数量 maxStorageLang Int 最大存储语言 items List[IDOLanguageLibraryItem] IDOLanguageLibraryIte集合 itemsUser List[IDOLanguageLibraryItem] IDOLanguageLibraryIte集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOLiveDataModel.html":{"url":"doc/model/IDOLiveDataModel.html","title":"IDOLiveDataModel","keywords":"","body":"IDOLiveDataModel 属性 类型 说明 totalStep Int 总步数 totalCalories Int 总热量（千卡） totalDistances Int 总距离（米） totalActiveTime Int 总活跃时间（以秒为单位） heartRate Int 心率数据（每分钟心跳次数） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOLongSitParamModel.html":{"url":"doc/model/IDOLongSitParamModel.html","title":"IDOLongSitParamModel","keywords":"","body":"IDOLongSitParamModel 属性 类型 说明 startHour Int 久坐提醒开始时间（小时） startMinute Int 久坐提醒开始时间（分钟） endHour Int 久坐提醒结束时间（小时） endMinute Int 久坐提醒结束时间（分钟） interval Int 间隔（以分钟为单位）值应大于 15 分钟 repetitions Int 重复与开关bit0：0表示关闭，1表示打开bit1-7：0表示不重复，1表示重复 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOLostFindParamModel.html":{"url":"doc/model/IDOLostFindParamModel.html","title":"IDOLostFindParamModel","keywords":"","body":"IDOLostFindParamModel 属性 类型 说明 mode Int 模式0：无防丢1：近距离防丢2：中距离防丢3：远距离防丢 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMainSportGoalModel.html":{"url":"doc/model/IDOMainSportGoalModel.html","title":"IDOMainSportGoalModel","keywords":"","body":"IDOMainSportGoalModel 属性 类型 说明 calorie Int 活动卡路里目标（以千卡为单位）需要固件启用功能表“setCalorieGoal” distance Int 目标距离（米） calorieMin Int 最低活动热量值 calorieMax Int 最大活动热量值 midHighTimeGoal Int 中高运动时间目标（以秒为单位）需要固件启用功能表“setMidHighTimeGoal” walkGoalTime Int 目标时间（秒） timeGoalType Int 0：无效1：每日目标2：每周目标需要固件启用功能表getSupportSetGetTimeGoalTypeV2 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMainUISortItem.html":{"url":"doc/model/IDOMainUISortItem.html","title":"IDOMainUISortItem","keywords":"","body":"IDOMainUISortItem 属性 类型 说明 locationX Int 坐标x轴，从1开始 locationY Int 坐标y轴，从1开始一个y轴代表一个水平网格 sizeType Int 0：无效 1：大图标 2：小图标 widgetsType Int 控制类型0：无效1：周/日期2：步数3：距离4：卡路里5：心率 />6：电池 supportSizeType Int 固件支持的可编辑图标类型0：无效1：大图标2：小图标3：大图标+小图标 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMainUISortModel.html":{"url":"doc/model/IDOMainUISortModel.html","title":"IDOMainUISortModel","keywords":"","body":"IDOMainUISortModel 属性 类型 说明 errCode Int 0：成功，非零：失败 operate Int 操作0：无效 1：查询 2：设置 allNum Int 固件中当前显示列表的数量 supportItems List[IDOMainUISortSupportItem] IDOMainUISortSupportItem 集合 items List[IDOMainUISortItem] IDOMainUISortItem 集合 locationX Int 横轴x 从1开始 locationY Int 纵轴y 从1开始 sizeType Int 图标类型0:无效 1:大图标 2:小图标 widgetsType Int 参考小组件类型列表 widgets_type 小组件类型列表 枚举值 含义 0 无效 1-100是小图标 1 活动三环 （小图标） 2 步数 3 最近一次活动 4 音乐 5 天气 6 心率 7 压力 8 睡眠 9 Alexa 10 体温 11 血氧 12 计时器 13 闹钟 14 事项提醒（现日程提醒） 15 噪声 16 电量 17 电话（联系人） 18 世界时间 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOMainUISortParamModel.html":{"url":"doc/model/IDOMainUISortParamModel.html","title":"IDOMainUISortParamModel","keywords":"","body":"IDOMainUISortParamModel 属性 类型 说明 operate Int 操作0：无效 1：查询 2：设置 locationX Int 坐标x轴，从1开始 locationY Int 坐标y轴，从1开始一个y轴代表一个水平网格 sizeType Int 0：无效 1：大图标 2：小图标 widgetsType Int 控制类型0：无效1：周/日期2：步数3：距离4：卡路里5：心率6：电池 items items: List[int] [int] 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOMainUISortSupportItem.html":{"url":"doc/model/IDOMainUISortSupportItem.html","title":"IDOMainUISortSupportItem","keywords":"","body":"IDOMainUISortSupportItem 属性 类型 说明 widgetsType Int 控制类型0：无效1：周/日期2：步数3：距离4：卡路里5：心率 6：电池 supportSizeType Int 固件支持的可编辑图标类型0：无效1：大图标2：小图标3：大图标+小图标 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOMtuInfoModel.html":{"url":"doc/model/IDOMtuInfoModel.html","title":"IDOMtuInfoModel","keywords":"","body":"IDOMtuInfoModel 属性 类型 说明 status Int 0：数据有效1：数据无效，请稍等片刻再试。如果数据无效，MTU 为 20。 rxMtu Int 应用程序接收数据的 MTU txMtu Int 应用程序发送数据的 MTU phySpeed Int 物理层速度0：无效1000：1M2000：2M512：512K dleLength Int DLE长度0：不支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMusicControlParamModel.html":{"url":"doc/model/IDOMusicControlParamModel.html","title":"IDOMusicControlParamModel","keywords":"","body":"IDOMusicControlParamModel 说明 类型 属性 状态： 0：无效 1：播放 2：暂停 3：停止 Int status 当前播放时间 单位：秒 Int curTimeSecond 总播放时间 单位：秒 Int totalTimeSecond 音乐名称（最大 63 字节） String musicName 歌手姓名（最大 63 字节）如果固件上未启用 v3MusicControl02AddSingerName，则此值不适用 String singerName Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMusicFolderItem.html":{"url":"doc/model/IDOMusicFolderItem.html","title":"IDOMusicFolderItem","keywords":"","body":"IDOMusicFolderItem 属性 类型 说明 folderID Int 播放列表（文件夹）id，范围从1到10 musicNum Int 播放列表中的歌曲数，最多 100 首 folderName String 播放列表（文件夹）名称，最大 19 字节 musicIndex List[int] int 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOMusicInfoModel.html":{"url":"doc/model/IDOMusicInfoModel.html","title":"IDOMusicInfoModel","keywords":"","body":"IDOMusicInfoModel 属性 类型 说明 allMemory Int 固件SDK卡信息总空间单位:Byte usedMemory Int 固件 SDK 卡信息当前使用的空间（以字节为单位）Uint:Byte usefulMemory Int 固件SDK卡信息可用空间单位:Byte folderItems List[IDOMusicFolderItem] IDOMusicFolderItem 集合 musicItems List[IDOMusicItem] IDOMusicItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOMusicItem.html":{"url":"doc/model/IDOMusicItem.html","title":"IDOMusicItem","keywords":"","body":"IDOMusicItem 属性 类型 说明 musicID Int 音乐id，从1开始 musicMemory Int 音乐占据的空间 musicName String 音乐名称，最大44字节 singerName String 歌手姓名，最多 29 个字节 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMusicOnOffParamModel.html":{"url":"doc/model/IDOMusicOnOffParamModel.html","title":"IDOMusicOnOffParamModel","keywords":"","body":"IDOMusicOnOffParamModel 属性 类型 说明 onOff Int 1：开0：关 showInfoStatus Int 显示歌曲信息开关1：开0：关需要固件支持菜单：supportV2SetShowMusicInfoSwitch Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMusicOpearteParamModel.html":{"url":"doc/model/IDOMusicOpearteParamModel.html","title":"IDOMusicOpearteParamModel","keywords":"","body":"IDOMusicOpearteParamModel 属性 类型 说明 musicOperate Int 音乐操作0：无效操作1：删除音乐2：添加音乐 folderOperate Int 文件夹（播放列表）操作0：无效操作1：删除文件夹2：添加文件夹3：修改播放列表4：导入播放列表5 ：删除音乐 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOMusicOperateModel.html":{"url":"doc/model/IDOMusicOperateModel.html","title":"IDOMusicOperateModel","keywords":"","body":"IDOMusicOperateModel 属性 类型 说明 operateType Int 操作类型：0：无效操作1：删除音乐2：添加音乐3：删除文件夹4：添加文件夹5：修改播放列表6：导入播放列表7：删除播放列表中的音乐 version Int 固件SDK卡信息总空间 errCode Int 0：成功；非零：失败 musicId Int 添加音乐成功返回音乐id folderItems List[IDOMusicFolderItem] IDOMusicFolderItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDONotDisturbStatusModel.html":{"url":"doc/model/IDONotDisturbStatusModel.html","title":"IDONotDisturbStatusModel","keywords":"","body":"IDONotDisturbStatusModel 属性 类型 说明 switchFlag Int 开关状态1：开0：关-1：不支持 startHour Int 开始时间 startMinute Int 开始分钟 endHour Int 结束时间 endMinute Int 结束分钟 haveTimeRange Int 是否有时间范围0：无效1：无时间范围2：有时间范围 weekRepeat Int 重复bit0：无效(bit1 - bit7)：周一至周日 noontimeRestOnOff Int 中午休息开关、耳机提醒开关1：开0：关-1：不支持 noontimeRestStartHour Int 提醒开始时间 noontimeRestStartMinute Int 提醒开始分钟 noontimeRestEndHour Int 提醒结束时间 noontimeRestEndMinute Int 提醒结束分钟 allDayOnOff Int 全天免打扰开关1：开0：关-1：不支持 intelligentOnOff Int 智能免打扰开关1：开0：关-1：不支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMesaageParamItem.html":{"url":"doc/model/IDONoticeMesaageParamItem.html","title":"IDONoticeMesaageParamItem","keywords":"","body":"IDONoticeMesaageParamItem 属性 类型 说明 language Int 语言类型 name String 国家对应的应用名称（最大49字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMesaageParamModel.html":{"url":"doc/model/IDONoticeMesaageParamModel.html","title":"IDONoticeMesaageParamModel","keywords":"","body":"IDONoticeMesaageParamModel 属性 类型 说明 verison Int 协议库版本号 osPlatform Int 系统0：无效，1：Android，2：iOS evtType Int 当前模式 0：无效，1：消息提醒 notifyType Int 消息枚举类型 最大值：20000 msgID Int 消息ID 仅当evt_type为消息提醒且msg_ID不为0时有效 appItemsLen Int 国家/地区数量和语言详细信息 contact String 联系人姓名（最大 63 字节） phoneNumber String 电话号码（最大 31 字节） msgData String 消息内容（最大249字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMessageParamModel.html":{"url":"doc/model/IDONoticeMessageParamModel.html","title":"IDONoticeMessageParamModel","keywords":"","body":"IDONoticeMessageParamModel 属性 类型 说明 verison Int 协议库版本号默认version=1Version=2为发送格式带msg_id evtType Int 消息应用类型 msgID Int 消息ID若evt_type为消息提醒，则mesg_ID有效 supportAnswering Bool 支持接听：1不支持接听：0 supportMute Bool 支持静音：1不支持静音：0 supportHangUp Bool 支持挂断：1不支持挂断：0 msgData String 消息数据 contact String 联系人姓名（最大 63 字节） phoneNumber String 电话号码（最大 31 字节） dataText String 消息内容（最大249字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMessageStateItemItem.html":{"url":"doc/model/IDONoticeMessageStateItemItem.html","title":"IDONoticeMessageStateItemItem","keywords":"","body":"IDONoticeMessageStateItemItem 属性 类型 说明 evtType Int 事件类型 notifyState Int 通知状态1：允许通知2：静默通知3：关闭通知 picFlag Int 回复时适用，将此参数设置为00：无效1：下载对应图片2：无对应图片 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONoticeMessageStateModel.html":{"url":"doc/model/IDONoticeMessageStateModel.html","title":"IDONoticeMessageStateModel","keywords":"","body":"IDONoticeMessageStateModel 属性 类型 说明 errCode Int 错误代码：0 表示成功，非 0 表示失败 operat Int 操作1：添加2：修改3：获取查询 allOnOff Int 查询有效回复整体通知开关状态1：开启所有通知，0：关闭所有通知-1：无效 items List[IDONoticeMessageStateItemItem] IDONoticeMessageStateItemItem 集合 musicItems List[IDOMusicItem] IDOMusicItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDONoticeMessageStateParamModel.html":{"url":"doc/model/IDONoticeMessageStateParamModel.html","title":"IDONoticeMessageStateParamModel","keywords":"","body":"IDONoticeMessageStateParamModel 属性 类型 说明 operat Int 操作1：添加2：修改3：获取查询 allOnOff Int 仅添加和修改整体通知开关1：开启所有通知0：关闭所有通知 allSendNum Int 总发送包数分批发送超过100个包all_send_num = now_send_index表示发送完成 nowSendIndex Int 当前发送顺序 version Int 协议版本号 itemsNum Int items个数 items List[IDONoticeMessageStateItemItem] IDONoticeMessageStateItemItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDONotificationCenterModel.html":{"url":"doc/model/IDONotificationCenterModel.html","title":"IDONotificationCenterModel","keywords":"","body":"IDONotificationCenterModel 属性 类型 说明 notifySwitch Int 通知提醒开关 statusCode Int 状态0：未知超时1：成功2：失败（已取消）3：固件配对超时 errCode Int 0：成功非零：失败 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDONotificationStatusParamModel.html":{"url":"doc/model/IDONotificationStatusParamModel.html","title":"IDONotificationStatusParamModel","keywords":"","body":"IDONotificationStatusParamModel 属性 类型 说明 notifyFlag Int 通知类型：1：允许通知2：静默通知3：禁用通知 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDORunPlanParamModel.html":{"url":"doc/model/IDORunPlanParamModel.html","title":"IDORunPlanParamModel","keywords":"","body":"IDORunPlanParamModel 属性 类型 说明 verison Int 协议库版本号 operate Int 操作1：启动计划2：发送计划数据3：结束计划4：查询运行计划 type Int 计划类型1：3公里跑步计划2：5公里跑步计划3：10公里跑步计划4：半程马拉松训练（第二阶段）5：马拉松训练（阶段2） dayNum Int 计划天数运行2天时适用 year Int 运动计划开始时间 month Int 运动计划开始时间 day Int 运动计划开始时间 hour Int 运动计划开始时间 min Int 运动计划开始时间 sec Int 运动计划开始时间 items List [IDOGpsInfoModelItem] IDOGpsInfoModelItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOSchedulerReminderItem.html":{"url":"doc/model/IDOSchedulerReminderItem.html","title":"IDOSchedulerReminderItem","keywords":"","body":"IDOSchedulerReminderItem 属性 类型 说明 id Int 提醒事件 ID。应用程序发送的增量值，从0开始 repeatType Int 重复时间如果使用getSupportSetRepeatWeekTypeOnScheduleReminderV3启用，则设置基于周的重复的bit1-bit7（周一到周日，位0作为通用开关）设置重复类型（0：无效， 1：一次、2：每天、3：每周、4：每月、5：每年）（如果通过getSupportSetRepeatTypeOnScheduleReminderV3启用） remindOnOff Int 每日提醒开关0：关，1：开 state Int 状态码0：无效，1：已删除，2：启用 title String 标题内容。最大 74 字节 note String 提醒内容。最大 149 字节 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSchedulerReminderModel.html":{"url":"doc/model/IDOSchedulerReminderModel.html","title":"IDOSchedulerReminderModel","keywords":"","body":"IDOSchedulerReminderModel 属性 类型 说明 operate Int 操作类型0：无效1：添加2：删除3：查询4：修改 errCode Int 错误代码。如果成功则为 0，如果错误则为非零 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOScientificSleepSwitchParamModel.html":{"url":"doc/model/IDOScientificSleepSwitchParamModel.html","title":"IDOScientificSleepSwitchParamModel","keywords":"","body":"IDOScientificSleepSwitchParamModel 属性 类型 说明 mode Int 模式2：科学睡眠1：正常睡眠 startHour Int 开始时间 - 小时 startMinute Int 开始时间 - 分钟 endHour Int 结束时间 - 小时 endMinute Int 结束时间-分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOScreenBrightnessModel.html":{"url":"doc/model/IDOScreenBrightnessModel.html","title":"IDOScreenBrightnessModel","keywords":"","body":"IDOScreenBrightnessModel 属性 类型 说明 level Int 亮度级别(0-100) opera Int 0 自动1 手动如果是自动同步配置，请发送00；如果是用户调整，请发送01 mode Int 0 指定级别1 使用环境光传感器2 级别无关紧要 autoAdjustNight Int 夜间自动亮度调节0 无效，由固件定义1 关闭2 夜间自动亮度调节3 夜间亮度降低使用设定时间 startHour Int 开始时间 小时 startMinute Int 开始时间 分钟 endHour Int 结束时间 小时 endMinute Int 结束时间分钟 nightLevel Int 夜间亮度 showInterval Int 显示间隔 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSendRunPlanModel.html":{"url":"doc/model/IDOSendRunPlanModel.html","title":"IDOSendRunPlanModel","keywords":"","body":"IDOSendRunPlanModel 属性 类型 说明 errCode Int 00：成功，01：失败，02：另一个运行计划已启用 version Int 协议库版本号 operate Int 操作：1：启动计划2：发送计划数据3：结束计划4：查询运行计划 type Int 计划类型：1：3公里跑步计划2：5公里跑步计划3：10公里跑步计划4：半程马拉松训练（第二阶段）5：马拉松培训（第二阶段） year Int 计划实施开始时间年份 month Int 计划实施开始时间月份 day Int 计划实施开始时间日 hour Int 计划实施开始时间 小时 min Int 计划实施开始时间分钟 sec Int 计划实施开始时间秒 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSetNoticeStatusModel.html":{"url":"doc/model/IDOSetNoticeStatusModel.html","title":"IDOSetNoticeStatusModel","keywords":"","body":"IDOSetNoticeStatusModel 属性 类型 说明 notifySwitch IDONoticeNotifySwitchState 通知提醒开关 callSwitch IDONoticeCallSwitchState 来电提醒开关 msgAllSwitch IDONoticeMsgAllSwitchState 消息应用总开关 callDelay Int 来电延迟 Call delay isOnSms Bool 短信提醒 SMS reminder isOnEmail Bool 邮件提醒 Email alert isOnWeChat Bool 微信提醒 WeChat reminder isOnQq Bool qq提醒 qq reminder isOnWeibo Bool 微博提醒 Weibo reminder isOnFaceBook Bool FaceBook 提醒 FaceBook Reminder isOnTwitter Bool Twitter 提醒 Twitter Reminder isOnWhatsapp Bool Whatsapp 提醒 Whatsapp Reminder isOnMessenger Bool Messenger 提醒 Messenger reminder isOnInstagram Bool Instagram 提醒 Instagram reminder isOnLinkedIn Bool LinkedIn 提醒 LinkedIn Reminder isOnCalendar Bool Calendar 提醒 Calendar Reminder isOnSkype Bool Skype 提醒 Skype reminder isOnAlarm Bool Alarm 提醒 Alarm Reminder isOnPokeman Bool Pokeman (其他)提醒 Pokemon Reminder(other) isOnVkontakte Bool Vkontakte 提醒 Vkontakte Reminder isOnLine Bool Line 提醒 Line reminder isOnViber Bool Viber 提醒 Viber reminder isOnKakaoTalk Bool KakaoTalk 提醒 KakaoTalk Reminder isOnGmail Bool Gmail 提醒 Gmail reminder isOnOutlook Bool Outlook 提醒 Outlook reminder isOnSnapchat Bool Snapchat 提醒 Snapchat Reminder isOnTelegram Bool Telegram 提醒 Telegram Reminder isOnChatwork Bool Chatwork 提醒 Chatwork isOnSlack Bool Slack 提醒 Slack isOnYahooMail Bool Yahoo Mail 提醒 Yahoo Mail isOnTumblr Bool Tumblr 提醒 Tumblr isOnYoutube Bool Youtube 提醒 Youtube isOnYahooPinterest Bool Yahoo Pinterest 提醒 Yahoo Pinterest isOnKeep Bool Keep 提醒 keep isOnTikTok Bool TikTok 提醒 抖音 isOnRedbus Bool Redbus 提醒 redbus isOnDailyhunt Bool Dailyhunt 提醒 dailyhunt isOnHotstar Bool Hotstar 提醒 hotstar isOnInshorts Bool Inshorts 提醒 inshorts isOnPaytm Bool Paytm 提醒 paytm isOnAmazon Bool Amazon 提醒 amazon isOnFlipkart Bool Flipkart 提醒 flipkart isOnPrime Bool Prime 提醒 prime isOnNetflix Bool Netflix 提醒 netflix isOnGpay Bool Gpay 提醒 gpay isOnPhonpe Bool Phonpe 提醒 phonpe isOnSwiggy Bool Swiggy 提醒 swiggy isOnZomato Bool Zomato 提醒 zomato isOnMakeMyTrip Bool MakeMyTrip 提醒 make my trip isOnJioTv Bool JioTv 提醒 jio tv isOnMicrosoft Bool Microsoft 提醒 Microsoft isOnWhatsAppBusiness Bool WhatsApp Business 提醒 WhatsApp Business isOnNioseFit Bool nioseFit 提醒 noiseFit isOnDidNotCall Bool 没有打电话提醒 没有打电话 isOnMattersRemind Bool 事项 提醒 matters remind isOnUber Bool uber 提醒 uber isOnOla Bool ola 提醒 ola isOnYtMusic Bool yt music 提醒 yt music isOnGoogleMeet Bool google meet 提醒 isOnMormaiiSmartwatch Bool mormaii smartwatch 提醒 isOnTechnosConnect Bool technos connect 提醒 isOnEnioei Bool enioei 提醒 isOnAliexpress Bool aliexpress 提醒 isOnShopee Bool shopee 提醒 isOnTeams Bool teams 提醒 isOn99Taxi Bool 99 taxi 提醒 isOnUberEats Bool uber eats 提醒 isOnLfood Bool l food 提醒 isOnRappi Bool rappi 提醒 isOnMercadoLivre Bool mercado Livre 提醒 isOnMagalu Bool Magalu 提醒 isOnAmericanas Bool Americanas 提醒 isOnYahoo Bool Yahoo 提醒 isOnInstantemail Bool Instantemail 提醒 支持Instantemail的功能表 isOnNhnemail Bool nhnemail 提醒 支持NAVER邮件的功能表 isOnZohoemail Bool zohoemail 提醒 支持ZoHo邮箱的功能表 isOnExchangeemail Bool Exchangeemail 提醒 支持Exchange+ Mail Client 交换邮件的功能表 isOn189email Bool 189email 提醒 支持189邮件的功能表 isOnGoogleGmail Bool googleGmail 提醒 支持谷歌邮箱的功能表 isOnVeryfit Bool Veryfit 提醒 的功能表 0x4F isOnGeneral Bool general 提醒 通知支持通用的功能表 0x50 isOnAlibabaemail Bool 189email 提醒 通知支持阿里巴巴邮箱的功能表 type:0x51 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOShortcutParamModel.html":{"url":"doc/model/IDOShortcutParamModel.html","title":"IDOShortcutParamModel","keywords":"","body":"IDOShortcutParamModel 属性 类型 说明 mode Int 快捷键1功能0：无效1：快速进入摄像头控制2：快速进入运动模式3：快速进入请勿打扰 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSleepPeriodParamModel.html":{"url":"doc/model/IDOSleepPeriodParamModel.html","title":"IDOSleepPeriodParamModel","keywords":"","body":"IDOSleepPeriodParamModel 属性 类型 说明 onOff Int 开关1 开0 关 startHour Int 开始时间（小时） startMinute Int 开始时间（分钟） endHour Int 结束时间（小时） endMinute Int 结束时间（分钟） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSpo2SwitchParamModel.html":{"url":"doc/model/IDOSpo2SwitchParamModel.html","title":"IDOSpo2SwitchParamModel","keywords":"","body":"IDOSpo2SwitchParamModel 属性 类型 说明 onOff Int SpO2 全天开关1 开0 关 startHour Int 开始时间（小时） startMinute Int 开始时间（分钟） endHour Int 结束时间（小时） endMinute Int 结束时间（分钟） lowSpo2OnOff Int 低 SpO2 开关1 开0 关需要菜单 setSpo2AllDayOnOff 的支持 lowSpo2Value Int 低 SpO2 阈值需要菜单“v3SupportSetSpo2LowValueRemind”的支持 notifyFlag Int 通知类型0：无效1：允许通知2：静默通知3：禁用通知需要菜单“getSpo2NotifyFlag”的支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:32:09 "},"doc/model/IDOSport100SortItem.html":{"url":"doc/model/IDOSport100SortItem.html","title":"IDOSport100SortItem","keywords":"","body":"IDOSport100SortItem 属性 类型 说明 type IDOSportType 运动类型 flag Int 0：全部不下载Bit0：下载小图标Bit1：下载大图标Bit2：下载中图标Bit3：下载最小图标 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:44:59 "},"doc/model/IDOSport100SortModel.html":{"url":"doc/model/IDOSport100SortModel.html","title":"IDOSport100SortModel","keywords":"","body":"IDOSport100SortModel 属性 类型 说明 errCode Int 0：成功，非零：失败 operate Int 操作0：无效 1：查询 2：设置 minShowNum Int 要显示的最小项目数，至少 1 maxShowNum Int 最大显示项数，最大20 nowUserLocation Int 显示添加的运动项目的当前位置，应用程序根据该位置进行显示，之前添加的设备对应该位置，之后添加的设备对应该位置之后的位置。仅对查询有效 items List 集合 IDOSport100SortItem Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:45:27 "},"doc/model/IDOSport100SortParamModel.html":{"url":"doc/model/IDOSport100SortParamModel.html","title":"IDOSport100SortParamModel","keywords":"","body":"IDOSport100SortParamModel 属性 类型 说明 operate Int 操作0：无效 1：查询 2：设置 nowUserLocation Int 显示的添加运动的当前位置 items [Int] 运动排序列表 最大值150个 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 16:56:03 "},"doc/model/IDOSportGoalParamModel.html":{"url":"doc/model/IDOSportGoalParamModel.html","title":"IDOSportGoalParamModel","keywords":"","body":"IDOSportGoalParamModel 属性 类型 说明 sportStep Int 锻炼目标的步数 walkGoalSteps Int 每小时步行目标步数设置 targetType Int 目标类型设置0：无效1：每日目标2：每周目标需要菜单getStepDataTypeV2支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSportModeSelectParamModel.html":{"url":"doc/model/IDOSportModeSelectParamModel.html","title":"IDOSportModeSelectParamModel","keywords":"","body":"IDOSportModeSelectParamModel 属性 类型 说明 flag Int 0：无效1：设置快速运动类型 - sport_type1 & sport_type2 & sport_type3 & sport_type42：设置具体运动类型 sportType1 Int 快速运动类型1标志：1有效 sportType2 Int 快速运动类型2标志：1有效 sportType3 Int 快速运动类型3标志：1有效 sportType4 Int 快速运动类型4标志：1有效 sportType0Walk Bool 类型：步行，0不支持，1支持标志：2有效 sportType0Run Bool 类型：正在运行，0不支持，1支持标志：2有效 sportType0ByBike Bool 类型：骑行，0不支持，1支持标志：2有效 sportType0OnFoot Bool 类型：步行（步行），0不支持，1支持标志：2有效 sportType0Swim Bool 类型：游泳，0不支持，1支持标志：2有效 sportType0MountainClimbing Bool 类型：登山，0不支持，1支持flag：2有效 sportType0Badminton Bool 类型：羽毛球，0不支持，1支持标志：2有效 sportType0Other Bool 类型：其他，0不支持，1支持标志：2有效 sportType1Fitness Bool 类型：健身，0不支持，1支持标志：2有效 sportType1Spinning Bool 类型：旋转，0不支持，1支持标志：2有效 sportType1Ellipsoid Bool 类型：椭球体，0不支持，1支持标志：2有效 sportType1Treadmill Bool 类型：跑步机，0 不支持，1 支持标志：2 有效 sportType1SitUp Bool 类型：仰卧起坐，0 不支持，1 支持标志：2 有效 sportType1PushUp Bool 类型：俯卧撑，0不支持，1支持标志：2有效 sportType1Dumbbell Bool 类型：哑铃，0不支持，1支持标志：2有效 sportType1Weightlifting Bool 类型：举重，0 不支持，1 支持标志：2 有效 sportType2BodybuildingExercise Bool 类型：健身运动，0不支持，1支持标志：2有效 sportType2Yoga Bool 类型：瑜伽，0 不支持，1 支持标志：2 有效 sportType2RopeSkipping Bool 类型：跳绳，0不支持，1支持标志：2有效 sportType2TableTennis Bool 类型：乒乓球，0不支持，1支持标志：2有效 sportType2Basketball Bool 类型：篮球，0不支持，1支持标志：2有效 sportType2Football Bool 类型：足球，0不支持，1支持标志：2有效 sportType2Volleyball Bool 类型：排球，0 不支持，1 支持标志：2 有效 sportType2Tennis Bool 类型：网球，0 不支持，1 支持标志：2 有效 sportType3Golf Bool 类型：高尔夫，0 不支持，1 支持标志：2 有效 sportType3Baseball Bool 类型：棒球，0 不支持，1 支持标志：2 有效 sportType3Skiing Bool 类型：滑雪，0 不支持，1 支持标志：2 有效 sportType3RollerSkating Bool 类型：轮滑，0不支持，1支持标志：2有效 sportType3Dance Bool 类型：舞蹈，0不支持，1支持标志：2有效 sportType3StrengthTraining Bool 类型：力量训练，0不支持，1支持标志：2有效 sportType3CoreTraining Bool 类型：核心训练，0不支持，1支持标志：2有效 sportType3TidyUpRelax Bool 类型：整理放松，0 不支持，1 支持标志：2 有效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSportModeSortParamModel.html":{"url":"doc/model/IDOSportModeSortParamModel.html","title":"IDOSportModeSortParamModel","keywords":"","body":"IDOSportModeSortParamModel 属性 类型 说明 index Int 排序索引（从1开始，0无效） type IDOSportType 运动类型 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 16:59:27 "},"doc/model/IDOSportSortModel.html":{"url":"doc/model/IDOSportSortModel.html","title":"IDOSportSortModel","keywords":"","body":"IDOSportSortModel 属性 类型 说明 errCode Int 0：成功，非零：失败 operate Int 操作0：无效 1：查询 2：设置 sportType IDOSportType 运动类型 nowUserLocation Int 显示添加的运动项目的当前位置，应用程序根据该位置进行显示，之前添加的设备对应该位置，之后添加的设备对应该位置之后的位置。仅对查询有效 items [Int] 设置列表 最大值50个 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 17:08:11 "},"doc/model/IDOSportSortParamModel.html":{"url":"doc/model/IDOSportSortParamModel.html","title":"IDOSportSortParamModel","keywords":"","body":"IDOSportSortParamModel 属性 类型 说明 operate Int 操作0：无效 1：查询 2：设置 sportType IDOSportType 运动类型 nowUserLocation Int 显示的添加运动的当前位置 items [Int] 运动排序列表 最大值150个 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 16:51:19 "},"doc/model/IDOStepGoalModel.html":{"url":"doc/model/IDOStepGoalModel.html","title":"IDOStepGoalModel","keywords":"","body":"IDOStepGoalModel 属性 类型 说明 step Int 每日步数目标 stepWeek Int 每周步数目标启用 v2_support_set_step_data_type_03_03 时有效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOStressCalibrationModel.html":{"url":"doc/model/IDOStressCalibrationModel.html","title":"IDOStressCalibrationModel","keywords":"","body":"IDOStressCalibrationModel 属性 类型 说明 retCode Int 0：成功1：失败-正在校准2：失败-充电3：失败-未佩戴4：失败-运动场景 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOStressCalibrationParamModel.html":{"url":"doc/model/IDOStressCalibrationParamModel.html","title":"IDOStressCalibrationParamModel","keywords":"","body":"IDOStressCalibrationParamModel 属性 类型 说明 stressScore Int 压力分数，范围从 1 到 10 status Int 0：开始校准设置1：取消校准设置 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOStressValModel.html":{"url":"doc/model/IDOStressValModel.html","title":"IDOStressValModel","keywords":"","body":"IDOStressValModel 属性 类型 说明 stressVal Int 应力值 threshold Int 临界点 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSupportMaxSetItemsNumModel.html":{"url":"doc/model/IDOSupportMaxSetItemsNumModel.html","title":"IDOSupportMaxSetItemsNumModel","keywords":"","body":"IDOSupportMaxSetItemsNumModel 属性 类型 说明 contactMaxSetNum Int 固件支持app设置的最大经常联系人数（默认10） reminderMaxSetNum Int 固件支持app设置的最大日程提醒数量（默认30个） msgMaxBuffSize Int 消息提醒发送缓冲区最大大小（默认250字节） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSyncContactModel.html":{"url":"doc/model/IDOSyncContactModel.html","title":"IDOSyncContactModel","keywords":"","body":"IDOSyncContactModel 属性 类型 说明 errCode Int 错误码，0表示成功，非0表示错误码 operat Int 操作0：无效1：设置2：查询3：设置紧急联系人（需要菜单支持getSupportSetGetEmergencyContactV3）4：查询紧急联系人联系人（需要菜单中支持“getSupportSetGetEmergencyContactV3”） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOSyncContactParamModel.html":{"url":"doc/model/IDOSyncContactParamModel.html","title":"IDOSyncContactParamModel","keywords":"","body":"IDOSyncContactParamModel 属性 类型 说明 operat Int 操作0：无效1：设置联系人2：查询联系人3：设置紧急联系人（需要菜单中getSupportSetGetEmergencyContactV3支持）4：查询紧急联系人（需要菜单中支持getSupportSetGetEmergencyContactV3） version int 协议版本 （不需要赋值） itemsNum Int item 个数 （不需要赋值） items List[IDOContactItem] IDOContactItem 集合 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-09 10:37:41 "},"doc/model/IDOTakingMedicineReminderParamModel.html":{"url":"doc/model/IDOTakingMedicineReminderParamModel.html","title":"IDOTakingMedicineReminderParamModel","keywords":"","body":"IDOTakingMedicineReminderParamModel 属性 类型 说明 takingMedicineId Int ID范围为1到5 onOff Int 0 表示关闭1 表示开启 startHour Int 提醒的开始时间 startMinute Int 提醒的起始分钟 endHour Int 提醒结束时间 endMinute Int 提醒的结束分钟 repeats Set 重复IDOWeek isOpenRepeat Bool 重复开关 interval Int 提醒间隔（分钟）默认为 60 分钟 doNotDisturbOnOff Int 请勿打扰时间段开关0为关1为开默认为关 doNotDisturbStartHour Int 请勿打扰开始时间 doNotDisturbStartMinute Int 请勿打扰开始分钟 doNotDisturbEndHour Int 请勿打扰结束时间 doNotDisturbEndMinute Int 请勿打扰结束分钟 IDOWeek Android enum class IDOWeek(val rawValue: Int):Serializable { MONDAY(0), TUESDAY(1), WEDNESDAY(2), THURSDAY(3), FRIDAY(4), SATURDAY(5), SUNDAY(6); } iOS enum IDOWeek: Int { case monday = 0, tuesday, wednesday, thursday, friday, saturday, sunday } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 17:16:12 "},"doc/model/IDOTemperatureSwitchParamModel.html":{"url":"doc/model/IDOTemperatureSwitchParamModel.html","title":"IDOTemperatureSwitchParamModel","keywords":"","body":"IDOTemperatureSwitchParamModel 属性 类型 说明 mode Int 模式：1：开0：关 startHour Int 开始时间、小时 startMinute Int 开始时间，分钟 endHour Int 结束时间，小时 endMinute Int 结束时间，分钟 unit Int 温度单位设置：1：摄氏度2：华氏度 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOUnitParamModel.html":{"url":"doc/model/IDOUnitParamModel.html","title":"IDOUnitParamModel","keywords":"","body":"IDOUnitParamModel 属性 类型 说明 distUnit Int 距离单位：0：无效1：公里（公制）2：英里（英制） weightUnit Int 重量单位：0：无效1：kg2：lb temp Int 温度单位：0：无效1：℃2：℉ stride Int 步行步幅：0：无效0：厘米 language Int 语言 is12HourFormat Int 时间格式：0：无效1：24小时格式2：12小时格式 strideRun Int 跑步步幅：0：无效1：cm男性默认值：90cm strideGpsCal Int 通过 GPS 步幅校准开/关：0：无效1：开2：关 weekStartDate Int 一周的开始日期：0：星期一1：星期日3：星期六 calorieUnit Int 卡路里单位设置：0：无效1：默认kCal2：Cal3：kJ swimPoolUnit Int 泳池单位设置：0：无效1：默认米2：码 cyclingUnit Int 骑行单位：0：无效1：公里2：英里 walkingRunningUnit Int 步行或跑步单位（公里/英里）设置：0：无效1：公里2：英里需要设备固件 setSupportWalkRunUnit 支持 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 17:42:33 "},"doc/model/IDOUpdateStatusModel.html":{"url":"doc/model/IDOUpdateStatusModel.html","title":"IDOUpdateStatusModel","keywords":"","body":"IDOUpdateStatusModel 属性 类型 说明 devVesion Int 固件版本号 state Int 0为正常状态1为升级状态 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOUpHandGestureModel.html":{"url":"doc/model/IDOUpHandGestureModel.html","title":"IDOUpHandGestureModel","keywords":"","body":"IDOUpHandGestureModel 属性 类型 说明 endHour Int 结束时间，小时 endMinute Int 结束时间，分钟 hasTimeRange Int 时间范围是否可用 1：是 0：否 onOff Int 开关 1：开 0：关 -1：不支持 showSecond Int 屏幕开启持续时间（以秒为单位） startHour Int 开始时间、小时 startMinute Int 开始时间，分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOUpHandGestureParamModel.html":{"url":"doc/model/IDOUpHandGestureParamModel.html","title":"IDOUpHandGestureParamModel","keywords":"","body":"IDOUpHandGestureParamModel 属性 类型 说明 onOff Int 开关1：开0：关 showSecond Int 屏幕保持开启的持续时间（以秒为单位） hasTimeRange Int 是否有时间范围1：有0：无 startHour Int 时间范围的开始时间 startMinute Int 时间范围的起始分钟 endHour Int 时间范围的结束小时 endMinute Int 时间范围的结束分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-15 12:25:27 "},"doc/model/IDOV3NoiseParamModel.html":{"url":"doc/model/IDOV3NoiseParamModel.html","title":"IDOV3NoiseParamModel","keywords":"","body":"IDOV3NoiseParamModel 属性 类型 说明 mode Int 全天环境噪音音量开关1：开0：关 startHour Int 开始时间（小时） startMinute Int 开始时间（分钟） endHour Int 结束时间（小时） endMinute Int 结束时间（分钟） highNoiseOnOff Int 阈值开关1：开0：关 highNoiseValue Int 阈值 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOVersionInfoModel.html":{"url":"doc/model/IDOVersionInfoModel.html","title":"IDOVersionInfoModel","keywords":"","body":"IDOVersionInfoModel 属性 类型 说明 sdkVersion Int SDK版本 hrAlgorithmVersion Int 心率算法版本 sleepAlgorithmVersion Int 睡眠算法版本 stepAlgorithmVersion Int 计步器算法版本 gestureRecognitionVersion Int 手势识别算法版本 pcbVersion Int PCB版本（乘以10，例如1.1版本乘以11） spo2Version Int 穿戴式版本 wearVersion Int SpO2 算法版本 stressVersion Int 压力等级算法版本 kcalVersion Int 卡路里算法版本 disVersion Int 距离算法版本 axle3SwimVersion Int 3轴传感器游泳算法版 axle6SwimVersion Int 6轴传感器游泳算法版 actModeTypeVersion Int 活动模式识别算法版本 allDayHrVersion Int 全天心率算法版本 gpsVersion Int GPS算法版本 peripheralsVersion Int 206个定制项目的外围版本 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOVoiceReplyParamModel.html":{"url":"doc/model/IDOVoiceReplyParamModel.html","title":"IDOVoiceReplyParamModel","keywords":"","body":"IDOVoiceReplyParamModel 属性 类型 说明 flagIsContinue Int 继续录音标志0：停止录音，1：继续录音 title String 标题数据，最大 31 字节 textContent String 内容数据，最大511字节 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWalkRemindModel.html":{"url":"doc/model/IDOWalkRemindModel.html","title":"IDOWalkRemindModel","keywords":"","body":"IDOWalkRemindModel 属性 类型 说明 onOff Int 0 关，1 开 goalStep Int 目标步骤（已弃用） startHour Int 开始时间（小时） startMinute Int 开始时间（分钟） endHour Int 结束时间（小时） endMinute Int 结束时间（分钟） repeats Set 重复 isOpenRepeat Bool 重复开关 goalTime Int 目标时间（已弃用） notifyFlag Int 通知类型0：无效1：允许通知2：静默通知3：关闭通知需要固件启用setWalkReminderAddNotify doNotDisturbOnOff Int 请勿打扰开关0 关闭1 开启需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbStartHour Int 请勿打扰开始时间（小时）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbStartMinute Int 请勿打扰开始时间（分钟）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbEndHour Int 请勿打扰结束时间（小时）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 noDisturbEndMinute Int 请勿打扰结束时间（分钟）需要固件启用 getSupportSetGetNoReminderOnWalkReminderV2 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWalkRemindTimesItem.html":{"url":"doc/model/IDOWalkRemindTimesItem.html","title":"IDOWalkRemindTimesItem","keywords":"","body":"IDOWalkRemindTimesItem 属性 类型 说明 hour Int 步行提醒时间: 小时 min Int 步行提醒时间: 分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWalkRemindTimesParamModel.html":{"url":"doc/model/IDOWalkRemindTimesParamModel.html","title":"IDOWalkRemindTimesParamModel","keywords":"","body":"IDOWalkRemindTimesParamModel 属性 类型 说明 onOff Int 开关： 1：开 0：关 items [IDOWalkRemindTimesItem] 走动提醒详情 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 10:58:56 "},"doc/model/IDOWallpaperDialReplyV3Model.html":{"url":"doc/model/IDOWallpaperDialReplyV3Model.html","title":"IDOWallpaperDialReplyV3Model","keywords":"","body":"IDOWallpaperDialReplyV3Model 属性 类型 说明 errCode Int 0 表示成功，非 0 表示失败 operate Int 操作：0为查询，1为设置，2为删除壁纸表盘 location Int 设置位置信息 hideType Int 隐藏类型 timeColor Int 时间控制颜色 widgetType Int 控制类型 widgetIconColor Int 小部件图标的颜色（保留 1 个字节 + R（1 个字节）+ G（1 个字节）+ B（1 个字节）） widgetNumColor Int 小部件编号的颜色（保留 1 个字节 + R（1 个字节）+ G（1 个字节）+ B（1 个字节）） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWallpaperDialReplyV3ParamModel.html":{"url":"doc/model/IDOWallpaperDialReplyV3ParamModel.html","title":"IDOWallpaperDialReplyV3ParamModel","keywords":"","body":"IDOWallpaperDialReplyV3ParamModel 属性 类型 说明 operate Int 操作：0为查询，1为设置，2为删除壁纸表盘 location Int 设置位置信息，参考9格布局 hideType Int 隐藏类型：0表示全部显示，1表示隐藏子控件（图标和数字） timeColor Int 时间控制颜色（保留1字节+R（1字节）+G（1字节）+B（1字节）） widgetType Int 控制类型：1 表示周/日期、2 表示步数、3 表示距离、4 表示卡路里、5 表示心率、6 表示电池 widgetIconColor Int 小部件图标的颜色（保留 1 个字节 + R（1 个字节）+ G（1 个字节）+ B（1 个字节）） widgetNumColor Int 小部件编号的颜色（保留 1 个字节 + R（1 个字节）+ G（1 个字节）+ B（1 个字节）） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchDialIdModel.html":{"url":"doc/model/IDOWatchDialIdModel.html","title":"IDOWatchDialIdModel","keywords":"","body":"IDOWatchDialIdModel 属性 类型 说明 watchId Int 手表ID Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchDialInfoModel.html":{"url":"doc/model/IDOWatchDialInfoModel.html","title":"IDOWatchDialInfoModel","keywords":"","body":"IDOWatchDialInfoModel 属性 类型 说明 blockSize Int 压缩块大小 familyName String 家族名称（最多 10 个字节） format Int 颜色格式 height Int 屏幕高度（像素大小） sizex100 Int 尺寸以 100x 为增量 width Int 屏幕宽度（像素大小） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchDialParamModel.html":{"url":"doc/model/IDOWatchDialParamModel.html","title":"IDOWatchDialParamModel","keywords":"","body":"IDOWatchDialParamModel 属性 类型 说明 dialId Int 需要设置的表盘ID拨号id0无效，目前支持1~4 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchDialSortItem.html":{"url":"doc/model/IDOWatchDialSortItem.html","title":"IDOWatchDialSortItem","keywords":"","body":"IDOWatchDialSortItem 属性 类型 说明 type Int 手表表盘类型 1：普通表盘，2：壁纸表盘，3：云表盘 sortNumber Int 序列号，从0开始，不超过支持的手表表盘总数 name String 表盘 ID，最大 29 字节 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchDialSortParamModel.html":{"url":"doc/model/IDOWatchDialSortParamModel.html","title":"IDOWatchDialSortParamModel","keywords":"","body":"IDOWatchDialSortParamModel 属性 类型 说明 sortItemNumb Int 表盘排序列表中的项目数 pSortItem [IDOWatchDialSortItem] 表盘排序列表内容 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 11:05:26 "},"doc/model/IDOWatchFaceModel.html":{"url":"doc/model/IDOWatchFaceModel.html","title":"IDOWatchFaceModel","keywords":"","body":"IDOWatchFaceModel 属性 类型 说明 errCode Int 错误码，0表示成功，非0表示错误 operate Int 操作：0 - 查询当前使用的表盘1 - 设置表盘2 - 删除表盘3 - 动态请求空间设置对应的空间大小 fileName String 表盘名称，最大29字节 fileCount Int 文件数量需要固件启用功能表v3WatchDailSetAddSize如果operate!=3，这个数据和之前一样，都是1，保存方式和之前一样如果operate=3：动态请求space 设置对应的空间大小，这个对应删除的文件名列如果没有启用v3WatchDailSetAddSize，该字段默认为1 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchFaceParamModel.html":{"url":"doc/model/IDOWatchFaceParamModel.html","title":"IDOWatchFaceParamModel","keywords":"","body":"IDOWatchFaceParamModel 属性 类型 说明 operate Int 操作：0 - 查询当前使用的表盘1 - 设置表盘2 - 删除表盘3 - 动态请求空间设置对应的空间大小 fileName String 表盘名称，最大29字节 watchFileSize Int 未压缩的文件长度固件打开函数表v3WatchDailSetAddSize后，应用程序需要发送该字段在表盘传输之前，固件需要分配相应的空间来保存，未压缩的文件长度需要传输的文件长度 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchItem.html":{"url":"doc/model/IDOWatchItem.html","title":"IDOWatchItem","keywords":"","body":"IDOWatchItem 属性 类型 说明 type Int 表盘类型1：普通表盘2：壁纸表盘3：云表盘 watchVersion Int 表盘当前版本号（适用于云表盘） sortNumber Int 表盘顺序号从 0 开始 name String 表盘名称 size Int 表盘大小，以字节为单位仅在固件启用“v3SupportGetWatchSize”时适用，否则该字段无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWatchListModel.html":{"url":"doc/model/IDOWatchListModel.html","title":"IDOWatchListModel","keywords":"","body":"IDOWatchListModel 属性 类型 说明 localWatchNum Int 本地表盘总数 cloudWatchNum Int 云表盘总数 wallpaperWatchNum Int 壁纸表盘总数 userCloudWatchNum Int 使用的云表盘数量 userWallpaperWatchNum Int 使用的壁纸表盘数量 nowShowWatchName String 当前显示的表盘ID，最大30字节 watchFrameMainVersion Int 框架版本号，从1开始 fileMaxSize Int 单个文件的最大大小，以千字节为单位（保留） watchCapacitySize Int 表盘总容量Uint:Byte如果固件启用setWatchCapacitySizeDisplay则设置为0 userWatchCapacitySize Int 表盘已用容量Uint:Byte如果固件启用setWatchCapacitySizeDisplay则设置为0 usableMaxDownloadSpaceSize Int 可用于下载表盘的最大连续空间Uint:Byte如果固件启用setWatchCapacitySizeDisplay则设置为0 items [IDOWatchItem] 表盘列表详情 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 11:09:30 "},"doc/model/IDOWatchListV2Model.html":{"url":"doc/model/IDOWatchListV2Model.html","title":"IDOWatchListV2Model","keywords":"","body":"IDOWatchListV2Model 属性 类型 说明 availableCount Int 剩余可用文件数 fileMaxSize Int 单个文件的最大大小（以KB为单位） items [IDOWatchListV2Item] 表盘列表详情 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 11:18:04 "},"doc/model/IDOWeatherDataFuture.html":{"url":"doc/model/IDOWeatherDataFuture.html","title":"IDOWeatherDataFuture","keywords":"","body":"IDOWeatherDataFuture 属性 类型 说明 type Int 天气类型0x00 其他0x01 晴0x02 阴0x03 阴0x04 雨0x05 大雨0x06 雷雨0x07雪0x08雨夹雪0x09台风0x0A沙尘暴0x0B晴夜0x0C阴夜0x0D炎热0x0E寒冷0x0F微风0x10大风0x11阴霾0x12阵雨0x13阴转晴0x30雷0x31冰雹0x32沙尘0x33 龙卷风 minTemp Int 未来最低温度 maxTemp Int 未来最高温度 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 15:13:40 "},"doc/model/IDOWeatherDataParamModel.html":{"url":"doc/model/IDOWeatherDataParamModel.html","title":"IDOWeatherDataParamModel","keywords":"","body":"IDOWeatherDataParamModel 属性 类型 说明 type Int 天气类型0x00 其他0x01 晴0x02 阴0x03 阴0x04 雨0x05 大雨0x06 雷雨0x07雪0x08雨夹雪0x09台风0x0A沙尘暴0x0B晴夜0x0C阴夜0x0D炎热0x0E寒冷0x0F微风0x10大风0x11阴霾0x12阵雨0x13阴转晴0x30雷0x31冰雹0x32沙尘0x33 龙卷风 temp Int 当前温度 maxTemp Int 当日最高气温 minTemp Int 当日最低气温 humidity Int 当前湿度 uvIntensity Int 当前紫外线强度 aqi Int 当前空气质量指数（AQI） future [IDOWeatherDataFuture] 未来三天的天气情况 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2024-01-16 15:13:47 "},"doc/model/IDOWeatherSunTimeParamModel.html":{"url":"doc/model/IDOWeatherSunTimeParamModel.html","title":"IDOWeatherSunTimeParamModel","keywords":"","body":"IDOWeatherSunTimeParamModel 属性 类型 说明 sunriseHour Int 日出时刻 sunriseMin Int 日出时刻 sunsetHour Int 日落时分 sunsetMin Int 日落一分钟 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWeatherV3ParamModel.html":{"url":"doc/model/IDOWeatherV3ParamModel.html","title":"IDOWeatherV3ParamModel","keywords":"","body":"IDOWeatherV3ParamModel 属性 类型 说明 week Int 星期几bit0：星期一bit1：星期二，依此类推直到星期日 weatherType Int 天气类型0：其他1：晴2：多云3：阴4：雨5：大雨6 ：雷暴7：雪8：雨夹雪9：台风10：沙尘暴11：夜间晴12：夜间多云 13：热14：冷15：微风16：大风17：阴霾18：阵雨19：阴转晴48：雷声49：冰雹50：风沙51：龙卷风（realme自定义天气类型idw02） todayTmp Int 当前温度（摄氏度）对于负温度，将温度加 100 并传输 todayMaxTemp Int 最高温度（摄氏度）对于负温度，将温度加 100 并传输 todayMinTemp Int 最低温度（摄氏度）对于负温度，将温度加 100 并传输 cityName String 城市名称最多 74 字节 airQuality Int 空气质量乘以10进行传输 precipitationProbability Int 降水概率0-100% todayUvIntensity Int 紫外线强度乘以 10 即可获得透射率 sunriseItemNum Int 日出日落时间详情数目前最大天数设置为7版本1无效 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/model/IDOWorldTimeParamModel.html":{"url":"doc/model/IDOWorldTimeParamModel.html","title":"IDOWorldTimeParamModel","keywords":"","body":"IDOWorldTimeParamModel 属性 类型 说明 id Int 详细ID，唯一性 minOffset Int 从当前时间到 UTC 0 的分钟偏移量 cityName String 城市名称，最多 59 字节 longitudeFlag Int 1：东经 2：西经 longitude Int 经度，乘以 100，保留 2 位小数 latitudeFlag Int 1：北纬 2：南纬 latitude Int 纬度，乘以 100，保留 2 位小数 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/enum/IDOEnumIndex.html":{"url":"doc/enum/IDOEnumIndex.html","title":"枚举","keywords":"","body":"枚举 IDO Evt Type IDO Sport Type IDO Trans Type Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 17:19:17 "},"doc/enum/IDOEvtType.html":{"url":"doc/enum/IDOEvtType.html","title":"事件类型","keywords":"","body":"事件类型 evtType 类型 说明 0x01 短信 0x02 邮件 0x03 微信 0x04 QQ 0x05 新浪微博 0x06 facebook 0x07 twitter 0x08 WhatsApp 0x09 Messenger 0x0A Instagram 0x0B Linked in 0x0C 日历 0x0D skype； 0x0E 闹钟 0x0F pokeman 0x10 VKontakte 0x11 Line 0x12 Viber 0x13 KakaoTalk 0x14 Gmail 0x15 Outlook, 0x16 Snapchat 0x17 TELEGRAM 0x18 other 0x20 chatwork 0x21 slack 0x22 Yahoo Mail 0x23 Tumblr, 0x24 Youtube 0x25 Yahoo Pinterest 0x26 TikTok 0x27 Redbus 0x28 Dailyhunt 0x29 Hotstar 0x2A Inshorts 0x2B Paytm 0x2C Amazon 0x2D Flipkart 0x2E Prime 0x2F Netflix 0x30 Gpay 0x31 Phonpe 0x32 Swiggy 0x33 Zomato 0x34 Make My trip 0x35 Jio Tv 0x36 keep 0x37 Microsoft 0x38 WhatsApp Business 0x39 niosefit 0x3A missed_calls未接来电 0x3B Gpap 0x3C YTmusic 0x3D Uber 0x3E Ola 0x3F 事项提醒 0x40 Google meet Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/enum/IDOSportType.html":{"url":"doc/enum/IDOSportType.html","title":"运动类型","keywords":"","body":"运动类型 sportType 以前运动类型: 类型 说明 0 无 1 走路 2 跑步 3 骑行 4 徒步 5 游泳 6 爬山 7 羽毛球 8 其他 9 健身 10 动感单车 11 椭圆机 12 跑步机 13 仰卧起坐 14 俯卧撑 15 哑铃 16 举重 17 健身操 18 瑜伽 19 跳绳 20 乒乓球 21 篮球 22 足球 23 排球 24 网球 25 高尔夫球 26 棒球 27 滑雪 28 轮滑 29 跳舞 31 室内划船/roller machine 32 普拉提/pilates 33 交叉训练/cross train 34 有氧运动/cardio 35 尊巴舞/Zumba 36 广场舞/square dance 37 平板支撑/Plank 38 健身房/gym 48 户外跑步 49 室内跑步， 50 户外骑行 51 室内骑行 52 户外走路 53 室内走路 54 泳池游泳 55 开放水域游泳 56 椭圆机 57 划船机 58 高强度间歇训练法 75 板球运动 基础运动： 类型 说明 101 功能性力量训练 102 核心训练 103 踏步机 104 整理放松 基健身（25种）： 类型 说明 110 传统力量训练 112 引体向上 114 开合跳 115 深蹲 116 高抬腿 117 拳击 118 杠铃 119 武术 120 太极 121 跆拳道 122 空手道 123 自由搏击 124 击剑 125 射箭 126 体操 127 单杠 128 双杠 129 漫步机 130 登山机 球类： 类型 说明 131 保龄球 132 台球 133 曲棍球 134 橄榄球 135 壁球 136 垒球 137 手球 138 毽球 139 沙滩足球 140 藤球 141 躲避球 休闲运动： 类型 说明 152 街舞 153 芭蕾 154 社交舞 155 飞盘 156 飞镖 157 骑马 158 爬楼 159 放风筝 160 钓鱼 冰雪运动： 类型 说明 161 雪橇 162 雪车 163 单板滑雪 164 雪上运动 165 高山滑雪 166 越野滑雪 167 冰壶 168 冰球 169 冬季两项 极限运动（5种）： 类型 说明 180 滑板 181 攀岩 182 蹦极 183 跑酷 184 BMX kr01定制项目： 类型 说明 193 Outdoor Fun（户外玩耍） 194 Other Activity（其他运动） Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/enum/IDOTransType.html":{"url":"doc/enum/IDOTransType.html","title":"传输文件类型","keywords":"","body":"传输文件类型 IDOTransType 类型 说明 fw 固件升级 fzbin 图片资源升级 bin 字库升级 lang 语言包升级 bt BT升级 iwfLz 表盘 wallpaperZ 壁纸表盘 ml 通讯录文件 onlineUbx agps 在线 offlineUbx agps 线下 epo epo升级 gps gps ton 提示音 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "},"doc/IDOErrorCode.html":{"url":"doc/IDOErrorCode.html","title":"错误码","keywords":"","body":"错误码说明 功能概述 errorCode错误码是全局命令回调的判断状态依据，当errorCode等于0为成功，其他值为失败。 对应错误码表 错误码 说明 0 指令执行成功 1 缺失SVC处理程序 2 未启用SoftDevice 3 内部错误 4 操作所需的内存不可用 5 未找到 6 不支持的操作 7 无效的参数 8 无效的状态，此状态下不允许进行操作 9 无效的长度 10 无效的标志 11 无效的数据 12 无效的数据大小 13 操作超时 14 空指针 15 禁止的操作 16 错误的内存地址 17 忙碌 18 超过最大连接数 19 操作所需的资源不足 20 Bt蓝牙升级错误 21 操作所需的空间不足 22 电池电量低 23 无效的文件名/格式 24 空间够但需要整理 25 空间整理中 -1 取消 -2 失败 -3 指令已存在队列中 -4 设备断线 -5 OTA模式 -6 未连接设备 -99 JSON解析失败 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 09:50:25 "}}